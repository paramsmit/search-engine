---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:11:\"description\";s:348:\"In order to authenticate
  with this API, an Instance Administrator with access\nto your Instance will need
  to use the Instance Administration interface to create\nan Authentication Token.\n\nAccess
  to the API needs to be enabled by kuraCloud staff for each separate Instance.  \n\nIf
  you are interested in using this API please contact your Salesperson. \n\";s:7:\"version\";s:5:\"2.0.0\";s:5:\"title\";s:35:\"kuraCloud
  Admin API v2 (Test Cloud)\";s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:21:\"noreply@kuracloud.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: test-api.kuracloud.com
basePath: /v2
paths:
  /instance:
    get:
      tags:
      - Instance Settings
      summary: Get general settings
      description: Returns the details of your instance.
      operationId: getGeneralSettings
      consumes:
      - ""
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/settingsOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Instance Settings
      summary: Edit general settings
      description: 'Edits the general settings of your instance. nnKey for sidebar
        colours in the User Interface: n  n| DEFAULT | COLOUR1 | COLOUR2 | COLOUR3
        | COLOUR4 | COLOUR5 | COLOUR6 | COLOUR7 | COLOUR8 |n|----------|----------|----------|----------|----------|----------|----------|----------|----------|n|
        Default   | Kura   | Kiwi  | Cadet  | Tomato  | Charcoal  | Snow   | Banana   |
        Deep Sea  |n'
      operationId: ""
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: settings object
        description: Settings object to be applied to your instance
        required: true
        schema:
          $ref: '#/definitions/settingsInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/settingsOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course:
    post:
      tags:
      - Courses
      summary: Create course
      description: Creates a new course.nnThe lmsEnabled field may only be changed
        if LMS Integration has been enabled for your instance.nnNote that lmsCourseName
        is a hidden field that is not available in the standard kuraCloud user interface.
        You may set this field, however it is currently used only as a placeholder.n
      operationId: createCourse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: course object
        description: course details
        required: true
        schema:
          $ref: '#/definitions/courseInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Courses
      summary: List Courses
      description: Returns an array of courses.  Deleted courses will not be returned.
      operationId: listCourses
      consumes:
      - ""
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}:
    get:
      tags:
      - Courses
      summary: Get course
      description: Returns information for an existing course.
      operationId: getCourse
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Courses
      summary: Edit course
      description: Edits details of an existing course.     nnThe lmsEnabled field
        may only be changed if LMS Integration has been enabled for your instance.nnlmsCourseName
        is a hidden field that is not available in the standard kuraCloud user interface.
        You may set this field, however it is currently used only as a placeholder.n
      operationId: editCourse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - in: body
        name: settings object
        description: Settings object to be applied to your instance
        required: true
        schema:
          $ref: '#/definitions/courseInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Courses
      summary: Delete course
      description: Deletes an existing course.
      operationId: deleteCourse
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /admin:
    post:
      tags:
      - Administrators
      summary: Invite admin
      description: 'Invites an admin user.nnKey for instanceAdmin field: nn| true
        | false |n|----------|----------|n| Instance admin   | Course admin   |n'
      operationId: inviteAdmin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/adminUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Administrators
      summary: List admins
      description: Returns an array of active course or instance admins.  Deleted
        admins will not be returned.
      operationId: listAdmins
      consumes:
      - ""
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /admin/{adminId}:
    get:
      tags:
      - Administrators
      summary: Get admin
      description: Returns information for an existing admin user.
      operationId: getAdmin
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: adminId
        in: path
        description: Instance-unique identifier of an existing admin user. adminId
          may be obtained by calling the List admins method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Administrators
      summary: Edit admin
      description: Edits details of an existing admin user.
      operationId: editAdmin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: adminId
        in: path
        description: Instance-unique identifier of an existing admin user. adminId
          may be obtained by calling the List admins method.
        required: true
        type: integer
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/editAdminUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Administrators
      summary: Delete admin
      description: Revokes privileges of a course or instance admin.nnYou cannot delete
        an active (i.e. inviteComplete = true) Instance Admin if they are the last
        remaining one in the Instance.  If you attempt to do so, the API will return
        a 403 error.n
      operationId: deleteAdmin
      produces:
      - form-data
      parameters:
      - name: adminId
        in: path
        description: Instance-unique identifier of an existing admin user. adminId
          may be obtained by calling the List admins method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student:
    post:
      tags:
      - Student Accounts
      summary: Invite students
      description: Invites students to an existing course.nnUsers of this method may
        also invite a single student by passing an individual studentUserInput object
        instead of an array.n
      operationId: inviteStudents
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - in: body
        name: student user array
        description: student user details
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/studentUserInput'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Student Accounts
      summary: List students
      description: Returns an array of active and pending students in a course.  Deleted
        students will not be returned.
      operationId: listStudents
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: deleted
        in: query
        description: Used to select the status of students that will be returned:nn|
          true | false |n|----------|----------|n|deleted   | active and pending   |nnIf
          this field is omitted then a default of false is assumed.n
        required: false
        type: boolean
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/{studentId}/reinvite:
    post:
      tags:
      - Student Accounts
      summary: Re-invite student
      description: Re-sends a pending invite to a student. Students with pending invites
        can be identified via the inviteComplete field when calling the List students
        method.
      operationId: reinviteStudent
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/reinvite:
    post:
      tags:
      - Student Accounts
      summary: Re-invite pending students
      description: Re-sends invites to all students with pending status. Students
        with pending invites can be identified via the inviteComplete field when calling
        the List students method.
      operationId: reinviteStudents
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/{studentId}:
    get:
      tags:
      - Student Accounts
      summary: Get student
      description: Returns information for an existing student.
      operationId: getStudent
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Student Accounts
      summary: Edit student
      description: Edits details of an existing student.
      operationId: editStudent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
      - in: body
        name: student user object
        description: student user details
        required: true
        schema:
          $ref: '#/definitions/editStudentUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Student Accounts
      summary: Delete student
      description: Deletes a student from an existing course.
      operationId: deleteStudent
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/delete:
    post:
      tags:
      - Student Accounts
      summary: Delete students
      description: Deletes multiple students from an existing course.
      operationId: deleteStudents
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - in: body
        name: student user array
        description: Multiple studentId fields passed as JSON objects
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/studentIdObject'
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/edit:
    post:
      tags:
      - Student Accounts
      summary: Edit students
      description: Edits details of multiple existing students.
      operationId: editStudents
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - in: body
        name: student user array
        description: student user details
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/studentUserInput'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/restore:
    post:
      tags:
      - Student Accounts
      summary: Restore students
      description: Restores multiple deleted student within an existing course.
      operationId: restoreStudents
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - in: body
        name: student user array
        description: Multiple studentId fields passed as JSON objects
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/studentIdObject'
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/staff:
    post:
      tags:
      - Staff Accounts
      summary: Invite staff
      description: Invites a staff member to an existing course.
      operationId: inviteStaff
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - in: body
        name: staff user object
        description: staff user details
        required: true
        schema:
          $ref: '#/definitions/staffUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Staff Accounts
      summary: List staff
      description: Returns an array of active and pending staff members in a course.  Deleted
        staff members will not be returned.
      operationId: listStaff
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/staff/{staffId}/reinvite:
    post:
      tags:
      - Staff Accounts
      summary: Re-invite staff
      description: Re-sends a pending invite to a staff member.
      operationId: reinviteStaff
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member. staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/staff/{staffId}:
    get:
      tags:
      - Staff Accounts
      summary: Get staff
      description: Returns information for an existing staff member.
      operationId: getStaff
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member. staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Staff Accounts
      summary: Edit staff
      description: Edits details of an existing staff member.
      operationId: editStaff
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member. staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/editStaffUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Staff Accounts
      summary: Delete staff
      description: Deletes a staff member from an existing course.
      operationId: deleteStaff
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member . staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published:
    get:
      tags:
      - Content
      summary: List published content
      description: Returns an array of published modules and lessons in an existing
        course.
      operationId: listPublishedContent
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/contentOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportanswers:
    post:
      tags:
      - Student Work
      summary: Export student lesson answers
      description: Begins the export of student answers for an existing published
        lesson. Makes a .csv file available for download. Progress of this export
        may be polled using Export student lesson answers - progress. nnIf this lesson
        is contained within a module you must instead call the Export student module
        answers method.n
      operationId: exportStudentLessonAnswers
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportanswers/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export student lesson answers - progress
      description: Returns progress on exporting student answers for a published lesson.
        When complete the file may be downloaded using Export student lesson answers
        - download file.nnIf this lesson is contained within a module you must instead
        call the Export student module answers - progress method.n
      operationId: exportStudentLessonAnswersProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student lesson answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportanswers/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export student lesson answers - download file
      description: Requests the download of an exported .csv file containing student
        answers for a published lesson. This file is produced by calling Export student
        lesson answers. nnIf this lesson is contained within a module you must instead
        call the Export student module answers - download file method..n
      operationId: exportStudentLessonAnswersDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student lesson answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportanswers:
    post:
      tags:
      - Student Work
      summary: Export student module answers
      description: 'Begins the export of student answers for an existing published
        lesson within a module. Makes a .csv file available for download. Progress
        of this export may be polled using Export student module answers - progress. '
      operationId: exportStudentModuleAnswers
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportanswers/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export student module answers - progress
      description: Returns progress on exporting student answers for a published lesson
        within a module. When complete the file may be downloaded using Export student
        module answers - download file.
      operationId: exportStudentModuleAnswersProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student module answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportanswers/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export student module answers - download file
      description: 'Requests the download of an exported .csv file containing student
        answers for a published lesson within a module. This file is produced by calling
        Export student module answers. '
      operationId: exportStudentModuleAnswersDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student module answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportgrades.{gradeFormat}:
    post:
      tags:
      - Student Work
      summary: Export lesson grading
      description: Begins the export of student grades for an existing published lesson.
        Makes a .csv or .json file available for download. Progress of this export
        may be polled using Export lesson grading - progress. nnIf this lesson is
        contained within a module you must instead call the Export module grading
        method.n
      operationId: exportLessonGrading
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| csv   | n| json   |n nnThe file format you select
          must remain consistent when requesting an export, checking the export progress
          and requesting the exported filen
        required: true
        type: string
        enum:
        - csv
        - json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportgrades.{gradeFormat}/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export lesson grading - progress
      description: Returns progress on exporting the student grades for a published
        lesson.nnIf this lesson is contained within a module you must instead call
        thenExport module grading - progress method.n
      operationId: exportLessonGradingProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| csv   | n| json   |n nThe file format you select
          must remain consistent when requesting an export, checking the export progress
          and requesting the exported filen
        required: true
        type: string
        enum:
        - csv
        - json
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export lesson grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportgrades.{gradeFormat}/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export lesson grading - download file
      description: Requests the download of an exported .csv file containing student
        grades for a published lesson. This file is produced by calling Export lesson
        grading. nnIf this lesson is contained within a module you must instead call
        the Export module grading - download file method.n
      operationId: exportLessonGradingDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| csv   | n| json   |n nThe file format you select
          must remain consistent when requesting an export, checking the export progress
          and requesting the exported filen
        required: true
        type: string
        enum:
        - csv
        - json
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export lesson grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportgrades.{gradeFormat}:
    post:
      tags:
      - Student Work
      summary: Export module grading
      description: Begins the export of student grades for an existing published lesson
        within a module. Makes a .csv or .json file available for download. Progress
        of this export may be polled using Export module grading - progress.
      operationId: exportModuleGrading
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| csv   | n| json   |n nThe file format you select
          must remain consistent when requesting an export, checking the export progress
          and requesting the exported filen
        required: true
        type: string
        enum:
        - csv
        - json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportgrades.{gradeFormat}/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export module grading - progress
      description: Returns progress on exporting student grades for a published lesson
        within a module. When complete the file may be downloaded using Export module
        grading - download file.
      operationId: exportModuleGradingProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| csv   | n| json   |n nThe file format you select
          must remain consistent when requesting an export, checking the export progress
          and requesting the exported filen
        required: true
        type: string
        enum:
        - csv
        - json
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export module grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportgrades.{gradeFormat}/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export module grading - download file
      description: Requests the download of an exported .csv file containing student
        grades for a published lesson within a module. This file is produced by calling
        Export module grading.
      operationId: exportModuleGradingDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| csv   | n| json   |n nThe file format you select
          must remain consistent when requesting an export, checking the export progress
          and requesting the exported filen
        required: true
        type: string
        enum:
        - csv
        - json
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export module grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/exportgrades.{gradeFormat}:
    post:
      tags:
      - Student Work
      summary: Export course grading
      description: Begins the export of student grades for all published content within
        a course. Makes a .json file available for download. Progress of this export
        may be polled using Export course grading - progress. n
      operationId: exportCourseGrading
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| json   |n
        required: true
        type: string
        enum:
        - json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/exportgrades.{gradeFormat}/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export course grading - progress
      description: Returns progress on exporting student grades for all published
        content within a course. When complete the file may be downloaded using Export
        course grading - download file.n
      operationId: exportCourseGradingProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| json   |n
        required: true
        type: string
        enum:
        - json
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export course grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/exportgrades.{gradeFormat}/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export course grading - download file
      description: Requests the download of an exported .json file containing student
        grades for all published content within a course. This file is produced by
        calling Export course grading.n
      operationId: exportCourseGradingDownloadFile
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
      - name: gradeFormat
        in: path
        description: Specifies format of the requested exportgrades file.  nn| Accepted
          values | n|----------|n| json   |n
        required: true
        type: string
        enum:
        - json
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export course grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /logs:
    get:
      tags:
      - Logging
      summary: Get logs
      description: Returns an array of server requests within a specified timeframe.
      operationId: getLogs
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: since
        in: query
        description: Time and date for the beginning of required log period.  Must
          be provided in epoch format.  If omitted then a default of 1 day ago is
          assumed.
        required: false
        type: integer
      - name: until
        in: query
        description: Time and date for the end of required log period. Must be provided
          in epoch format. If omitted then a default of the current time/date is assumed.
        required: false
        type: integer
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/logs'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":18:{s:13:\"settingsInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"displayName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"gradingMode\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:11:\"kuraGrading\";i:1;s:10:\"pdfGrading\";}}s:13:\"sidebarColour\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:9:{i:0;s:7:\"DEFAULT\";i:1;s:7:\"COLOUR1\";i:2;s:7:\"COLOUR2\";i:3;s:7:\"COLOUR3\";i:4;s:7:\"COLOUR4\";i:5;s:7:\"COLOUR5\";i:6;s:7:\"COLOUR6\";i:7;s:7:\"COLOUR7\";i:8;s:7:\"COLOUR8\";}}}}s:14:\"settingsOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:5:{i:0;s:11:\"displayName\";i:1;s:11:\"gradingMode\";i:2;s:13:\"sidebarColour\";i:3;s:10:\"instanceId\";i:4;s:10:\"lmsEnabled\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"displayName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"gradingMode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"sidebarColour\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"instanceId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"lmsEnabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:11:\"courseInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"courseCode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"lmsEnabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"lmsCourseName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"courseOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:5:{i:0;s:8:\"courseId\";i:1;s:4:\"name\";i:2;s:10:\"courseCode\";i:3;s:10:\"lmsEnabled\";i:4;s:13:\"lmsCourseName\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"courseId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"courseCode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"lmsEnabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"lmsCourseName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"adminUserInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:13:\"instanceAdmin\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"instanceAdmin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"adminUserOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:7:{i:0;s:7:\"adminId\";i:1;s:5:\"email\";i:2;s:9:\"givenName\";i:3;s:10:\"familyName\";i:4;s:14:\"inviteComplete\";i:5;s:11:\"createdDate\";i:6;s:13:\"instanceAdmin\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"adminId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"inviteComplete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"createdDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:13:\"instanceAdmin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:18:\"editAdminUserInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"studentUserInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"email\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"externalStudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"section\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:17:\"studentUserOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:8:{i:0;s:9:\"studentId\";i:1;s:5:\"email\";i:2;s:9:\"givenName\";i:3;s:10:\"familyName\";i:4;s:14:\"inviteComplete\";i:5;s:11:\"createdDate\";i:6;s:17:\"externalStudentId\";i:7;s:7:\"section\";}s:10:\"properties\";O:8:\"stdClass\":8:{s:9:\"studentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"inviteComplete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"createdDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:17:\"externalStudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"section\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"editStudentUserInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"externalStudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"section\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"studentIdObject\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:9:\"studentId\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"studentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:14:\"staffUserInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:4:\"role\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"role\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:6:\"author\";i:1;s:6:\"grader\";}}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"staffUserOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:7:{i:0;s:7:\"staffId\";i:1;s:5:\"email\";i:2;s:9:\"givenName\";i:3;s:10:\"familyName\";i:4;s:14:\"inviteComplete\";i:5;s:11:\"createdDate\";i:6;s:4:\"role\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"staffId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"inviteComplete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"createdDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"role\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:18:\"editStaffUserInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"role\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:6:\"author\";i:1;s:6:\"grader\";}}}}s:13:\"contentOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:10:{i:0;s:9:\"contentId\";i:1;s:13:\"publishedDate\";i:2;s:11:\"contentType\";i:3;s:15:\"updateAvailable\";i:4;s:13:\"orderInCourse\";i:5;s:5:\"title\";i:6;s:11:\"description\";i:7;s:11:\"groupLesson\";i:8;s:11:\"committable\";i:9;s:8:\"keywords\";}s:10:\"properties\";O:8:\"stdClass\":10:{s:9:\"contentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:13:\"publishedDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"contentType\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"updateAvailable\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"orderInCourse\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"groupLesson\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"committable\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"keywords\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"taskToken\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:9:\"taskToken\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"taskToken\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"progress\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:6:\"status\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"logs\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:4:{i:0;s:9:\"timestamp\";i:1;s:7:\"request\";i:2;s:6:\"method\";i:3;s:9:\"useragent\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"timestamp\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"request\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"method\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"payload\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"useragent\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
