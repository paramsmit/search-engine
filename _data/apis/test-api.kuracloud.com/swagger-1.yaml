---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:11:\"description\";s:150:\"This version of
  the kuraCloud Admin API is now depricated. While it is still supported we strongly
  recommend using the most recent version of the API.\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:48:\"DEPRICATED
  - kuraCloud Admin API v1 (Test Cloud)\";s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:21:\"noreply@kuracloud.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: test-api.kuracloud.com
basePath: /v1
paths:
  /instance:
    get:
      tags:
      - Instance Settings
      summary: Get general settings
      description: Returns the details of your instance.
      operationId: getGeneralSettings
      consumes:
      - ""
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/settingsOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Instance Settings
      summary: Edit general settings
      description: Edits the general settings of your instance.
      operationId: ""
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: settings object
        description: Settings object to be applied to your instance
        required: true
        schema:
          $ref: '#/definitions/settingsInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/settingsOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course:
    post:
      tags:
      - Courses
      summary: Create course
      description: Creates a new course.
      operationId: createCourse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: course object
        description: course details
        required: true
        schema:
          $ref: '#/definitions/courseInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Courses
      summary: List Courses
      description: Returns an array of courses.  Deleted courses will not be returned.
      operationId: listCourses
      consumes:
      - ""
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}:
    get:
      tags:
      - Courses
      summary: Get course
      description: Returns information for an existing course.
      operationId: getCourse
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Courses
      summary: Edit course
      description: Edits details of an existing course.
      operationId: editCourse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - in: body
        name: settings object
        description: Settings object to be applied to your instance
        required: true
        schema:
          $ref: '#/definitions/courseInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/courseOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Courses
      summary: Delete course
      description: Deletes an existing course.
      operationId: deleteCourse
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /admin:
    post:
      tags:
      - Administrators
      summary: Invite admin
      description: Invites an admin user.
      operationId: inviteAdmin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/adminUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Administrators
      summary: List admins
      description: Returns an array of active course or instance admins.  Deleted
        admins will not be returned.
      operationId: listAdmins
      consumes:
      - ""
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /admin/{adminId}:
    get:
      tags:
      - Administrators
      summary: Get admin
      description: Returns information for an existing admin user.
      operationId: getAdmin
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: adminId
        in: path
        description: Instance-unique identifier of an existing admin user. adminId
          may be obtained by calling the List admins method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Administrators
      summary: Edit admin
      description: Edits details of an existing admin user.
      operationId: editAdmin
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: adminId
        in: path
        description: Instance-unique identifier of an existing admin user. adminId
          may be obtained by calling the List admins method.
        required: true
        type: integer
        format: int32
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/editAdminUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/adminUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Administrators
      summary: Delete admin
      description: Revokes privileges of a course or instance admin.
      operationId: deleteAdmin
      produces:
      - form-data
      parameters:
      - name: adminId
        in: path
        description: Instance-unique identifier of an existing admin user. adminId
          may be obtained by calling the List admins method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student:
    post:
      tags:
      - Student Accounts
      summary: Invite student
      description: Invites a student to an existing course.
      operationId: inviteStudent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - in: body
        name: student user object
        description: student user details
        required: true
        schema:
          $ref: '#/definitions/studentUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Student Accounts
      summary: List students
      description: Returns an array of active and pending students in a course.  Deleted
        students will not be returned.
      operationId: listStudents
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/{studentId}/reinvite:
    post:
      tags:
      - Student Accounts
      summary: Re-invite student
      description: Re-sends a pending invite to a student. Students with pending invites
        can be identified via the inviteComplete field when calling the List students
        method.
      operationId: reinviteStudent
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/reinvite:
    post:
      tags:
      - Student Accounts
      summary: Re-invite pending students
      description: Re-sends invites to all students with pending status. Students
        with pending invites can be identified via the inviteComplete field when calling
        the List students method.
      operationId: reinviteStudents
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/student/{studentId}:
    get:
      tags:
      - Student Accounts
      summary: Get student
      description: Returns information for an existing student.
      operationId: getStudent
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Student Accounts
      summary: Edit student
      description: Edits details of an existing student.
      operationId: editStudent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
        format: int32
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/editStudentUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/studentUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Student Accounts
      summary: Delete student
      description: Deletes a student from an existing course.
      operationId: deleteStudent
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: studentId
        in: path
        description: Course-specific identifier of an existing student. studentId
          may be obtained by calling the List students method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/staff:
    post:
      tags:
      - Staff Accounts
      summary: Invite staff
      description: Invites a staff member to an existing course.
      operationId: inviteStaff
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - in: body
        name: staff user object
        description: staff user details
        required: true
        schema:
          $ref: '#/definitions/staffUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    get:
      tags:
      - Staff Accounts
      summary: List staff
      description: Returns an array of active and pending staff members in a course.  Deleted
        staff members will not be returned.
      operationId: listStaff
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/staff/{staffId}/reinvite:
    post:
      tags:
      - Staff Accounts
      summary: Re-invite staff
      description: Re-sends a pending invite to a staff member.
      operationId: reinviteStaff
      consumes:
      - ""
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member. staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/staff/{staffId}:
    get:
      tags:
      - Staff Accounts
      summary: Get staff
      description: Returns information for an existing staff member.
      operationId: getStaff
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member. staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    put:
      tags:
      - Staff Accounts
      summary: Edit staff
      description: Edits details of an existing staff member.
      operationId: editStaff
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member. staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
        format: int32
      - in: body
        name: admin user object
        description: admin user details
        required: true
        schema:
          $ref: '#/definitions/editStaffUserInput'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/staffUserOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
    delete:
      tags:
      - Staff Accounts
      summary: Delete staff
      description: Deletes a staff member from an existing course.
      operationId: deleteStaff
      produces:
      - form-data
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: staffId
        in: path
        description: Course-specific identifier of an existing staff member . staffId
          may be obtained by calling the List Staff method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published:
    get:
      tags:
      - Student Work
      summary: List published content
      description: Returns an array of published modules and lessons in an existing
        course.
      operationId: listPublishedContent
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/contentOutput'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportanswers:
    post:
      tags:
      - Student Work
      summary: Export student lesson answers
      description: Exports the student answers for an existing published lesson. Makes
        a .csv file available for download. If this lesson is contained within a module
        you must instead call the Export student module answers method.
      operationId: exportStudentLessonAnswers
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportanswers/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export student lesson answers - progress
      description: Returns progress on exporting the student answers for a published
        lesson. If this lesson is contained within a module you must instead call
        the Export student module answers - progress method.
      operationId: exportStudentLessonAnswersProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student lesson answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportanswers/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export student lesson answers - download file
      description: Requests the contents of an exported .csv file containing student
        answers for a published lesson. If this lesson is contained within a module
        you must instead call the Export student module answers - download file method.
      operationId: exportStudentLessonAnswersDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student lesson answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportanswers:
    post:
      tags:
      - Student Work
      summary: Export student module answers
      description: Exports the student answers for an existing published lesson within
        a module. Makes a .csv file available for download.
      operationId: exportStudentModuleAnswers
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportanswers/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export student module answers - progress
      description: Returns progress on exporting the student answers for a published
        lesson within a module.
      operationId: exportStudentModuleAnswersProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student module answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportanswers/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export student module answers - download file
      description: Requests the download of an exported .csv file containing student
        answers for a published lesson within a module.
      operationId: exportStudentModuleAnswersDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export student module answers method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportgrades:
    post:
      tags:
      - Student Work
      summary: Export lesson grading
      description: Exports the student grades for an existing published lesson. Makes
        a .csv file available for download. If this lesson is contained within a module
        you must instead call the Export module grading method.
      operationId: exportLessonGrading
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportgrades/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export lesson grading - progress
      description: Returns progress on exporting the student grades for a published
        lesson. If this lesson is contained within a module you must instead call
        the Export module grading - progress method.
      operationId: exportLessonGradingProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export lesson grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/exportgrades/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export lesson grading - download file
      description: Requests the download of an exported .csv file containing student
        grades for a published lesson. If this lesson is contained within a module
        you must instead call the Export module grading - download file method.
      operationId: exportLessonGradingDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export lesson grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportgrades:
    post:
      tags:
      - Student Work
      summary: Export module grading
      description: Exports the student grades for an existing published lesson within
        a module. Makes a .csv file available for download.
      operationId: exportModuleGrading
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a module will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/taskToken'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportgrades/{taskToken}:
    get:
      tags:
      - Student Work
      summary: Export module grading - progress
      description: Returns progress on exporting the student grades for a published
        lesson within a module.
      operationId: exportModuleGradingProgress
      consumes:
      - ""
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export module grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/progress'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /course/{courseId}/published/{contentId}/{moduleLessonId}/exportgrades/{taskToken}/download:
    get:
      tags:
      - Student Work
      summary: Export module grading - download file
      description: Requests the download of an exported .csv file containing student
        grades for a published lesson within a module.
      operationId: exportModuleGradingDownloadFile
      consumes:
      - ""
      produces:
      - text/csv; charset=utf-8
      parameters:
      - name: courseId
        in: path
        description: Instance-unique identifier of an existing course. courseId may
          be obtained by calling the List courses method.
        required: true
        type: integer
        format: int32
      - name: contentId
        in: path
        description: Course-specific identifier of an existing lesson or module.  In
          this context a lesson will be referenced. contentId may be obtained by calling
          the List published content method.
        required: true
        type: integer
        format: int32
      - name: moduleLessonId
        in: path
        description: Course-specific identifier of a lesson within a module. contentId
          may be obtained by calling the List published content method and referencing
          lessonId.
        required: true
        type: integer
        format: int32
      - name: taskToken
        in: path
        description: Unique identifier assigned to a task. taskToken may be obtained
          by calling the Export module grading method.
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
  /logs:
    get:
      tags:
      - Logging
      summary: Get logs
      description: Returns an array of server requests within a specified timeframe.
      operationId: getLogs
      consumes:
      - ""
      produces:
      - application/json
      parameters:
      - name: since
        in: query
        description: Time and date for the beginning of required log period.  Must
          be provided in epoch format.  If omitted then a default of 1 day ago is
          assumed.
        required: false
        type: integer
        format: int32
      - name: until
        in: query
        description: Time and date for the end of required log period. Must be provided
          in epoch format. If omitted then a default of the current time/date is assumed.
        required: false
        type: integer
        format: int32
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/logs'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Server Error
        503:
          description: Unavailable
      security:
      - X-Kura-Token: []
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":17:{s:13:\"settingsInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"displayName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"gradingMode\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:11:\"kuraGrading\";i:1;s:10:\"pdfGrading\";}}s:13:\"sidebarColour\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:9:{i:0;s:7:\"DEFAULT\";i:1;s:7:\"COLOUR1\";i:2;s:7:\"COLOUR2\";i:3;s:7:\"COLOUR3\";i:4;s:7:\"COLOUR4\";i:5;s:7:\"COLOUR5\";i:6;s:7:\"COLOUR6\";i:7;s:7:\"COLOUR7\";i:8;s:7:\"COLOUR8\";}}}}s:14:\"settingsOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:11:\"displayName\";i:1;s:11:\"gradingMode\";i:2;s:13:\"sidebarColour\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"displayName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"gradingMode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"sidebarColour\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"courseInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:4:\"name\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"courseCode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"courseOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:8:\"courseId\";i:1;s:4:\"name\";i:2;s:10:\"courseCode\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"courseId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"courseCode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"adminUserInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:13:\"instanceAdmin\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"instanceAdmin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"adminUserOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:7:{i:0;s:7:\"adminId\";i:1;s:5:\"email\";i:2;s:9:\"givenName\";i:3;s:10:\"familyName\";i:4;s:14:\"inviteComplete\";i:5;s:11:\"createdDate\";i:6;s:13:\"instanceAdmin\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"adminId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"inviteComplete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"createdDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:13:\"instanceAdmin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:18:\"editAdminUserInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"studentUserInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"email\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"externalStudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"section\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:17:\"studentUserOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:8:{i:0;s:9:\"studentId\";i:1;s:5:\"email\";i:2;s:9:\"givenName\";i:3;s:10:\"familyName\";i:4;s:14:\"inviteComplete\";i:5;s:11:\"createdDate\";i:6;s:17:\"externalStudentId\";i:7;s:7:\"section\";}s:10:\"properties\";O:8:\"stdClass\":8:{s:9:\"studentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"inviteComplete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"createdDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:17:\"externalStudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"section\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"editStudentUserInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"externalStudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"section\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"staffUserInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:4:\"role\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"role\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:6:\"author\";i:1;s:6:\"grader\";}}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"staffUserOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:7:{i:0;s:7:\"staffId\";i:1;s:5:\"email\";i:2;s:9:\"givenName\";i:3;s:10:\"familyName\";i:4;s:14:\"inviteComplete\";i:5;s:11:\"createdDate\";i:6;s:4:\"role\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"staffId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"inviteComplete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"createdDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"role\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:18:\"editStaffUserInput\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"givenName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"familyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"role\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:6:\"author\";i:1;s:6:\"grader\";}}}}s:13:\"contentOutput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:10:{i:0;s:9:\"contentId\";i:1;s:13:\"publishedDate\";i:2;s:11:\"contentType\";i:3;s:15:\"updateAvailable\";i:4;s:13:\"orderInCourse\";i:5;s:5:\"title\";i:6;s:11:\"description\";i:7;s:11:\"groupLesson\";i:8;s:11:\"committable\";i:9;s:8:\"keywords\";}s:10:\"properties\";O:8:\"stdClass\":10:{s:9:\"contentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:13:\"publishedDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"contentType\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"updateAvailable\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"orderInCourse\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"groupLesson\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"committable\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"keywords\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"taskToken\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:9:\"taskToken\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"taskToken\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"progress\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:6:\"status\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"logs\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:4:{i:0;s:9:\"timestamp\";i:1;s:7:\"request\";i:2;s:6:\"method\";i:3;s:9:\"useragent\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"timestamp\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"request\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"method\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"payload\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"useragent\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
