---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":15:{s:7:\"contact\";O:8:\"stdClass\":4:{s:5:\"email\";s:23:\"mike.ralphson@gmail.com\";s:4:\"name\";s:13:\"Mike
  Ralphson\";s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:9:\"x-twitter\";s:12:\"PermittedSoc\";}s:11:\"description\";s:45:\"This
  is the Amazon Rekognition API reference.\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:18:\"Apache
  2.0 License\";s:3:\"url\";s:31:\"http://www.apache.org/licenses/\";}s:14:\"termsOfService\";s:37:\"https://aws.amazon.com/service-terms/\";s:5:\"title\";s:18:\"Amazon
  Rekognition\";s:7:\"version\";s:10:\"2016-06-27\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:79:\"https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\";}s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"cloud\";}s:6:\"x-logo\";O:8:\"stdClass\":2:{s:15:\"backgroundColor\";s:7:\"#FFFFFF\";s:3:\"url\";s:81:\"https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:11:\"contentType\";s:16:\"application/json\";s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:7:\"version\";s:5:\"1.0.0\";}s:3:\"url\";s:95:\"https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/rekognition-2016-06-27.normal.json\";s:17:\"x-apisguru-direct\";b:1;}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:13:\"amazonaws.com\";s:9:\"x-release\";s:2:\"v4\";s:13:\"x-serviceName\";s:11:\"rekognition\";s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:21:\"amazonaws_rekognition\";s:4:\"type\";s:7:\"openapi\";}}"
host: rekognition.amazonaws.com
basePath: /
paths:
  /:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Compares a face in the <i>source</i> input image with each of
        the 100 largest faces detected in the <i>target</i> input image. </p> <note>
        <p> If the source image contains multiple faces, the service detects the largest
        face and compares it with each face detected in the target image. </p> </note>
        <p>You pass the input and target images either as base64-encoded image bytes
        or as a references to images in an Amazon S3 bucket. If you use the Amazon
        CLI to call Amazon Rekognition operations, passing image bytes is not supported.
        The image must be either a PNG or JPEG formatted file. </p> <p>In response,
        the operation returns an array of face matches ordered by similarity score
        in descending order. For each face match, the response provides a bounding
        box of the face, facial landmarks, pose details (pitch, role, and yaw), quality
        (brightness and sharpness), and confidence value (indicating the level of
        confidence that the bounding box contains a face). The response also provides
        a similarity score, which indicates how closely the faces match. </p> <note>
        <p>By default, only faces with a similarity score of greater than or equal
        to 80% are returned in the response. You can change this value by specifying
        the <code>SimilarityThreshold</code> parameter.</p> </note> <p> <code>CompareFaces</code>
        also returns an array of faces that don't match the source image. For each
        face, it returns a bounding box, confidence value, landmarks, pose details,
        and quality. The response also returns information about the face in the source
        image, including the bounding box of the face and confidence value.</p> <p>If
        the image doesn't contain Exif metadata, <code>CompareFaces</code> returns
        orientation information for the source and target images. Use these values
        to display the images with the correct image orientation.</p> <p>If no faces
        are detected in the source or target images, <code>CompareFaces</code> returns
        an <code>InvalidParameterException</code> error. </p> <note> <p> This is a
        stateless API operation. That is, data returned by this operation doesn't
        persist.</p> </note> <p>For an example, see <a>faces-compare-images</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>
        action.</p>
      operationId: CompareFaces
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CompareFacesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CompareFacesResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#CreateCollection:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Creates a collection in an AWS Region. You can add faces to
        the collection using the operation. </p> <p>For example, you might create
        collections, one for each of your application users. A user can then index
        faces using the <code>IndexFaces</code> operation and persist results in a
        specific collection. Then, a user can search the collection for faces in the
        user-specific container. </p> <note> <p>Collection names are case-sensitive.</p>
        </note> <p>This operation requires permissions to perform the <code>rekognition:CreateCollection</code>
        action.</p>
      operationId: CreateCollection
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateCollectionRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CreateCollectionResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceAlreadyExistsException
          schema:
            $ref: '#/definitions/ResourceAlreadyExistsException'
  /#CreateStreamProcessor:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Creates an Amazon Rekognition stream processor that you can
        use to detect and recognize faces in a streaming video.</p> <p>Rekognition
        Video is a consumer of live video from Amazon Kinesis Video Streams. Rekognition
        Video sends analysis results to Amazon Kinesis Data Streams.</p> <p>You provide
        as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream
        (<code>Output</code>) stream. You also specify the face recognition criteria
        in <code>Settings</code>. For example, the collection containing faces that
        you want to recognize. Use <code>Name</code> to assign an identifier for the
        stream processor. You use <code>Name</code> to manage the stream processor.
        For example, you can start processing the source video by calling with the
        <code>Name</code> field. </p> <p>After you have finished analyzing a streaming
        video, use to stop processing. You can delete the stream processor by calling
        .</p>
      operationId: CreateStreamProcessor
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateStreamProcessorRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CreateStreamProcessorResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        484:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        485:
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
  /#DeleteCollection:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Deletes the specified collection. Note that this operation removes
        all faces in the collection. For an example, see <a>delete-collection-procedure</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:DeleteCollection</code>
        action.</p>
      operationId: DeleteCollection
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeleteCollectionRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DeleteCollectionResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#DeleteFaces:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Deletes faces from a collection. You specify a collection ID
        and an array of face IDs to remove from the collection.</p> <p>This operation
        requires permissions to perform the <code>rekognition:DeleteFaces</code> action.</p>
      operationId: DeleteFaces
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeleteFacesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DeleteFacesResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#DeleteStreamProcessor:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Deletes the stream processor identified by <code>Name</code>. You
        assign the value for <code>Name</code> when you create the stream processor
        with . You might not be able to use the same name for a stream processor for
        a few seconds after calling <code>DeleteStreamProcessor</code>.
      operationId: DeleteStreamProcessor
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeleteStreamProcessorRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DeleteStreamProcessorResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        484:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        485:
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
  /#DescribeStreamProcessor:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Provides information about a stream processor created by . You
        can get information about the input and output streams, the input parameters
        for the face recognition being performed, and the current status of the stream
        processor.
      operationId: DescribeStreamProcessor
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DescribeStreamProcessorRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DescribeStreamProcessorResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        484:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        485:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
  /#DetectFaces:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Detects faces within an image that is provided as input.</p>
        <p> <code>DetectFaces</code> detects the 100 largest faces in the image. For
        each face detected, the operation returns face details including a bounding
        box of the face, a confidence value (that the bounding box contains a face),
        and a fixed set of attributes such as facial landmarks (for example, coordinates
        of eye and mouth), gender, presence of beard, sunglasses, etc. </p> <p>The
        face-detection algorithm is most effective on frontal faces. For non-frontal
        or obscured faces, the algorithm may not detect the faces or might detect
        faces with lower confidence. </p> <p>You pass the input image either as base64-encoded
        image bytes or as a reference to an image in an Amazon S3 bucket. If you use
        the Amazon CLI to call Amazon Rekognition operations, passing image bytes
        is not supported. The image must be either a PNG or JPEG formatted file. </p>
        <note> <p>This is a stateless API operation. That is, the operation does not
        persist any data.</p> </note> <p>For an example, see <a>procedure-detecting-faces-in-images</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:DetectFaces</code>
        action. </p>
      operationId: DetectFaces
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DetectFacesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DetectFacesResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#DetectLabels:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Detects instances of real-world entities within an image (JPEG
        or PNG) provided as input. This includes objects like flower, tree, and table;
        events like wedding, graduation, and birthday party; and concepts like landscape,
        evening, and nature. For an example, see <a>images-s3</a>.</p> <note> <p>
        <code>DetectLabels</code> does not support the detection of activities. However,
        activity detection is supported for label detection in videos. For more information,
        see .</p> </note> <p>You pass the input image as base64-encoded image bytes
        or as a reference to an image in an Amazon S3 bucket. If you use the Amazon
        CLI to call Amazon Rekognition operations, passing image bytes is not supported.
        The image must be either a PNG or JPEG formatted file. </p> <p> For each object,
        scene, and concept the API returns one or more labels. Each label provides
        the object name, and the level of confidence that the image contains the object.
        For example, suppose the input image has a lighthouse, the sea, and a rock.
        The response will include all three labels, one for each object. </p> <p>
        <code>{Name: lighthouse, Confidence: 98.4629}</code> </p> <p> <code>{Name:
        rock,Confidence: 79.2097}</code> </p> <p> <code> {Name: sea,Confidence: 75.061}</code>
        </p> <p> In the preceding example, the operation returns one label for each
        of the three objects. The operation can also return multiple labels for the
        same object in the image. For example, if the input image shows a flower (for
        example, a tulip), the operation might return the following three labels.
        </p> <p> <code>{Name: flower,Confidence: 99.0562}</code> </p> <p> <code>{Name:
        plant,Confidence: 99.0562}</code> </p> <p> <code>{Name: tulip,Confidence:
        99.0562}</code> </p> <p>In this example, the detection algorithm more precisely
        identifies the flower as a tulip.</p> <p>In response, the API returns an array
        of labels. In addition, the response also includes the orientation correction.
        Optionally, you can specify <code>MinConfidence</code> to control the confidence
        threshold for the labels returned. The default is 50%. You can also add the
        <code>MaxLabels</code> parameter to limit the number of labels returned. </p>
        <note> <p>If the object detected is a person, the operation doesn''t provide
        the same facial details that the <a>DetectFaces</a> operation provides.</p>
        </note> <p>This is a stateless API operation. That is, the operation does
        not persist any data.</p> <p>This operation requires permissions to perform
        the <code>rekognition:DetectLabels</code> action. </p>'
      operationId: DetectLabels
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DetectLabelsRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DetectLabelsResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#DetectModerationLabels:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Detects explicit or suggestive adult content in a specified
        JPEG or PNG format image. Use <code>DetectModerationLabels</code> to moderate
        images depending on your requirements. For example, you might want to filter
        images that contain nudity, but not images containing suggestive content.</p>
        <p>To filter images, use the labels returned by <code>DetectModerationLabels</code>
        to determine which types of content are appropriate. For information about
        moderation labels, see <a>moderation</a>.</p> <p>You pass the input image
        either as base64-encoded image bytes or as a reference to an image in an Amazon
        S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations,
        passing image bytes is not supported. The image must be either a PNG or JPEG
        formatted file. </p>
      operationId: DetectModerationLabels
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DetectModerationLabelsRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DetectModerationLabelsResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#DetectText:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Detects text in the input image and converts it into machine-readable
        text.</p> <p>Pass the input image as base64-encoded image bytes or as a reference
        to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon
        Rekognition operations, you must pass it as a reference to an image in an
        Amazon S3 bucket. For the AWS CLI, passing image bytes is not supported. The
        image must be either a .png or .jpeg formatted file. </p> <p>The <code>DetectText</code>
        operation returns text in an array of elements, <code>TextDetections</code>.
        Each <code>TextDetection</code> element provides information about a single
        word or line of text that was detected in the image. </p> <p>A word is one
        or more ISO basic latin script characters that are not separated by spaces.
        <code>DetectText</code> can detect up to 50 words in an image.</p> <p>A line
        is a string of equally spaced words. A line isn't necessarily a complete sentence.
        For example, a driver's license number is detected as a line. A line ends
        when there is no aligned text after it. Also, a line ends when there is a
        large gap between words, relative to the length of the words. This means,
        depending on the gap between words, Amazon Rekognition may detect multiple
        lines in text aligned in the same direction. Periods don't represent the end
        of a line. If a sentence spans multiple lines, the <code>DetectText</code>
        operation returns multiple lines.</p> <p>To determine whether a <code>TextDetection</code>
        element is a line of text or a word, use the <code>TextDetection</code> object
        <code>Type</code> field. </p> <p>To be detected, text must be within +/- 30
        degrees orientation of the horizontal axis.</p> <p>For more information, see
        <a>text-detection</a>.</p>
      operationId: DetectText
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DetectTextRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DetectTextResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#GetCelebrityInfo:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets the name and additional information about a celebrity based
        on his or her Rekognition ID. The additional information is returned as an
        array of URLs. If there is no additional information about the celebrity,
        this list is empty. For more information, see <a>get-celebrity-info-procedure</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:GetCelebrityInfo</code>
        action. </p>
      operationId: GetCelebrityInfo
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetCelebrityInfoRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetCelebrityInfoResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#GetCelebrityRecognition:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets the celebrity recognition results for a Rekognition Video
        analysis started by .</p> <p>Celebrity recognition in a video is an asynchronous
        operation. Analysis is started by a call to which returns a job identifier
        (<code>JobId</code>). When the celebrity recognition operation finishes, Rekognition
        Video publishes a completion status to the Amazon Simple Notification Service
        topic registered in the initial call to <code>StartCelebrityRecognition</code>.
        To get the results of the celebrity recognition analysis, first check that
        the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.
        If so, call <code>GetCelebrityDetection</code> and pass the job identifier
        (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>.
        For more information, see <a>video</a>.</p> <p> <code>GetCelebrityRecognition</code>
        returns detected celebrities and the time(s) they are detected in an array
        (<code>Celebrities</code>) of objects. Each <code>CelebrityRecognition</code>
        contains information about the celebrity in a object and the time, <code>Timestamp</code>,
        the celebrity was detected. </p> <note> <p> <code>GetCelebrityRecognition</code>
        only returns the default facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,
        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The
        other facial attributes listed in the <code>Face</code> object of the following
        response syntax are not returned. For more information, see . </p> </note>
        <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds
        from the start of the video). You can also sort the array by celebrity by
        specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>
        <p>The <code>CelebrityDetail</code> object includes the celebrity identifer
        and additional information urls. If you don't store the additional information
        urls, you can get them later by calling with the celebrity identifer.</p>
        <p>No information is returned for faces not recognized as celebrities.</p>
        <p>Use MaxResults parameter to limit the number of labels returned. If there
        are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
        in the operation response contains a pagination token for getting the next
        set of results. To get the next page of results, call <code>GetCelebrityDetection</code>
        and populate the <code>NextToken</code> request parameter with the token value
        returned from the previous call to <code>GetCelebrityRecognition</code>.</p>
      operationId: GetCelebrityRecognition
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetCelebrityRecognitionRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetCelebrityRecognitionResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#GetContentModeration:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets the content moderation analysis results for a Rekognition
        Video analysis started by .</p> <p>Content moderation analysis of a video
        is an asynchronous operation. You start analysis by calling . which returns
        a job identifier (<code>JobId</code>). When analysis finishes, Rekognition
        Video publishes a completion status to the Amazon Simple Notification Service
        topic registered in the initial call to <code>StartContentModeration</code>.
        To get the results of the content moderation analysis, first check that the
        status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.
        If so, call <code>GetCelebrityDetection</code> and pass the job identifier
        (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>.
        For more information, see <a>video</a>. </p> <p> <code>GetContentModeration</code>
        returns detected content moderation labels, and the time they are detected,
        in an array, <code>ModerationLabels</code>, of objects. </p> <p>By default,
        the moderated labels are returned sorted by time, in milliseconds from the
        start of the video. You can also sort them by moderated label by specifying
        <code>NAME</code> for the <code>SortBy</code> input parameter. </p> <p>Since
        video analysis can return a large number of results, use the <code>MaxResults</code>
        parameter to limit the number of labels returned in a single call to <code>GetContentModeration</code>.
        If there are more results than specified in <code>MaxResults</code>, the value
        of <code>NextToken</code> in the operation response contains a pagination
        token for getting the next set of results. To get the next page of results,
        call <code>GetContentModeration</code> and populate the <code>NextToken</code>
        request parameter with the value of <code>NextToken</code> returned from the
        previous call to <code>GetContentModeration</code>.</p> <p>For more information,
        see <a>moderation</a>.</p>
      operationId: GetContentModeration
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetContentModerationRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetContentModerationResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#GetFaceDetection:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets face detection results for a Rekognition Video analysis
        started by .</p> <p>Face detection with Rekognition Video is an asynchronous
        operation. You start face detection by calling which returns a job identifier
        (<code>JobId</code>). When the face detection operation finishes, Rekognition
        Video publishes a completion status to the Amazon Simple Notification Service
        topic registered in the initial call to <code>StartFaceDetection</code>. To
        get the results of the face detection operation, first check that the status
        value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so,
        call and pass the job identifier (<code>JobId</code>) from the initial call
        to <code>StartFaceDetection</code>.</p> <p> <code>GetFaceDetection</code>
        returns an array of detected faces (<code>Faces</code>) sorted by the time
        the faces were detected. </p> <p>Use MaxResults parameter to limit the number
        of labels returned. If there are more results than specified in <code>MaxResults</code>,
        the value of <code>NextToken</code> in the operation response contains a pagination
        token for getting the next set of results. To get the next page of results,
        call <code>GetFaceDetection</code> and populate the <code>NextToken</code>
        request parameter with the token value returned from the previous call to
        <code>GetFaceDetection</code>.</p>
      operationId: GetFaceDetection
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetFaceDetectionRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetFaceDetectionResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#GetFaceSearch:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets the face search results for Rekognition Video face search
        started by . The search returns faces in a collection that match the faces
        of persons detected in a video. It also includes the time(s) that faces are
        matched in the video.</p> <p>Face search in a video is an asynchronous operation.
        You start face search by calling to which returns a job identifier (<code>JobId</code>).
        When the search operation finishes, Rekognition Video publishes a completion
        status to the Amazon Simple Notification Service topic registered in the initial
        call to <code>StartFaceSearch</code>. To get the search results, first check
        that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.
        If so, call <code>GetFaceSearch</code> and pass the job identifier (<code>JobId</code>)
        from the initial call to <code>StartFaceSearch</code>. For more information,
        see <a>collections</a>.</p> <p>The search results are retured in an array,
        <code>Persons</code>, of objects. Each<code>PersonMatch</code> element contains
        details about the matching faces in the input collection, person information
        (facial attributes, bounding boxes, and person identifer) for the matched
        person, and the time the person was matched in the video.</p> <note> <p> <code>GetFaceSearch</code>
        only returns the default facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,
        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The
        other facial attributes listed in the <code>Face</code> object of the following
        response syntax are not returned. For more information, see . </p> </note>
        <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds
        from the start of the video, persons are matched. You can also sort by persons
        by specifying <code>INDEX</code> for the <code>SORTBY</code> input parameter.</p>
      operationId: GetFaceSearch
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetFaceSearchRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetFaceSearchResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#GetLabelDetection:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets the label detection results of a Rekognition Video analysis
        started by . </p> <p>The label detection operation is started by a call to
        which returns a job identifier (<code>JobId</code>). When the label detection
        operation finishes, Amazon Rekognition publishes a completion status to the
        Amazon Simple Notification Service topic registered in the initial call to
        <code>StartlabelDetection</code>. To get the results of the label detection
        operation, first check that the status value published to the Amazon SNS topic
        is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>)
        from the initial call to <code>StartLabelDetection</code>.</p> <p> <code>GetLabelDetection</code>
        returns an array of detected labels (<code>Labels</code>) sorted by the time
        the labels were detected. You can also sort by the label name by specifying
        <code>NAME</code> for the <code>SortBy</code> input parameter.</p> <p>The
        labels returned include the label name, the percentage confidence in the accuracy
        of the detected label, and the time the label was detected in the video.</p>
        <p>Use MaxResults parameter to limit the number of labels returned. If there
        are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code>
        in the operation response contains a pagination token for getting the next
        set of results. To get the next page of results, call <code>GetlabelDetection</code>
        and populate the <code>NextToken</code> request parameter with the token value
        returned from the previous call to <code>GetLabelDetection</code>.</p>
      operationId: GetLabelDetection
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetLabelDetectionRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetLabelDetectionResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#GetPersonTracking:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Gets the person tracking results of a Rekognition Video analysis
        started by .</p> <p>The person detection operation is started by a call to
        <code>StartPersonTracking</code> which returns a job identifier (<code>JobId</code>).
        When the person detection operation finishes, Rekognition Video publishes
        a completion status to the Amazon Simple Notification Service topic registered
        in the initial call to <code>StartPersonTracking</code>.</p> <p>To get the
        results of the person tracking operation, first check that the status value
        published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and
        pass the job identifier (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>
        <p> <code>GetPersonTracking</code> returns an array, <code>Persons</code>,
        of tracked persons and the time(s) they were tracked in the video. </p> <note>
        <p> <code>GetPersonTracking</code> only returns the default facial attributes
        (<code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>,
        <code>Pose</code>, and <code>Quality</code>). The other facial attributes
        listed in the <code>Face</code> object of the following response syntax are
        not returned. For more information, see . </p> </note> <p>By default, the
        array is sorted by the time(s) a person is tracked in the video. You can sort
        by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code>
        input parameter.</p> <p>Use the <code>MaxResults</code> parameter to limit
        the number of items returned. If there are more results than specified in
        <code>MaxResults</code>, the value of <code>NextToken</code> in the operation
        response contains a pagination token for getting the next set of results.
        To get the next page of results, call <code>GetPersonTracking</code> and populate
        the <code>NextToken</code> request parameter with the token value returned
        from the previous call to <code>GetPersonTracking</code>.</p>
      operationId: GetPersonTracking
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GetPersonTrackingRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GetPersonTrackingResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#IndexFaces:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Detects faces in the input image and adds them to the specified
        collection. </p> <p>Amazon Rekognition does not save the actual faces detected.
        Instead, the underlying detection algorithm first detects the faces in the
        input image, and for each face extracts facial features into a feature vector,
        and stores it in the back-end database. Amazon Rekognition uses feature vectors
        when performing face match and search operations using the and operations.</p>
        <p>If you are using version 1.0 of the face detection model, <code>IndexFaces</code>
        indexes the 15 largest faces in the input image. Later versions of the face
        detection model index the 100 largest faces in the input image. To determine
        which version of the model you are using, check the the value of <code>FaceModelVersion</code>
        in the response from <code>IndexFaces</code>. For more information, see <a>face-detection-model</a>.</p>
        <p>If you provide the optional <code>ExternalImageID</code> for the input
        image you provided, Amazon Rekognition associates this ID with all faces that
        it detects. When you call the operation, the response returns the external
        ID. You can use this external image ID to create a client-side index to associate
        the faces with each image. You can then use the index to find all faces in
        an image. </p> <p>In response, the operation returns an array of metadata
        for all detected faces. This includes, the bounding box of the detected face,
        confidence value (indicating the bounding box contains a face), a face ID
        assigned by the service for each face that is detected and stored, and an
        image ID assigned by the service for the input image. If you request all facial
        attributes (using the <code>detectionAttributes</code> parameter, Amazon Rekognition
        returns detailed facial attributes such as facial landmarks (for example,
        location of eye and mount) and other facial attributes such gender. If you
        provide the same image, specify the same collection, and use the same external
        ID in the <code>IndexFaces</code> operation, Amazon Rekognition doesn't save
        duplicate face metadata. </p> <p>The input image is passed either as base64-encoded
        image bytes or as a reference to an image in an Amazon S3 bucket. If you use
        the Amazon CLI to call Amazon Rekognition operations, passing image bytes
        is not supported. The image must be either a PNG or JPEG formatted file. </p>
        <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code>
        action.</p>
      operationId: IndexFaces
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/IndexFacesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/IndexFacesResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        488:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#ListCollections:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Returns list of collection IDs in your account. If the result
        is truncated, the response also provides a <code>NextToken</code> that you
        can use in the subsequent request to fetch the next set of collection IDs.</p>
        <p>For an example, see <a>list-collection-procedure</a>.</p> <p>This operation
        requires permissions to perform the <code>rekognition:ListCollections</code>
        action.</p>
      operationId: ListCollections
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ListCollectionsRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ListCollectionsResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        486:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#ListFaces:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Returns metadata for faces in the specified collection. This
        metadata includes information such as the bounding box coordinates, the confidence
        (that the bounding box contains a face), and face ID. For an example, see
        <a>list-faces-in-collection-procedure</a>. </p> <p>This operation requires
        permissions to perform the <code>rekognition:ListFaces</code> action.</p>
      operationId: ListFaces
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ListFacesRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ListFacesResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        486:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#ListStreamProcessors:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Gets a list of stream processors that you have created with . '
      operationId: ListStreamProcessors
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ListStreamProcessorsRequest'
      - description: Pagination limit
        in: query
        name: MaxResults
        required: false
        type: string
      - description: Pagination token
        in: query
        name: NextToken
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ListStreamProcessorsResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        484:
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        485:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
  /#RecognizeCelebrities:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Returns an array of celebrities recognized in the input image.
        For more information, see <a>celebrities</a>. </p> <p> <code>RecognizeCelebrities</code>
        returns the 100 largest faces in the image. It lists recognized celebrities
        in the <code>CelebrityFaces</code> array and unrecognized faces in the <code>UnrecognizedFaces</code>
        array. <code>RecognizeCelebrities</code> doesn't return celebrities whose
        faces are not amongst the largest 100 faces in the image.</p> <p>For each
        celebrity recognized, the <code>RecognizeCelebrities</code> returns a <code>Celebrity</code>
        object. The <code>Celebrity</code> object contains the celebrity name, ID,
        URL links to additional information, match confidence, and a <code>ComparedFace</code>
        object that you can use to locate the celebrity's face on the image.</p> <p>Rekognition
        does not retain information about which images a celebrity has been recognized
        in. Your application must store this information and use the <code>Celebrity</code>
        ID property as a unique identifier for the celebrity. If you don't store the
        celebrity name or additional information URLs returned by <code>RecognizeCelebrities</code>,
        you will need the ID to identify the celebrity in a call to the operation.</p>
        <p>You pass the imput image either as base64-encoded image bytes or as a reference
        to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon
        Rekognition operations, passing image bytes is not supported. The image must
        be either a PNG or JPEG formatted file. </p> <p>For an example, see <a>celebrities-procedure-image</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:RecognizeCelebrities</code>
        operation.</p>
      operationId: RecognizeCelebrities
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/RecognizeCelebritiesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/RecognizeCelebritiesResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
        483:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        484:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        485:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        487:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        488:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#SearchFaces:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>For a given input face ID, searches for matching faces in the
        collection the face belongs to. You get a face ID when you add a face to the
        collection using the <a>IndexFaces</a> operation. The operation compares the
        features of the input face with faces in the specified collection. </p> <note>
        <p>You can also search faces without indexing faces by using the <code>SearchFacesByImage</code>
        operation.</p> </note> <p> The operation response returns an array of faces
        that match, ordered by similarity score with the highest similarity first.
        More specifically, it is an array of metadata for each face match that is
        found. Along with the metadata, the response also includes a <code>confidence</code>
        value for each face match, indicating the confidence that the specific face
        matches the input face. </p> <p>For an example, see <a>search-face-with-id-procedure</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>
        action.</p>
      operationId: SearchFaces
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SearchFacesRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/SearchFacesResponse'
        480:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        481:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        482:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        483:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        484:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        485:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
  /#SearchFacesByImage:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>For a given input image, first detects the largest face in the
        image, and then searches the specified collection for matching faces. The
        operation compares the features of the input face with faces in the specified
        collection. </p> <note> <p> To search for all faces in an input image, you
        might first call the operation, and then use the face IDs returned in subsequent
        calls to the operation. </p> <p> You can also call the <code>DetectFaces</code>
        operation and use the bounding boxes in the response to make face crops, which
        then you can pass in to the <code>SearchFacesByImage</code> operation. </p>
        </note> <p>You pass the input image either as base64-encoded image bytes or
        as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI
        to call Amazon Rekognition operations, passing image bytes is not supported.
        The image must be either a PNG or JPEG formatted file. </p> <p> The response
        returns an array of faces that match, ordered by similarity score with the
        highest similarity first. More specifically, it is an array of metadata for
        each face match found. Along with the metadata, the response also includes
        a <code>similarity</code> indicating how similar the face is to the input
        face. In the response, the operation also returns the bounding box (and a
        confidence level that the bounding box contains a face) of the face that Amazon
        Rekognition used for the input image. </p> <p>For an example, see <a>search-face-with-image-procedure</a>.</p>
        <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>
        action.</p>
      operationId: SearchFacesByImage
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SearchFacesByImageRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/SearchFacesByImageResponse'
        480:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        481:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        482:
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        483:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        488:
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
  /#StartCelebrityRecognition:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Starts asynchronous recognition of celebrities in a stored video.</p>
        <p>Rekognition Video can detect celebrities in a video must be stored in an
        Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename
        of the video. <code>StartCelebrityRecognition</code> returns a job identifier
        (<code>JobId</code>) which you use to get the results of the analysis. When
        celebrity recognition analysis is finished, Rekognition Video publishes a
        completion status to the Amazon Simple Notification Service topic that you
        specify in <code>NotificationChannel</code>. To get the results of the celebrity
        recognition analysis, first check that the status value published to the Amazon
        SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier
        (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>.
        For more information, see <a>celebrities</a>.</p>
      operationId: StartCelebrityRecognition
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartCelebrityRecognitionRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartCelebrityRecognitionResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        488:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#StartContentModeration:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p> Starts asynchronous detection of explicit or suggestive adult
        content in a stored video.</p> <p>Rekognition Video can moderate content in
        a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket
        name and the filename of the video. <code>StartContentModeration</code> returns
        a job identifier (<code>JobId</code>) which you use to get the results of
        the analysis. When content moderation analysis is finished, Rekognition Video
        publishes a completion status to the Amazon Simple Notification Service topic
        that you specify in <code>NotificationChannel</code>.</p> <p>To get the results
        of the content moderation analysis, first check that the status value published
        to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the
        job identifier (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>.
        For more information, see <a>moderation</a>.</p>
      operationId: StartContentModeration
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartContentModerationRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartContentModerationResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        488:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#StartFaceDetection:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Starts asynchronous detection of faces in a stored video.</p>
        <p>Rekognition Video can detect faces in a video stored in an Amazon S3 bucket.
        Use <a>Video</a> to specify the bucket name and the filename of the video.
        <code>StartFaceDetection</code> returns a job identifier (<code>JobId</code>)
        that you use to get the results of the operation. When face detection is finished,
        Rekognition Video publishes a completion status to the Amazon Simple Notification
        Service topic that you specify in <code>NotificationChannel</code>. To get
        the results of the label detection operation, first check that the status
        value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so,
        call and pass the job identifier (<code>JobId</code>) from the initial call
        to <code>StartFaceDetection</code>. For more information, see <a>faces-video</a>.</p>
      operationId: StartFaceDetection
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartFaceDetectionRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartFaceDetectionResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        488:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#StartFaceSearch:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Starts the asynchronous search for faces in a collection that
        match the faces of persons detected in a stored video.</p> <p>The video must
        be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name
        and the filename of the video. <code>StartFaceSearch</code> returns a job
        identifier (<code>JobId</code>) which you use to get the search results once
        the search has completed. When searching is finished, Rekognition Video publishes
        a completion status to the Amazon Simple Notification Service topic that you
        specify in <code>NotificationChannel</code>. To get the search results, first
        check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.
        If so, call and pass the job identifier (<code>JobId</code>) from the initial
        call to <code>StartFaceSearch</code>. For more information, see <a>collections-search-person</a>.</p>
      operationId: StartFaceSearch
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartFaceSearchRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartFaceSearchResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        488:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        489:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#StartLabelDetection:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Starts asynchronous detection of labels in a stored video.</p>
        <p>Rekognition Video can detect labels in a video. Labels are instances of
        real-world entities. This includes objects like flower, tree, and table; events
        like wedding, graduation, and birthday party; concepts like landscape, evening,
        and nature; and activities like a person getting out of a car or a person
        skiing.</p> <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a>
        to specify the bucket name and the filename of the video. <code>StartLabelDetection</code>
        returns a job identifier (<code>JobId</code>) which you use to get the results
        of the operation. When label detection is finished, Rekognition Video publishes
        a completion status to the Amazon Simple Notification Service topic that you
        specify in <code>NotificationChannel</code>.</p> <p>To get the results of
        the label detection operation, first check that the status value published
        to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the
        job identifier (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>
        <p/>
      operationId: StartLabelDetection
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartLabelDetectionRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartLabelDetectionResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        488:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#StartPersonTracking:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Starts the asynchronous tracking of persons in a stored video.</p>
        <p>Rekognition Video can track persons in a video stored in an Amazon S3 bucket.
        Use <a>Video</a> to specify the bucket name and the filename of the video.
        <code>StartPersonTracking</code> returns a job identifier (<code>JobId</code>)
        which you use to get the results of the operation. When label detection is
        finished, Amazon Rekognition publishes a completion status to the Amazon Simple
        Notification Service topic that you specify in <code>NotificationChannel</code>.
        </p> <p>To get the results of the person detection operation, first check
        that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.
        If so, call and pass the job identifier (<code>JobId</code>) from the initial
        call to <code>StartPersonTracking</code>.</p>
      operationId: StartPersonTracking
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartPersonTrackingRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartPersonTrackingResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        482:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        483:
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        484:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        485:
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        487:
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        488:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#StartStreamProcessor:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Starts processing a stream processor. You create a stream processor
        by calling . To tell <code>StartStreamProcessor</code> which stream processor
        to start, use the value of the <code>Name</code> field specified in the call
        to <code>CreateStreamProcessor</code>.
      operationId: StartStreamProcessor
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StartStreamProcessorRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StartStreamProcessorResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        484:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        485:
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
  /#StopStreamProcessor:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Stops a running stream processor that was created by .
      operationId: StopStreamProcessor
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/StopStreamProcessorRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StopStreamProcessorResponse'
        480:
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        481:
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        484:
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        485:
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        486:
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
produces:
- application/json
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":202:{s:21:\"AccessDeniedException\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"You
  are not authorized to perform the action.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:8:\"AgeRange\";O:8:\"stdClass\":3:{s:11:\"description\";s:315:\"<p>Structure
  containing the estimated age range, in years, for a face.</p> <p>Rekognition estimates
  an age-range for faces detected in the input image. Estimated age ranges can overlap;
  a face of a 5 year old may have an estimated range of 4-6 whilst the face of a 6
  year old may have an estimated range of 4-8.</p>\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"High\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:26:\"The
  highest estimated age.\";}s:3:\"Low\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:25:\"The
  lowest estimated age.\";}}s:4:\"type\";s:6:\"object\";}s:9:\"Attribute\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:7:\"DEFAULT\";i:1;s:3:\"ALL\";}s:4:\"type\";s:6:\"string\";}s:10:\"Attributes\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/Attribute\";}s:4:\"type\";s:5:\"array\";}s:5:\"Beard\";O:8:\"stdClass\":3:{s:11:\"description\";s:93:\"Indicates
  whether or not the face has a beard, and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:63:\"Boolean
  value that indicates whether the face has beard or not.\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Boolean\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"BoundingBox\";O:8:\"stdClass\":3:{s:11:\"description\";s:1284:\"<p>Identifies
  the bounding box around the object, face or text. The <code>left</code> (x-coordinate)
  and <code>top</code> (y-coordinate) are coordinates representing the top and left
  sides of the bounding box. Note that the upper-left corner of the image is the origin
  (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios
  of the overall image size. For example, if the input image is 700x200 pixels, and
  the top-left coordinate of the bounding box is 350x50 pixels, the API returns a
  <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p>
  <p>The <code>width</code> and <code>height</code> values represent the dimensions
  of the bounding box as a ratio of the overall image dimension. For example, if the
  input image is 700x200 pixels, and the bounding box width is 70 pixels, the width
  returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative
  values. For example, if Amazon Rekognition is able to detect a face that is at the
  image edge and is only partially visible, the service can return coordinates that
  are outside the image bounds and, depending on the image edge, you might get negative
  values or values greater than 1 for the <code>left</code> or <code>top</code> values.
  </p> </note>\";s:10:\"properties\";O:8:\"stdClass\":4:{s:6:\"Height\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:66:\"Height
  of the bounding box as a ratio of the overall image height.\";}s:4:\"Left\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:70:\"Left
  coordinate of the bounding box as a ratio of overall image width.\";}s:3:\"Top\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:70:\"Top
  coordinate of the bounding box as a ratio of overall image height.\";}s:5:\"Width\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:64:\"Width
  of the bounding box as a ratio of the overall image width.\";}}s:4:\"type\";s:6:\"object\";}s:9:\"Celebrity\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"Provides
  information about a celebrity recognized by the operation.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/ComparedFace\";s:11:\"description\";s:83:\"Provides
  information about the celebrity's face, such as its location on the image.\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/RekognitionUniqueId\";s:11:\"description\";s:39:\"A
  unique identifier for the celebrity. \";}s:15:\"MatchConfidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:94:\"The
  confidence, in percentage, that Rekognition has that the recognized face is the
  celebrity.\";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:26:\"The
  name of the celebrity.\";}s:4:\"Urls\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Urls\";s:11:\"description\";s:151:\"An
  array of URLs pointing to additional information about the celebrity. If there is
  no additional information about the celebrity, this list is empty.\";}}s:4:\"type\";s:6:\"object\";}s:15:\"CelebrityDetail\";O:8:\"stdClass\":3:{s:11:\"description\";s:41:\"Information
  about a recognized celebrity.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:44:\"Bounding
  box around the body of a celebrity.\";}s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:102:\"The
  confidence, in percentage, that Amazon Rekognition has that the recognized face
  is the celebrity. \";}s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/FaceDetail\";s:11:\"description\";s:42:\"Face
  details for the recognized celebrity.\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/RekognitionUniqueId\";s:11:\"description\";s:41:\"The
  unique identifier for the celebrity. \";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:26:\"The
  name of the celebrity.\";}s:4:\"Urls\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Urls\";s:11:\"description\";s:63:\"An
  array of URLs pointing to additional celebrity information. \";}}s:4:\"type\";s:6:\"object\";}s:13:\"CelebrityList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/Celebrity\";}s:4:\"type\";s:5:\"array\";}s:20:\"CelebrityRecognition\";O:8:\"stdClass\":3:{s:11:\"description\";s:125:\"Information
  about a detected celebrity and the time the celebrity was detected in a stored video.
  For more information, see .\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"Celebrity\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/CelebrityDetail\";s:11:\"description\";s:41:\"Information
  about a recognized celebrity.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:89:\"The
  time, in milliseconds from the start of the video, that the celebrity was recognized.\";}}s:4:\"type\";s:6:\"object\";}s:26:\"CelebrityRecognitionSortBy\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:2:\"ID\";i:1;s:9:\"TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:21:\"CelebrityRecognitions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/CelebrityRecognition\";}s:4:\"type\";s:5:\"array\";}s:18:\"ClientRequestToken\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:64;s:9:\"minLength\";i:1;s:7:\"pattern\";s:16:\"^[a-zA-Z0-9-_]+$\";s:4:\"type\";s:6:\"string\";}s:12:\"CollectionId\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:255;s:9:\"minLength\";i:1;s:7:\"pattern\";s:16:\"[a-zA-Z0-9_.\\-]+\";s:4:\"type\";s:6:\"string\";}s:16:\"CollectionIdList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";}s:4:\"type\";s:5:\"array\";}s:17:\"CompareFacesMatch\";O:8:\"stdClass\":3:{s:11:\"description\";s:335:\"Provides
  information about a face in a target image that matches the source image face analysed
  by <code>CompareFaces</code>. The <code>Face</code> property contains the bounding
  box of the face in the target image. The <code>Similarity</code> property is the
  confidence that the source image face matches the face in the bounding box.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/ComparedFace\";s:11:\"description\";s:100:\"Provides
  face metadata (bounding box and confidence that the bounding box actually contains
  a face).\";}s:10:\"Similarity\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence that the faces match.\";}}s:4:\"type\";s:6:\"object\";}s:21:\"CompareFacesMatchList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/CompareFacesMatch\";}s:4:\"type\";s:5:\"array\";}s:19:\"CompareFacesRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":3:{s:19:\"SimilarityThreshold\";i:90;s:11:\"SourceImage\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:6:\"Bucket\";s:8:\"mybucket\";s:4:\"Name\";s:13:\"mysourceimage\";}}s:11:\"TargetImage\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:6:\"Bucket\";s:8:\"mybucket\";s:4:\"Name\";s:13:\"mytargetimage\";}}}s:10:\"properties\";O:8:\"stdClass\":3:{s:19:\"SimilarityThreshold\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:128:\"The
  minimum level of confidence in the face matches that a match must meet to be included
  in the <code>FaceMatches</code> array.\";}s:11:\"SourceImage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}s:11:\"TargetImage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:173:\"The
  target image as base64-encoded bytes or an S3 object. If you use the AWS CLI to
  call Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}}s:8:\"required\";a:2:{i:0;s:11:\"SourceImage\";i:1;s:11:\"TargetImage\";}s:4:\"type\";s:6:\"object\";}s:20:\"CompareFacesResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":2:{s:11:\"FaceMatches\";a:1:{i:0;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":2:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.33481481671333313;s:4:\"Left\";d:0.31888890266418457;s:3:\"Top\";d:0.49333333969116211;s:5:\"Width\";d:0.25;}s:10:\"Confidence\";d:99.999122619628906;}s:10:\"Similarity\";i:100;}}s:15:\"SourceImageFace\";O:8:\"stdClass\":2:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.33481481671333313;s:4:\"Left\";d:0.31888890266418457;s:3:\"Top\";d:0.49333333969116211;s:5:\"Width\";d:0.25;}s:10:\"Confidence\";d:99.999122619628906;}}s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"FaceMatches\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/CompareFacesMatchList\";s:11:\"description\";s:293:\"An
  array of faces in the target image that match the source image face. Each <code>CompareFacesMatch</code>
  object provides the bounding box, the confidence level that the bounding box contains
  a face, and the similarity score for the face in the bounding box and the face in
  the source image.\";}s:15:\"SourceImageFace\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/ComparedSourceImageFace\";s:11:\"description\";s:58:\"The
  face in the source image that was used for comparison.\";}s:32:\"SourceImageOrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/OrientationCorrection\";s:11:\"description\";s:810:\"<p>
  The orientation of the source image (counterclockwise direction). If your application
  displays the source image, you can use this value to correct image orientation.
  The bounding box coordinates returned in <code>SourceImageFace</code> represent
  the location of the face before the image orientation is corrected. </p> <note>
  <p>If the source image is in .jpeg format, it might contain exchangeable image (Exif)
  metadata that includes the image's orientation. If the Exif metadata for the source
  image populates the orientation field, the value of <code>OrientationCorrection</code>
  is null and the <code>SourceImageFace</code> bounding box coordinates represent
  the location of the face after Exif metadata is used to correct the orientation.
  Images in .png format don't contain Exif metadata.</p> </note>\";}s:32:\"TargetImageOrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/OrientationCorrection\";s:11:\"description\";s:856:\"<p>
  The orientation of the target image (in counterclockwise direction). If your application
  displays the target image, you can use this value to correct the orientation of
  the image. The bounding box coordinates returned in <code>FaceMatches</code> and
  <code>UnmatchedFaces</code> represent face locations before the image orientation
  is corrected. </p> <note> <p>If the target image is in .jpg format, it might contain
  Exif metadata that includes the orientation of the image. If the Exif metadata for
  the target image populates the orientation field, the value of <code>OrientationCorrection</code>
  is null and the bounding box coordinates in <code>FaceMatches</code> and <code>UnmatchedFaces</code>
  represent the location of the face after Exif metadata is used to correct the orientation.
  Images in .png format don't contain Exif metadata.</p> </note>\";}s:14:\"UnmatchedFaces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/CompareFacesUnmatchList\";s:11:\"description\";s:79:\"An
  array of faces in the target image that did not match the source image face.\";}}s:4:\"type\";s:6:\"object\";}s:23:\"CompareFacesUnmatchList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ComparedFace\";}s:4:\"type\";s:5:\"array\";}s:12:\"ComparedFace\";O:8:\"stdClass\":3:{s:11:\"description\";s:131:\"Provides
  face metadata for target image faces that are analysed by <code>CompareFaces</code>
  and <code>RecognizeCelebrities</code>.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:25:\"Bounding
  box of the face.\";}s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:66:\"Level
  of confidence that what the bounding box contains is a face.\";}s:9:\"Landmarks\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Landmarks\";s:11:\"description\";s:29:\"An
  array of facial landmarks.\";}s:4:\"Pose\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Pose\";s:11:\"description\";s:73:\"Indicates
  the pose of the face as determined by its pitch, roll, and yaw.\";}s:7:\"Quality\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/ImageQuality\";s:11:\"description\";s:48:\"Identifies
  face image brightness and sharpness. \";}}s:4:\"type\";s:6:\"object\";}s:16:\"ComparedFaceList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ComparedFace\";}s:4:\"type\";s:5:\"array\";}s:23:\"ComparedSourceImageFace\";O:8:\"stdClass\":3:{s:11:\"description\";s:301:\"Type
  that describes the face Amazon Rekognition chose to compare with the faces in the
  target. This contains a bounding box for the selected face and confidence level
  that the bounding box contains a face. Note that Amazon Rekognition selects the
  largest face in the source image for this comparison. \";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:25:\"Bounding
  box of the face.\";}s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:64:\"Confidence
  level that the selected bounding box contains a face.\";}}s:4:\"type\";s:6:\"object\";}s:26:\"ContentModerationDetection\";O:8:\"stdClass\":3:{s:11:\"description\";s:65:\"Information
  about a moderation label detection in a stored video.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"ModerationLabel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/ModerationLabel\";s:11:\"description\";s:53:\"The
  moderation label detected by in the stored video.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:94:\"Time,
  in milliseconds from the beginning of the video, that the moderation label was detected.\";}}s:4:\"type\";s:6:\"object\";}s:27:\"ContentModerationDetections\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:40:\"#/definitions/ContentModerationDetection\";}s:4:\"type\";s:5:\"array\";}s:23:\"ContentModerationSortBy\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:4:\"NAME\";i:1;s:9:\"TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:23:\"CreateCollectionRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":1:{s:12:\"CollectionId\";s:8:\"myphotos\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:44:\"ID
  for the collection that you are creating.\";}}s:8:\"required\";a:1:{i:0;s:12:\"CollectionId\";}s:4:\"type\";s:6:\"object\";}s:24:\"CreateCollectionResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":2:{s:13:\"CollectionArn\";s:58:\"aws:rekognition:us-west-2:123456789012:collection/myphotos\";s:10:\"StatusCode\";i:200;}s:10:\"properties\";O:8:\"stdClass\":3:{s:13:\"CollectionArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:104:\"Amazon
  Resource Name (ARN) of the collection. You can use this to manage permissions on
  your resources. \";}s:16:\"FaceModelVersion\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:91:\"Version
  number of the face detection model associated with the collection you are creating.\";}s:10:\"StatusCode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:56:\"HTTP
  status code indicating the result of the operation.\";}}s:4:\"type\";s:6:\"object\";}s:28:\"CreateStreamProcessorRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"Input\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/StreamProcessorInput\";s:11:\"description\";s:156:\"Kinesis
  video stream stream that provides the source streaming video. If you are using the
  AWS CLI, the parameter name is <code>StreamProcessorInput</code>.\";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:226:\"An
  identifier you assign to the stream processor. You can use <code>Name</code> to
  manage the stream processor. For example, you can get the current status of the
  stream processor by calling . <code>Name</code> is idempotent. \";}s:6:\"Output\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/StreamProcessorOutput\";s:11:\"description\";s:168:\"Kinesis
  data stream stream to which Rekognition Video puts the analysis results. If you
  are using the AWS CLI, the parameter name is <code>StreamProcessorOutput</code>.\";}s:7:\"RoleArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/RoleArn\";s:11:\"description\";s:63:\"ARN
  of the IAM role that allows access to the stream processor.\";}s:8:\"Settings\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/StreamProcessorSettings\";s:11:\"description\";s:156:\"Face
  recognition input parameters to be used by the stream processor. Includes the collection
  to use for face recognition and the face attributes to detect.\";}}s:8:\"required\";a:5:{i:0;s:5:\"Input\";i:1;s:6:\"Output\";i:2;s:4:\"Name\";i:3;s:8:\"Settings\";i:4;s:7:\"RoleArn\";}s:4:\"type\";s:6:\"object\";}s:29:\"CreateStreamProcessorResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:18:\"StreamProcessorArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/StreamProcessorArn\";s:11:\"description\";s:42:\"ARN
  for the newly create stream processor.\";}}s:4:\"type\";s:6:\"object\";}s:8:\"DateTime\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:6:\"Degree\";O:8:\"stdClass\":4:{s:6:\"format\";s:5:\"float\";s:7:\"maximum\";i:180;s:7:\"minimum\";i:-180;s:4:\"type\";s:6:\"number\";}s:23:\"DeleteCollectionRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":1:{s:12:\"CollectionId\";s:8:\"myphotos\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:31:\"ID
  of the collection to delete.\";}}s:8:\"required\";a:1:{i:0;s:12:\"CollectionId\";}s:4:\"type\";s:6:\"object\";}s:24:\"DeleteCollectionResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":1:{s:10:\"StatusCode\";i:200;}s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"StatusCode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:60:\"HTTP
  status code that indicates the result of the operation.\";}}s:4:\"type\";s:6:\"object\";}s:18:\"DeleteFacesRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":2:{s:12:\"CollectionId\";s:8:\"myphotos\";s:7:\"FaceIds\";a:1:{i:0;s:36:\"ff43d742-0c13-5d16-a3e8-03d3f58e980b\";}}s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:51:\"Collection
  from which to remove the specific faces.\";}s:7:\"FaceIds\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/FaceIdList\";s:11:\"description\";s:31:\"An
  array of face IDs to delete.\";}}s:8:\"required\";a:2:{i:0;s:12:\"CollectionId\";i:1;s:7:\"FaceIds\";}s:4:\"type\";s:6:\"object\";}s:19:\"DeleteFacesResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":1:{s:12:\"DeletedFaces\";a:1:{i:0;s:36:\"ff43d742-0c13-5d16-a3e8-03d3f58e980b\";}}s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"DeletedFaces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/FaceIdList\";s:11:\"description\";s:62:\"An
  array of strings (face IDs) of the faces that were deleted.\";}}s:4:\"type\";s:6:\"object\";}s:28:\"DeleteStreamProcessorRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:52:\"The
  name of the stream processor you want to delete.\";}}s:8:\"required\";a:1:{i:0;s:4:\"Name\";}s:4:\"type\";s:6:\"object\";}s:29:\"DeleteStreamProcessorResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:30:\"DescribeStreamProcessorRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:60:\"Name
  of the stream processor for which you want information.\";}}s:8:\"required\";a:1:{i:0;s:4:\"Name\";}s:4:\"type\";s:6:\"object\";}s:31:\"DescribeStreamProcessorResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":10:{s:17:\"CreationTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/DateTime\";s:11:\"description\";s:46:\"Date
  and time the stream processor was created\";}s:5:\"Input\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/StreamProcessorInput\";s:11:\"description\";s:62:\"Kinesis
  video stream that provides the source streaming video.\";}s:19:\"LastUpdateTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/DateTime\";s:11:\"description\";s:204:\"The
  time, in Unix format, the stream processor was last updated. For example, when the
  stream processor moves from a running state to a failed state, or when the user
  starts or stops the stream processor.\";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:30:\"Name
  of the stream processor. \";}s:6:\"Output\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/StreamProcessorOutput\";s:11:\"description\";s:73:\"Kinesis
  data stream to which Rekognition Video puts the analysis results.\";}s:7:\"RoleArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/RoleArn\";s:11:\"description\";s:63:\"ARN
  of the IAM role that allows access to the stream processor.\";}s:8:\"Settings\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/StreamProcessorSettings\";s:11:\"description\";s:165:\"Face
  recognition input parameters that are being used by the stream processor. Includes
  the collection to use for face recognition and the face attributes to detect.\";}s:6:\"Status\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/StreamProcessorStatus\";s:11:\"description\";s:39:\"Current
  status of the stream processor.\";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:51:\"Detailed
  status message about the stream processor.\";}s:18:\"StreamProcessorArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/StreamProcessorArn\";s:11:\"description\";s:28:\"ARN
  of the stream processor.\";}}s:4:\"type\";s:6:\"object\";}s:18:\"DetectFacesRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":1:{s:5:\"Image\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:6:\"Bucket\";s:8:\"mybucket\";s:4:\"Name\";s:7:\"myphoto\";}}}s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Attributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Attributes\";s:11:\"description\";s:696:\"<p>An
  array of facial attributes you want to be returned. This can be the default list
  of attributes or all attributes. If you don't specify a value for <code>Attributes</code>
  or if you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset
  of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,
  <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>,
  all facial attributes are returned but the operation will take longer to complete.</p>
  <p>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a
  logical AND operator to determine which attributes to return (in this case, all
  attributes). </p>\";}s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}}s:8:\"required\";a:1:{i:0;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:19:\"DetectFacesResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":2:{s:11:\"FaceDetails\";a:1:{i:0;O:8:\"stdClass\":5:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.18000000715255737;s:4:\"Left\";d:0.55555558204650879;s:3:\"Top\";d:0.33666667342185974;s:5:\"Width\";d:0.23999999463558197;}s:10:\"Confidence\";i:100;s:9:\"Landmarks\";a:5:{i:0;O:8:\"stdClass\":3:{s:4:\"Type\";s:7:\"eyeLeft\";s:1:\"X\";d:0.63947373628616333;s:1:\"Y\";d:0.40819624066352844;}i:1;O:8:\"stdClass\":3:{s:4:\"Type\";s:8:\"eyeRight\";s:1:\"X\";d:0.72666609287261963;s:1:\"Y\";d:0.41039225459098816;}i:2;O:8:\"stdClass\":3:{s:4:\"Type\";s:8:\"eyeRight\";s:1:\"X\";d:0.69124621152877808;s:1:\"Y\";d:0.44240960478782654;}i:3;O:8:\"stdClass\":3:{s:4:\"Type\";s:9:\"mouthDown\";s:1:\"X\";d:0.63061982393264771;s:1:\"Y\";d:0.46700039505958557;}i:4;O:8:\"stdClass\":3:{s:4:\"Type\";s:7:\"mouthUp\";s:1:\"X\";d:0.72156089544296265;s:1:\"Y\";d:0.47114261984825134;}}s:4:\"Pose\";O:8:\"stdClass\":3:{s:5:\"Pitch\";d:4.0508065223693848;s:4:\"Roll\";d:0.99507474899291992;s:3:\"Yaw\";d:13.693790435791016;}s:7:\"Quality\";O:8:\"stdClass\":2:{s:10:\"Brightness\";d:37.601699829101562;s:9:\"Sharpness\";i:80;}}}s:21:\"OrientationCorrection\";s:8:\"ROTATE_0\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"FaceDetails\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/FaceDetailList\";s:11:\"description\";s:41:\"Details
  of each face found in the image. \";}s:21:\"OrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/OrientationCorrection\";s:11:\"description\";s:787:\"<p>
  The orientation of the input image (counter-clockwise direction). If your application
  displays the image, you can use this value to correct image orientation. The bounding
  box coordinates returned in <code>FaceDetails</code> represent face locations before
  the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg
  format, it might contain exchangeable image (Exif) metadata that includes the image's
  orientation. If so, and the Exif metadata for the input image populates the orientation
  field, the value of <code>OrientationCorrection</code> is null and the <code>FaceDetails</code>
  bounding box coordinates represent face locations after Exif metadata is used to
  correct the image orientation. Images in .png format don't contain Exif metadata.</p>
  </note>\";}}s:4:\"type\";s:6:\"object\";}s:19:\"DetectLabelsRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":3:{s:5:\"Image\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:6:\"Bucket\";s:8:\"mybucket\";s:4:\"Name\";s:7:\"myphoto\";}}s:9:\"MaxLabels\";i:123;s:13:\"MinConfidence\";i:70;}s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}s:9:\"MaxLabels\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:144:\"Maximum
  number of labels you want the service to return in the response. The service returns
  the specified number of highest confidence labels. \";}s:13:\"MinConfidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:311:\"<p>Specifies
  the minimum confidence level for the labels to return. Amazon Rekognition doesn't
  return any labels with confidence lower than this specified value.</p> <p>If <code>MinConfidence</code>
  is not specified, the operation returns labels with a confidence values greater
  than or equal to 50 percent.</p>\";}}s:8:\"required\";a:1:{i:0;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:20:\"DetectLabelsResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":1:{s:6:\"Labels\";a:2:{i:0;O:8:\"stdClass\":2:{s:10:\"Confidence\";d:99.250724792480469;s:4:\"Name\";s:6:\"People\";}i:1;O:8:\"stdClass\":2:{s:10:\"Confidence\";d:99.250740051269531;s:4:\"Name\";s:6:\"Person\";}}}s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"Labels\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Labels\";s:11:\"description\";s:56:\"An
  array of labels for the real-world objects detected. \";}s:21:\"OrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/OrientationCorrection\";s:11:\"description\";s:521:\"<p>
  The orientation of the input image (counter-clockwise direction). If your application
  displays the image, you can use this value to correct the orientation. If Amazon
  Rekognition detects that the input image was rotated (for example, by 90 degrees),
  it first corrects the orientation before detecting the labels. </p> <note> <p>If
  the input image Exif metadata populates the orientation field, Amazon Rekognition
  does not perform orientation correction and the value of OrientationCorrection will
  be null.</p> </note>\";}}s:4:\"type\";s:6:\"object\";}s:29:\"DetectModerationLabelsRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}s:13:\"MinConfidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:318:\"<p>Specifies
  the minimum confidence level for the labels to return. Amazon Rekognition doesn't
  return any labels with a confidence level lower than this specified value.</p> <p>If
  you don't specify <code>MinConfidence</code>, the operation returns labels with
  confidence values greater than or equal to 50 percent.</p>\";}}s:8:\"required\";a:1:{i:0;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:30:\"DetectModerationLabelsResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:16:\"ModerationLabels\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/ModerationLabels\";s:11:\"description\";s:113:\"Array
  of detected Moderation labels and the time, in millseconds from the start of the
  video, they were detected.\";}}s:4:\"type\";s:6:\"object\";}s:17:\"DetectTextRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:154:\"The
  input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI
  to call Amazon Rekognition operations, you can't pass image bytes. \";}}s:8:\"required\";a:1:{i:0;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:18:\"DetectTextResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:14:\"TextDetections\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/TextDetectionList\";s:11:\"description\";s:54:\"An
  array of text that was detected in the input image.\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Emotion\";O:8:\"stdClass\":3:{s:11:\"description\";s:117:\"The
  emotions detected on the face, and the confidence level in the determination. For
  example, HAPPY, SAD, and ANGRY.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:4:\"Type\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/EmotionName\";s:11:\"description\";s:25:\"Type
  of emotion detected.\";}}s:4:\"type\";s:6:\"object\";}s:11:\"EmotionName\";O:8:\"stdClass\":2:{s:4:\"enum\";a:8:{i:0;s:5:\"HAPPY\";i:1;s:3:\"SAD\";i:2;s:5:\"ANGRY\";i:3;s:8:\"CONFUSED\";i:4;s:9:\"DISGUSTED\";i:5;s:9:\"SURPRISED\";i:6;s:4:\"CALM\";i:7;s:7:\"UNKNOWN\";}s:4:\"type\";s:6:\"string\";}s:8:\"Emotions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Emotion\";}s:4:\"type\";s:5:\"array\";}s:15:\"ExternalImageId\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:255;s:9:\"minLength\";i:1;s:7:\"pattern\";s:17:\"[a-zA-Z0-9_.\\-:]+\";s:4:\"type\";s:6:\"string\";}s:7:\"EyeOpen\";O:8:\"stdClass\":3:{s:11:\"description\";s:102:\"Indicates
  whether or not the eyes on the face are open, and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:67:\"Boolean
  value that indicates whether the eyes on the face are open.\";}}s:4:\"type\";s:6:\"object\";}s:10:\"Eyeglasses\";O:8:\"stdClass\":3:{s:11:\"description\";s:104:\"Indicates
  whether or not the face is wearing eye glasses, and the confidence level in the
  determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:76:\"Boolean
  value that indicates whether the face is wearing eye glasses or not.\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Face\";O:8:\"stdClass\":3:{s:11:\"description\";s:135:\"Describes
  the face properties such as the bounding box, face ID, image ID of the input image,
  and external image ID that you assigned. \";s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:25:\"Bounding
  box of the face.\";}s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:99:\"Confidence
  level that the bounding box contains a face (and not a different object such as
  a tree).\";}s:15:\"ExternalImageId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/ExternalImageId\";s:11:\"description\";s:63:\"Identifier
  that you assign to all the faces in the input image.\";}s:6:\"FaceId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/FaceId\";s:11:\"description\";s:62:\"Unique
  identifier that Amazon Rekognition assigns to the face.\";}s:7:\"ImageId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/ImageId\";s:11:\"description\";s:69:\"Unique
  identifier that Amazon Rekognition assigns to the input image.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"FaceAttributes\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:7:\"DEFAULT\";i:1;s:3:\"ALL\";}s:4:\"type\";s:6:\"string\";}s:10:\"FaceDetail\";O:8:\"stdClass\":3:{s:11:\"description\";s:1138:\"<p>Structure
  containing attributes of the face that the algorithm detected.</p> <p>A <code>FaceDetail</code>
  object contains either the default facial attributes or all facial attributes. The
  default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>,
  <code>Pose</code>, and <code>Quality</code>.</p> <p> is the only Rekognition Video
  stored video operation that can return a <code>FaceDetail</code> object with all
  attributes. To specify which attributes to return, use the <code>FaceAttributes</code>
  input parameter for . The following Rekognition Video operations return only the
  default attributes. The corresponding Start operations don't have a <code>FaceAttributes</code>
  input parameter.</p> <ul> <li> <p>GetCelebrityRecognition</p> </li> <li> <p>GetPersonTracking</p>
  </li> <li> <p>GetFaceSearch</p> </li> </ul> <p>The Rekognition Image and operations
  can return all facial attributes. To specify which attributes to return, use the
  <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>,
  use the <code>DetectAttributes</code> input parameter.</p>\";s:10:\"properties\";O:8:\"stdClass\":15:{s:8:\"AgeRange\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/AgeRange\";s:11:\"description\";s:135:\"The
  estimated age range, in years, for the face. Low represents the lowest estimated
  age and High represents the highest estimated age.\";}s:5:\"Beard\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Beard\";s:11:\"description\";s:93:\"Indicates
  whether or not the face has a beard, and the confidence level in the determination.\";}s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:44:\"Bounding
  box of the face. Default attribute.\";}s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:118:\"Confidence
  level that the bounding box contains a face (and not a different object such as
  a tree). Default attribute.\";}s:8:\"Emotions\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Emotions\";s:11:\"description\";s:118:\"The
  emotions detected on the face, and the confidence level in the determination. For
  example, HAPPY, SAD, and ANGRY. \";}s:10:\"Eyeglasses\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Eyeglasses\";s:11:\"description\";s:104:\"Indicates
  whether or not the face is wearing eye glasses, and the confidence level in the
  determination.\";}s:8:\"EyesOpen\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/EyeOpen\";s:11:\"description\";s:102:\"Indicates
  whether or not the eyes on the face are open, and the confidence level in the determination.\";}s:6:\"Gender\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Gender\";s:11:\"description\";s:65:\"Gender
  of the face and the confidence level in the determination.\";}s:9:\"Landmarks\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Landmarks\";s:11:\"description\";s:67:\"Indicates
  the location of landmarks on the face. Default attribute.\";}s:9:\"MouthOpen\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/MouthOpen\";s:11:\"description\";s:102:\"Indicates
  whether or not the mouth on the face is open, and the confidence level in the determination.\";}s:8:\"Mustache\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Mustache\";s:11:\"description\";s:96:\"Indicates
  whether or not the face has a mustache, and the confidence level in the determination.\";}s:4:\"Pose\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Pose\";s:11:\"description\";s:92:\"Indicates
  the pose of the face as determined by its pitch, roll, and yaw. Default attribute.\";}s:7:\"Quality\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/ImageQuality\";s:11:\"description\";s:61:\"Identifies
  image brightness and sharpness. Default attribute.\";}s:5:\"Smile\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Smile\";s:11:\"description\";s:92:\"Indicates
  whether or not the face is smiling, and the confidence level in the determination.\";}s:10:\"Sunglasses\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Sunglasses\";s:11:\"description\";s:103:\"Indicates
  whether or not the face is wearing sunglasses, and the confidence level in the determination.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"FaceDetailList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/FaceDetail\";}s:4:\"type\";s:5:\"array\";}s:13:\"FaceDetection\";O:8:\"stdClass\":3:{s:11:\"description\";s:111:\"Information
  about a face detected in a video analysis request and the time the face was detected
  in the video. \";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/FaceDetail\";s:11:\"description\";s:42:\"The
  face properties for the detected face.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:78:\"Time,
  in milliseconds from the start of the video, that the face was detected.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"FaceDetections\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/FaceDetection\";}s:4:\"type\";s:5:\"array\";}s:6:\"FaceId\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:60:\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\";s:4:\"type\";s:6:\"string\";}s:10:\"FaceIdList\";O:8:\"stdClass\":4:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/FaceId\";}s:8:\"maxItems\";i:4096;s:8:\"minItems\";i:1;s:4:\"type\";s:5:\"array\";}s:8:\"FaceList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Face\";}s:4:\"type\";s:5:\"array\";}s:9:\"FaceMatch\";O:8:\"stdClass\":3:{s:11:\"description\";s:115:\"Provides
  face metadata. In addition, it also provides the confidence in the match of this
  face with the input face.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Face\";s:11:\"description\";s:135:\"Describes
  the face properties such as the bounding box, face ID, image ID of the source image,
  and external image ID that you assigned.\";}s:10:\"Similarity\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:57:\"Confidence
  in the match of this face with the input face.\";}}s:4:\"type\";s:6:\"object\";}s:13:\"FaceMatchList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/FaceMatch\";}s:4:\"type\";s:5:\"array\";}s:20:\"FaceModelVersionList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}s:4:\"type\";s:5:\"array\";}s:10:\"FaceRecord\";O:8:\"stdClass\":3:{s:11:\"description\";s:149:\"Object
  containing both the face metadata (stored in the back-end database) and facial attributes
  that are detected but aren't stored in the database.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Face\";s:11:\"description\";s:135:\"Describes
  the face properties such as the bounding box, face ID, image ID of the input image,
  and external image ID that you assigned. \";}s:10:\"FaceDetail\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/FaceDetail\";s:11:\"description\";s:72:\"Structure
  containing attributes of the face that the algorithm detected.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"FaceRecordList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/FaceRecord\";}s:4:\"type\";s:5:\"array\";}s:18:\"FaceSearchSettings\";O:8:\"stdClass\":3:{s:11:\"description\";s:143:\"Input
  face recognition parameters for an Amazon Rekognition stream processor. <code>FaceRecognitionSettings</code>
  is a request parameter for .\";s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:71:\"The
  ID of a collection that contains faces that you want to search for.\";}s:18:\"FaceMatchThreshold\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:168:\"Minimum
  face match confidence score that must be met to return a result for a recognized
  face. Default is 70. 0 is the lowest confidence. 100 is the highest confidence.\";}}s:4:\"type\";s:6:\"object\";}s:16:\"FaceSearchSortBy\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:5:\"INDEX\";i:1;s:9:\"TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:5:\"Float\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:6:\"Gender\";O:8:\"stdClass\":3:{s:11:\"description\";s:65:\"Gender
  of the face and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/GenderType\";s:11:\"description\";s:19:\"Gender
  of the face.\";}}s:4:\"type\";s:6:\"object\";}s:10:\"GenderType\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:4:\"Male\";i:1;s:6:\"Female\";}s:4:\"type\";s:6:\"string\";}s:8:\"Geometry\";O:8:\"stdClass\":3:{s:11:\"description\";s:64:\"Information
  about where text detected by is located on an image.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:83:\"An
  axis-aligned coarse representation of the detected text's location on the image.\";}s:7:\"Polygon\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Polygon\";s:11:\"description\";s:73:\"Within
  the bounding box, a fine-grained polygon around the detected text.\";}}s:4:\"type\";s:6:\"object\";}s:23:\"GetCelebrityInfoRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"Id\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/RekognitionUniqueId\";s:11:\"description\";s:123:\"The
  ID for the celebrity. You get the celebrity ID from a call to the operation, which
  recognizes celebrities in an image. \";}}s:8:\"required\";a:1:{i:0;s:2:\"Id\";}s:4:\"type\";s:6:\"object\";}s:24:\"GetCelebrityInfoResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:26:\"The
  name of the celebrity.\";}s:4:\"Urls\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Urls\";s:11:\"description\";s:63:\"An
  array of URLs pointing to additional celebrity information. \";}}s:4:\"type\";s:6:\"object\";}s:30:\"GetCelebrityRecognitionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:148:\"Job
  identifier for the required celebrity recognition analysis. You can get the job
  identifer from a call to <code>StartCelebrityRecognition</code>.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:206:\"Maximum
  number of results to return per paginated call. The largest value you can specify
  is 1000. If you specify a value greater than 1000, a maximum of 1000 results is
  returned. The default value is 1000.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:237:\"If
  the previous response was incomplete (because there is more recognized celebrities
  to retrieve), Rekognition Video returns a pagination token in the response. You
  can use this pagination token to retrieve the next set of celebrities. \";}s:6:\"SortBy\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:40:\"#/definitions/CelebrityRecognitionSortBy\";s:11:\"description\";s:213:\"Sort
  to use for celebrities returned in <code>Celebrities</code> field. Specify <code>ID</code>
  to sort by the celebrity identifier, specify <code>TIMESTAMP</code> to sort by the
  time the celebrity was recognized.\";}}s:8:\"required\";a:1:{i:0;s:5:\"JobId\";}s:4:\"type\";s:6:\"object\";}s:31:\"GetCelebrityRecognitionResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"Celebrities\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/CelebrityRecognitions\";s:11:\"description\";s:45:\"Array
  of celebrities recognized in the video.\";}s:9:\"JobStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VideoJobStatus\";s:11:\"description\";s:52:\"The
  current status of the celebrity recognition job.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:150:\"If
  the response is truncated, Rekognition Video returns this token that you can use
  in the subsequent request to retrieve the next set of celebrities.\";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:82:\"If
  the job fails, <code>StatusMessage</code> provides a descriptive error message.\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/VideoMetadata\";s:11:\"description\";s:170:\"Information
  about a video that Rekognition Video analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from a Rekognition Video operation.\";}}s:4:\"type\";s:6:\"object\";}s:27:\"GetContentModerationRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:148:\"The
  identifier for the content moderation job. Use <code>JobId</code> to identify the
  job in a subsequent call to <code>GetContentModeration</code>.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:206:\"Maximum
  number of results to return per paginated call. The largest value you can specify
  is 1000. If you specify a value greater than 1000, a maximum of 1000 results is
  returned. The default value is 1000.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:233:\"If
  the previous response was incomplete (because there is more data to retrieve), Amazon
  Rekognition returns a pagination token in the response. You can use this pagination
  token to retrieve the next set of content moderation labels.\";}s:6:\"SortBy\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/ContentModerationSortBy\";s:11:\"description\";s:363:\"Sort
  to use for elements in the <code>ModerationLabelDetections</code> array. Use <code>TIMESTAMP</code>
  to sort array elements by the time labels are detected. Use <code>NAME</code> to
  alphabetically group elements for a label together. Within each label group, the
  array element are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.\";}}s:8:\"required\";a:1:{i:0;s:5:\"JobId\";}s:4:\"type\";s:6:\"object\";}s:28:\"GetContentModerationResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"JobStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VideoJobStatus\";s:11:\"description\";s:49:\"The
  current status of the content moderation job.\";}s:16:\"ModerationLabels\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:41:\"#/definitions/ContentModerationDetections\";s:11:\"description\";s:66:\"The
  detected moderation labels and the time(s) they were detected.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:157:\"If
  the response is truncated, Rekognition Video returns this token that you can use
  in the subsequent request to retrieve the next set of moderation labels. \";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:82:\"If
  the job fails, <code>StatusMessage</code> provides a descriptive error message.\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/VideoMetadata\";s:11:\"description\";s:176:\"Information
  about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from <code>GetContentModeration</code>. \";}}s:4:\"type\";s:6:\"object\";}s:23:\"GetFaceDetectionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:118:\"Unique
  identifier for the face detection job. The <code>JobId</code> is returned from <code>StartFaceDetection</code>.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:206:\"Maximum
  number of results to return per paginated call. The largest value you can specify
  is 1000. If you specify a value greater than 1000, a maximum of 1000 results is
  returned. The default value is 1000.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:214:\"If
  the previous response was incomplete (because there are more faces to retrieve),
  Rekognition Video returns a pagination token in the response. You can use this pagination
  token to retrieve the next set of faces.\";}}s:8:\"required\";a:1:{i:0;s:5:\"JobId\";}s:4:\"type\";s:6:\"object\";}s:24:\"GetFaceDetectionResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"Faces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/FaceDetections\";s:11:\"description\";s:171:\"An
  array of faces detected in the video. Each element contains a detected face's details
  and the time, in milliseconds from the start of the video, the face was detected.
  \";}s:9:\"JobStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VideoJobStatus\";s:11:\"description\";s:45:\"The
  current status of the face detection job.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:146:\"If
  the response is truncated, Amazon Rekognition returns this token that you can use
  in the subsequent request to retrieve the next set of faces. \";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:82:\"If
  the job fails, <code>StatusMessage</code> provides a descriptive error message.\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/VideoMetadata\";s:11:\"description\";s:177:\"Information
  about a video that Rekognition Video analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from a Amazon Rekognition video operation.\";}}s:4:\"type\";s:6:\"object\";}s:20:\"GetFaceSearchRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:122:\"The
  job identifer for the search request. You get the job identifier from an initial
  call to <code>StartFaceSearch</code>.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:206:\"Maximum
  number of results to return per paginated call. The largest value you can specify
  is 1000. If you specify a value greater than 1000, a maximum of 1000 results is
  returned. The default value is 1000.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:232:\"If
  the previous response was incomplete (because there is more search results to retrieve),
  Rekognition Video returns a pagination token in the response. You can use this pagination
  token to retrieve the next set of search results. \";}s:6:\"SortBy\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/FaceSearchSortBy\";s:11:\"description\";s:180:\"Sort
  to use for grouping faces in the response. Use <code>TIMESTAMP</code> to group faces
  by the time that they are recognized. Use <code>INDEX</code> to sort by recognized
  faces. \";}}s:8:\"required\";a:1:{i:0;s:5:\"JobId\";}s:4:\"type\";s:6:\"object\";}s:21:\"GetFaceSearchResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"JobStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VideoJobStatus\";s:11:\"description\";s:42:\"The
  current status of the face search job.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:154:\"If
  the response is truncated, Rekognition Video returns this token that you can use
  in the subsequent request to retrieve the next set of search results. \";}s:7:\"Persons\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/PersonMatches\";s:11:\"description\";s:494:\"An
  array of persons, , in the video whose face(s) match the face(s) in an Amazon Rekognition
  collection. It also includes time information for when persons are matched in the
  video. You specify the input collection in an initial call to <code>StartFaceSearch</code>.
  Each <code>Persons</code> element includes a time the person was matched, face match
  details (<code>FaceMatches</code>) for matching faces in the collection, and person
  information (<code>Person</code>) for the matched person. \";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:82:\"If
  the job fails, <code>StatusMessage</code> provides a descriptive error message.\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/VideoMetadata\";s:11:\"description\";s:172:\"Information
  about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from a Rekognition Video operation. \";}}s:4:\"type\";s:6:\"object\";}s:24:\"GetLabelDetectionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:169:\"Job
  identifier for the label detection operation for which you want results returned.
  You get the job identifer from an initial call to <code>StartlabelDetection</code>.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:206:\"Maximum
  number of results to return per paginated call. The largest value you can specify
  is 1000. If you specify a value greater than 1000, a maximum of 1000 results is
  returned. The default value is 1000.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:217:\"If
  the previous response was incomplete (because there are more labels to retrieve),
  Rekognition Video returns a pagination token in the response. You can use this pagination
  token to retrieve the next set of labels. \";}s:6:\"SortBy\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/LabelDetectionSortBy\";s:11:\"description\";s:344:\"Sort
  to use for elements in the <code>Labels</code> array. Use <code>TIMESTAMP</code>
  to sort array elements by the time labels are detected. Use <code>NAME</code> to
  alphabetically group elements for a label together. Within each label group, the
  array element are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.\";}}s:8:\"required\";a:1:{i:0;s:5:\"JobId\";}s:4:\"type\";s:6:\"object\";}s:25:\"GetLabelDetectionResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"JobStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VideoJobStatus\";s:11:\"description\";s:46:\"The
  current status of the label detection job.\";}s:6:\"Labels\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/LabelDetections\";s:11:\"description\";s:171:\"An
  array of labels detected in the video. Each element contains the detected label
  and the time, in milliseconds from the start of the video, that the label was detected.
  \";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:145:\"If
  the response is truncated, Rekognition Video returns this token that you can use
  in the subsequent request to retrieve the next set of labels.\";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:82:\"If
  the job fails, <code>StatusMessage</code> provides a descriptive error message.\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/VideoMetadata\";s:11:\"description\";s:177:\"Information
  about a video that Rekognition Video analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from a Amazon Rekognition video operation.\";}}s:4:\"type\";s:6:\"object\";}s:24:\"GetPersonTrackingRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:137:\"The
  identifier for a job that tracks persons in a video. You get the <code>JobId</code>
  from a call to <code>StartPersonTracking</code>. \";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:206:\"Maximum
  number of results to return per paginated call. The largest value you can specify
  is 1000. If you specify a value greater than 1000, a maximum of 1000 results is
  returned. The default value is 1000.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:219:\"If
  the previous response was incomplete (because there are more persons to retrieve),
  Rekognition Video returns a pagination token in the response. You can use this pagination
  token to retrieve the next set of persons. \";}s:6:\"SortBy\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/PersonTrackingSortBy\";s:11:\"description\";s:351:\"Sort
  to use for elements in the <code>Persons</code> array. Use <code>TIMESTAMP</code>
  to sort array elements by the time persons are detected. Use <code>INDEX</code>
  to sort by the tracked persons. If you sort by <code>INDEX</code>, the array elements
  for each person are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.\";}}s:8:\"required\";a:1:{i:0;s:5:\"JobId\";}s:4:\"type\";s:6:\"object\";}s:25:\"GetPersonTrackingResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"JobStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VideoJobStatus\";s:11:\"description\";s:46:\"The
  current status of the person tracking job.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:147:\"If
  the response is truncated, Rekognition Video returns this token that you can use
  in the subsequent request to retrieve the next set of persons. \";}s:7:\"Persons\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/PersonDetections\";s:11:\"description\";s:164:\"An
  array of the persons detected in the video and the times they are tracked throughout
  the video. An array element will exist for each time the person is tracked. \";}s:13:\"StatusMessage\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:82:\"If
  the job fails, <code>StatusMessage</code> provides a descriptive error message.\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/VideoMetadata\";s:11:\"description\";s:170:\"Information
  about a video that Rekognition Video analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from a Rekognition Video operation.\";}}s:4:\"type\";s:6:\"object\";}s:36:\"IdempotentParameterMismatchException\";O:8:\"stdClass\":3:{s:11:\"description\";s:180:\"A
  <code>ClientRequestToken</code> input parameter was reused with an operation, but
  at least one of the other input parameters is different from the previous call to
  the operation.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:5:\"Image\";O:8:\"stdClass\":3:{s:11:\"description\";s:1251:\"<p>Provides
  the input image either as bytes or an S3 object.</p> <p>You pass image bytes to
  a Rekognition API operation by using the <code>Bytes</code> property. For example,
  you would use the <code>Bytes</code> property to pass an image loaded from a local
  file system. Image bytes passed by using the <code>Bytes</code> property must be
  base64-encoded. Your code may not need to encode image bytes if you are using an
  AWS SDK to call Rekognition API operations. For more information, see <a>images-bytes</a>.</p>
  <p> You pass images stored in an S3 bucket to a Rekognition API operation by using
  the <code>S3Object</code> property. Images stored in an S3 bucket do not need to
  be base64-encoded.</p> <p>The region for the S3 bucket containing the S3 object
  must match the region you use for Amazon Rekognition operations.</p> <p>If you use
  the Amazon CLI to call Amazon Rekognition operations, passing image bytes using
  the Bytes property is not supported. You must first upload the image to an Amazon
  S3 bucket and then call the operation using the S3Object property.</p> <p>For Amazon
  Rekognition to process an S3 object, the user must have permission to access the
  S3 object. For more information, see <a>manage-access-resource-policies</a>. </p>\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"Bytes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/ImageBlob\";s:11:\"description\";s:32:\"Blob
  of image bytes up to 5 MBs.\";}s:8:\"S3Object\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/S3Object\";s:11:\"description\";s:44:\"Identifies
  an S3 object as the image source.\";}}s:4:\"type\";s:6:\"object\";}s:9:\"ImageBlob\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:5242880;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:7:\"ImageId\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:60:\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\";s:4:\"type\";s:6:\"string\";}s:12:\"ImageQuality\";O:8:\"stdClass\":3:{s:11:\"description\";s:48:\"Identifies
  face image brightness and sharpness. \";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Brightness\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:149:\"Value
  representing brightness of the face. The service returns a value between 0 and 100
  (inclusive). A higher value indicates a brighter face image.\";}s:9:\"Sharpness\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:147:\"Value
  representing sharpness of the face. The service returns a value between 0 and 100
  (inclusive). A higher value indicates a sharper face image.\";}}s:4:\"type\";s:6:\"object\";}s:22:\"ImageTooLargeException\";O:8:\"stdClass\":3:{s:11:\"description\";s:89:\"The
  input image size exceeds the allowed limit. For more information, see <a>limits</a>.
  \";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:17:\"IndexFacesRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":4:{s:12:\"CollectionId\";s:8:\"myphotos\";s:19:\"DetectionAttributes\";a:0:{}s:15:\"ExternalImageId\";s:9:\"myphotoid\";s:5:\"Image\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:6:\"Bucket\";s:8:\"mybucket\";s:4:\"Name\";s:7:\"myphoto\";}}}s:10:\"properties\";O:8:\"stdClass\":4:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:106:\"The
  ID of an existing collection to which you want to add the faces that are detected
  in the input images.\";}s:19:\"DetectionAttributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Attributes\";s:11:\"description\";s:701:\"<p>An
  array of facial attributes that you want to be returned. This can be the default
  list of attributes or all attributes. If you don't specify a value for <code>Attributes</code>
  or if you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset
  of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>,
  <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>,
  all facial attributes are returned but the operation will take longer to complete.</p>
  <p>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a
  logical AND operator to determine which attributes to return (in this case, all
  attributes). </p>\";}s:15:\"ExternalImageId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/ExternalImageId\";s:11:\"description\";s:61:\"ID
  you want to assign to all the faces detected in the image.\";}s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}}s:8:\"required\";a:2:{i:0;s:12:\"CollectionId\";i:1;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:18:\"IndexFacesResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":2:{s:11:\"FaceRecords\";a:2:{i:0;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.33481481671333313;s:4:\"Left\";d:0.31888890266418457;s:3:\"Top\";d:0.49333333969116211;s:5:\"Width\";d:0.25;}s:10:\"Confidence\";d:99.999122619628906;s:6:\"FaceId\";s:36:\"ff43d742-0c13-5d16-a3e8-03d3f58e980b\";s:7:\"ImageId\";s:36:\"465f4e93-763e-51d0-b030-b9667a2d94b1\";}s:10:\"FaceDetail\";O:8:\"stdClass\":5:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.33481481671333313;s:4:\"Left\";d:0.31888890266418457;s:3:\"Top\";d:0.49333333969116211;s:5:\"Width\";d:0.25;}s:10:\"Confidence\";d:99.999122619628906;s:9:\"Landmarks\";a:5:{i:0;O:8:\"stdClass\":3:{s:4:\"Type\";s:7:\"eyeLeft\";s:1:\"X\";d:0.39767646789550781;s:1:\"Y\";d:0.62483459711074829;}i:1;O:8:\"stdClass\":3:{s:4:\"Type\";s:8:\"eyeRight\";s:1:\"X\";d:0.4810936450958252;s:1:\"Y\";d:0.63171172142028809;}i:2;O:8:\"stdClass\":3:{s:4:\"Type\";s:8:\"noseLeft\";s:1:\"X\";d:0.41986238956451416;s:1:\"Y\";d:0.71119403839111328;}i:3;O:8:\"stdClass\":3:{s:4:\"Type\";s:9:\"mouthDown\";s:1:\"X\";d:0.40525302290916443;s:1:\"Y\";d:0.74977010488510132;}i:4;O:8:\"stdClass\":3:{s:4:\"Type\";s:7:\"mouthUp\";s:1:\"X\";d:0.47532489895820618;s:1:\"Y\";d:0.75585496425628662;}}s:4:\"Pose\";O:8:\"stdClass\":3:{s:5:\"Pitch\";d:-9.7136459350585938;s:4:\"Roll\";d:4.7072811126708984;s:3:\"Yaw\";d:-24.438663482666016;}s:7:\"Quality\";O:8:\"stdClass\":2:{s:10:\"Brightness\";d:29.233589172363281;s:9:\"Sharpness\";i:80;}}}i:1;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.32592591643333435;s:4:\"Left\";d:0.51444447040557861;s:3:\"Top\";d:0.15111111104488373;s:5:\"Width\";d:0.24444444477558136;}s:10:\"Confidence\";d:99.999504089355469;s:6:\"FaceId\";s:36:\"8be04dba-4e58-520d-850e-9eae4af70eb2\";s:7:\"ImageId\";s:36:\"465f4e93-763e-51d0-b030-b9667a2d94b1\";}s:10:\"FaceDetail\";O:8:\"stdClass\":5:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.32592591643333435;s:4:\"Left\";d:0.51444447040557861;s:3:\"Top\";d:0.15111111104488373;s:5:\"Width\";d:0.24444444477558136;}s:10:\"Confidence\";d:99.999504089355469;s:9:\"Landmarks\";a:5:{i:0;O:8:\"stdClass\":3:{s:4:\"Type\";s:7:\"eyeLeft\";s:1:\"X\";d:0.60068923234939575;s:1:\"Y\";d:0.290842205286026;}i:1;O:8:\"stdClass\":3:{s:4:\"Type\";s:8:\"eyeRight\";s:1:\"X\";d:0.68081414699554443;s:1:\"Y\";d:0.29609042406082153;}i:2;O:8:\"stdClass\":3:{s:4:\"Type\";s:8:\"noseLeft\";s:1:\"X\";d:0.63953322172164917;s:1:\"Y\";d:0.35225957632064819;}i:3;O:8:\"stdClass\":3:{s:4:\"Type\";s:9:\"mouthDown\";s:1:\"X\";d:0.58920830488204956;s:1:\"Y\";d:0.38689887523651123;}i:4;O:8:\"stdClass\":3:{s:4:\"Type\";s:7:\"mouthUp\";s:1:\"X\";d:0.67456001043319702;s:1:\"Y\";d:0.39412575960159302;}}s:4:\"Pose\";O:8:\"stdClass\":3:{s:5:\"Pitch\";d:-4.683138370513916;s:4:\"Roll\";d:2.1029529571533203;s:3:\"Yaw\";d:6.7166552543640137;}s:7:\"Quality\";O:8:\"stdClass\":2:{s:10:\"Brightness\";d:34.951698303222656;s:9:\"Sharpness\";i:160;}}}}s:21:\"OrientationCorrection\";s:8:\"ROTATE_0\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"FaceModelVersion\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:108:\"Version
  number of the face detection model associated with the input collection (<code>CollectionId</code>).\";}s:11:\"FaceRecords\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/FaceRecordList\";s:11:\"description\";s:114:\"An
  array of faces detected and added to the collection. For more information, see <a>collections-index-faces</a>.
  \";}s:21:\"OrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/OrientationCorrection\";s:11:\"description\";s:729:\"<p>The
  orientation of the input image (counterclockwise direction). If your application
  displays the image, you can use this value to correct image orientation. The bounding
  box coordinates returned in <code>FaceRecords</code> represent face locations before
  the image orientation is corrected. </p> <note> <p>If the input image is in jpeg
  format, it might contain exchangeable image (Exif) metadata. If so, and the Exif
  metadata populates the orientation field, the value of <code>OrientationCorrection</code>
  is null and the bounding box coordinates in <code>FaceRecords</code> represent face
  locations after Exif metadata is used to correct the image orientation. Images in
  .png format don't contain Exif metadata.</p> </note>\";}}s:4:\"type\";s:6:\"object\";}s:19:\"InternalServerError\";O:8:\"stdClass\":3:{s:11:\"description\";s:68:\"Amazon
  Rekognition experienced a service issue. Try your call again.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:27:\"InvalidImageFormatException\";O:8:\"stdClass\":3:{s:11:\"description\";s:44:\"The
  provided image format is not supported. \";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:31:\"InvalidPaginationTokenException\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"Pagination
  token in the request is not valid.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:25:\"InvalidParameterException\";O:8:\"stdClass\":3:{s:11:\"description\";s:102:\"Input
  parameter violated a constraint. Validate your parameter before calling the API
  operation again.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:24:\"InvalidS3ObjectException\";O:8:\"stdClass\":3:{s:11:\"description\";s:78:\"Amazon
  Rekognition is unable to access the S3 object specified in the request.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:5:\"JobId\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:64;s:9:\"minLength\";i:1;s:7:\"pattern\";s:16:\"^[a-zA-Z0-9-_]+$\";s:4:\"type\";s:6:\"string\";}s:6:\"JobTag\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:256;s:9:\"minLength\";i:1;s:7:\"pattern\";s:17:\"[a-zA-Z0-9_.\\-:]+\";s:4:\"type\";s:6:\"string\";}s:14:\"KinesisDataArn\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:49:\"(^arn:([a-z\\d-]+):kinesis:([a-z\\d-]+):\\d{12}:.+$)\";s:4:\"type\";s:6:\"string\";}s:17:\"KinesisDataStream\";O:8:\"stdClass\":3:{s:11:\"description\";s:155:\"The
  Kinesis data stream Amazon Rekognition to which the analysis results of a Amazon
  Rekognition stream processor are streamed. For more information, see .\";s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"Arn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/KinesisDataArn\";s:11:\"description\";s:53:\"ARN
  of the output Amazon Kinesis Data Streams stream.\";}}s:4:\"type\";s:6:\"object\";}s:15:\"KinesisVideoArn\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:54:\"(^arn:([a-z\\d-]+):kinesisvideo:([a-z\\d-]+):\\d{12}:.+$)\";s:4:\"type\";s:6:\"string\";}s:18:\"KinesisVideoStream\";O:8:\"stdClass\":3:{s:11:\"description\";s:138:\"Kinesis
  video stream stream that provides the source streaming video for a Rekognition Video
  stream processor. For more information, see .\";s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"Arn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/KinesisVideoArn\";s:11:\"description\";s:69:\"ARN
  of the Kinesis video stream stream that streams the source video.\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Label\";O:8:\"stdClass\":3:{s:11:\"description\";s:95:\"Structure
  containing details about the detected label, including name, and level of confidence.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:20:\"Level
  of confidence.\";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:31:\"The
  name (label) of the object.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"LabelDetection\";O:8:\"stdClass\":3:{s:11:\"description\";s:113:\"Information
  about a label detected in a video analysis request and the time the label was detected
  in the video. \";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"Label\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Label\";s:11:\"description\";s:33:\"Details
  about the detected label.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:79:\"Time,
  in milliseconds from the start of the video, that the label was detected.\";}}s:4:\"type\";s:6:\"object\";}s:20:\"LabelDetectionSortBy\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:4:\"NAME\";i:1;s:9:\"TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:15:\"LabelDetections\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/LabelDetection\";}s:4:\"type\";s:5:\"array\";}s:6:\"Labels\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Label\";}s:4:\"type\";s:5:\"array\";}s:8:\"Landmark\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"Indicates
  the location of the landmark on the face.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"Type\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/LandmarkType\";s:11:\"description\";s:21:\"Type
  of the landmark.\";}s:1:\"X\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:209:\"x-coordinate
  from the top left of the landmark expressed as the ratio of the width of the image.
  For example, if the images is 700x200 and the x-coordinate of the landmark is at
  350 pixels, this value is 0.5. \";}s:1:\"Y\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:209:\"y-coordinate
  from the top left of the landmark expressed as the ratio of the height of the image.
  For example, if the images is 700x200 and the y-coordinate of the landmark is at
  100 pixels, this value is 0.5.\";}}s:4:\"type\";s:6:\"object\";}s:12:\"LandmarkType\";O:8:\"stdClass\":2:{s:4:\"enum\";a:25:{i:0;s:7:\"eyeLeft\";i:1;s:8:\"eyeRight\";i:2;s:4:\"nose\";i:3;s:9:\"mouthLeft\";i:4;s:10:\"mouthRight\";i:5;s:15:\"leftEyeBrowLeft\";i:6;s:16:\"leftEyeBrowRight\";i:7;s:13:\"leftEyeBrowUp\";i:8;s:16:\"rightEyeBrowLeft\";i:9;s:17:\"rightEyeBrowRight\";i:10;s:14:\"rightEyeBrowUp\";i:11;s:11:\"leftEyeLeft\";i:12;s:12:\"leftEyeRight\";i:13;s:9:\"leftEyeUp\";i:14;s:11:\"leftEyeDown\";i:15;s:12:\"rightEyeLeft\";i:16;s:13:\"rightEyeRight\";i:17;s:10:\"rightEyeUp\";i:18;s:12:\"rightEyeDown\";i:19;s:8:\"noseLeft\";i:20;s:9:\"noseRight\";i:21;s:7:\"mouthUp\";i:22;s:9:\"mouthDown\";i:23;s:9:\"leftPupil\";i:24;s:10:\"rightPupil\";}s:4:\"type\";s:6:\"string\";}s:9:\"Landmarks\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Landmark\";}s:4:\"type\";s:5:\"array\";}s:22:\"LimitExceededException\";O:8:\"stdClass\":3:{s:11:\"description\";s:372:\"An
  Amazon Rekognition service limit was exceeded. For example, if you start too many
  Rekognition Video jobs concurrently, calls to start operations (<code>StartLabelDetection</code>,
  for example) will raise a <code>LimitExceededException</code> exception (HTTP status
  code: 400) until the number of concurrently running jobs is below the Amazon Rekognition
  service limit. \";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:22:\"ListCollectionsRequest\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":0:{}s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/PageSize\";s:11:\"description\";s:44:\"Maximum
  number of collection IDs to return. \";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:44:\"Pagination
  token from the previous response.\";}}s:4:\"type\";s:6:\"object\";}s:23:\"ListCollectionsResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":1:{s:13:\"CollectionIds\";a:1:{i:0;s:8:\"myphotos\";}}s:10:\"properties\";O:8:\"stdClass\":3:{s:13:\"CollectionIds\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/CollectionIdList\";s:11:\"description\";s:27:\"An
  array of collection IDs.\";}s:17:\"FaceModelVersions\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/FaceModelVersionList\";s:11:\"description\";s:284:\"Version
  numbers of the face detection models associated with the collections in the array
  <code>CollectionIds</code>. For example, the value of <code>FaceModelVersions[2]</code>
  is the version number for the face detection model used by the collection in <code>CollectionId[2]</code>.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:158:\"If
  the result is truncated, the response provides a <code>NextToken</code> that you
  can use in the subsequent request to fetch the next set of collection IDs.\";}}s:4:\"type\";s:6:\"object\";}s:16:\"ListFacesRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":2:{s:12:\"CollectionId\";s:8:\"myphotos\";s:10:\"MaxResults\";i:20;}s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:50:\"ID
  of the collection from which to list the faces.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/PageSize\";s:11:\"description\";s:34:\"Maximum
  number of faces to return.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:213:\"If
  the previous response was incomplete (because there is more data to retrieve), Amazon
  Rekognition returns a pagination token in the response. You can use this pagination
  token to retrieve the next set of faces.\";}}s:8:\"required\";a:1:{i:0;s:12:\"CollectionId\";}s:4:\"type\";s:6:\"object\";}s:17:\"ListFacesResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":1:{s:5:\"Faces\";a:11:{i:0;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.18000000715255737;s:4:\"Left\";d:0.55555599927902222;s:3:\"Top\";d:0.33666700124740601;s:5:\"Width\";d:0.23999999463558197;}s:10:\"Confidence\";i:100;s:6:\"FaceId\";s:36:\"1c62e8b5-69a7-5b7d-b3cd-db4338a8a7e7\";s:7:\"ImageId\";s:36:\"147fdf82-7a71-52cf-819b-e786c7b9746e\";}i:1;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.16555599868297577;s:4:\"Left\";d:0.30963000655174255;s:3:\"Top\";d:0.70666700601577759;s:5:\"Width\";d:0.22074100375175476;}s:10:\"Confidence\";i:100;s:6:\"FaceId\";s:36:\"29a75abe-397b-5101-ba4f-706783b2246c\";s:7:\"ImageId\";s:36:\"147fdf82-7a71-52cf-819b-e786c7b9746e\";}i:2;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.3234420120716095;s:4:\"Left\";d:0.32333299517631531;s:3:\"Top\";d:0.5;s:5:\"Width\";d:0.24222199618816376;}s:10:\"Confidence\";d:99.998298645019531;s:6:\"FaceId\";s:36:\"38271d79-7bc2-5efb-b752-398a8d575b85\";s:7:\"ImageId\";s:36:\"d5631190-d039-54e4-b267-abd22c8647c5\";}i:3;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.035555601119995117;s:4:\"Left\";d:0.37388700246810913;s:3:\"Top\";d:0.24777799844741821;s:5:\"Width\";d:0.047477699816226959;}s:10:\"Confidence\";d:99.992103576660156;s:6:\"FaceId\";s:36:\"3b01bef0-c883-5654-ba42-d5ad28b720b3\";s:7:\"ImageId\";s:36:\"812d9f04-86f9-54fc-9275-8d0dcbcb6784\";}i:4;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.053333301097154617;s:4:\"Left\";d:0.29376900196075439;s:3:\"Top\";d:0.35666701197624207;s:5:\"Width\";d:0.071216598153114319;}s:10:\"Confidence\";d:99.999198913574219;s:6:\"FaceId\";s:36:\"4839a608-49d0-566c-8301-509d71b534d1\";s:7:\"ImageId\";s:36:\"812d9f04-86f9-54fc-9275-8d0dcbcb6784\";}i:5;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.3249259889125824;s:4:\"Left\";d:0.5155559778213501;s:3:\"Top\";d:0.15133500099182129;s:5:\"Width\";d:0.24333299696445465;}s:10:\"Confidence\";d:99.999496459960938;s:6:\"FaceId\";s:36:\"70008e50-75e4-55d0-8e80-363fb73b3a14\";s:7:\"ImageId\";s:36:\"d5631190-d039-54e4-b267-abd22c8647c5\";}i:6;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.037777800112962723;s:4:\"Left\";d:0.70029699802398682;s:3:\"Top\";d:0.18777799606323242;s:5:\"Width\";d:0.050445098429918289;}s:10:\"Confidence\";d:99.926399230957031;s:6:\"FaceId\";s:36:\"7f5f88ed-d684-5a88-b0df-01e4a521552b\";s:7:\"ImageId\";s:36:\"812d9f04-86f9-54fc-9275-8d0dcbcb6784\";}i:7;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.055555600672960281;s:4:\"Left\";d:0.13946600258350372;s:3:\"Top\";d:0.46333301067352295;s:5:\"Width\";d:0.072700299322605133;}s:10:\"Confidence\";d:99.994697570800781;s:6:\"FaceId\";s:36:\"895b4e2c-81de-5902-a4bd-d1792bda00b2\";s:7:\"ImageId\";s:36:\"812d9f04-86f9-54fc-9275-8d0dcbcb6784\";}i:8;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.32592600584030151;s:4:\"Left\";d:0.51444399356842041;s:3:\"Top\";d:0.15111100673675537;s:5:\"Width\";d:0.24444399774074554;}s:10:\"Confidence\";d:99.999496459960938;s:6:\"FaceId\";s:36:\"8be04dba-4e58-520d-850e-9eae4af70eb2\";s:7:\"ImageId\";s:36:\"465f4e93-763e-51d0-b030-b9667a2d94b1\";}i:9;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.18888899683952332;s:4:\"Left\";d:0.37833800911903381;s:3:\"Top\";d:0.23555600643157959;s:5:\"Width\";d:0.25222599506378174;}s:10:\"Confidence\";d:99.999900817871094;s:6:\"FaceId\";s:36:\"908544ad-edc3-59df-8faf-6a87cc256cf5\";s:7:\"ImageId\";s:36:\"3c731605-d772-541a-a5e7-0375dbc68a07\";}i:10;O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.33481499552726746;s:4:\"Left\";d:0.31888899207115173;s:3:\"Top\";d:0.49333301186561584;s:5:\"Width\";d:0.25;}s:10:\"Confidence\";d:99.999099731445312;s:6:\"FaceId\";s:36:\"ff43d742-0c13-5d16-a3e8-03d3f58e980b\";s:7:\"ImageId\";s:36:\"465f4e93-763e-51d0-b030-b9667a2d94b1\";}}}s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"FaceModelVersion\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:108:\"Version
  number of the face detection model associated with the input collection (<code>CollectionId</code>).\";}s:5:\"Faces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/FaceList\";s:11:\"description\";s:39:\"An
  array of <code>Face</code> objects. \";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:145:\"If
  the response is truncated, Amazon Rekognition returns this token that you can use
  in the subsequent request to retrieve the next set of faces.\";}}s:4:\"type\";s:6:\"object\";}s:27:\"ListStreamProcessorsRequest\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/MaxResults\";s:11:\"description\";s:111:\"Maximum
  number of stream processors you want Rekognition Video to return in the response.
  The default is 1000. \";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:239:\"If
  the previous response was incomplete (because there are more stream processors to
  retrieve), Rekognition Video returns a pagination token in the response. You can
  use this pagination token to retrieve the next set of stream processors. \";}}s:4:\"type\";s:6:\"object\";}s:28:\"ListStreamProcessorsResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/PaginationToken\";s:11:\"description\";s:157:\"If
  the response is truncated, Rekognition Video returns this token that you can use
  in the subsequent request to retrieve the next set of stream processors. \";}s:16:\"StreamProcessors\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorList\";s:11:\"description\";s:48:\"List
  of stream processors that you have created.\";}}s:4:\"type\";s:6:\"object\";}s:8:\"MaxFaces\";O:8:\"stdClass\":3:{s:7:\"maximum\";i:4096;s:7:\"minimum\";i:1;s:4:\"type\";s:7:\"integer\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:7:\"minimum\";i:1;s:4:\"type\";s:7:\"integer\";}s:15:\"ModerationLabel\";O:8:\"stdClass\":3:{s:11:\"description\";s:209:\"Provides
  information about a single type of moderated content found in an image or video.
  Each type of moderated content has a label within a hierarchical taxonomy. For more
  information, see <a>moderation</a>.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:316:\"<p>Specifies
  the confidence that Amazon Rekognition has that the label has been correctly identified.</p>
  <p>If you don't specify the <code>MinConfidence</code> parameter in the call to
  <code>DetectModerationLabels</code>, the operation returns labels with a confidence
  value greater than or equal to 50 percent.</p>\";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:61:\"The
  label name for the type of content detected in the image.\";}s:10:\"ParentName\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:110:\"The
  name for the parent label. Labels at the top-level of the hierarchy have the parent
  label <code>\"\"</code>.\";}}s:4:\"type\";s:6:\"object\";}s:16:\"ModerationLabels\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/ModerationLabel\";}s:4:\"type\";s:5:\"array\";}s:9:\"MouthOpen\";O:8:\"stdClass\":3:{s:11:\"description\";s:102:\"Indicates
  whether or not the mouth on the face is open, and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:74:\"Boolean
  value that indicates whether the mouth on the face is open or not.\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Mustache\";O:8:\"stdClass\":3:{s:11:\"description\";s:96:\"Indicates
  whether or not the face has a mustache, and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:66:\"Boolean
  value that indicates whether the face has mustache or not.\";}}s:4:\"type\";s:6:\"object\";}s:19:\"NotificationChannel\";O:8:\"stdClass\":4:{s:11:\"description\";s:179:\"The
  Amazon Simple Notification Service topic to which Amazon Rekognition publishes the
  completion status of a video analysis operation. For more information, see <a>api-video</a>.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"RoleArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/RoleArn\";s:11:\"description\";s:101:\"The
  ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon
  SNS topic. \";}s:11:\"SNSTopicArn\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/SNSTopicArn\";s:11:\"description\";s:80:\"The
  Amazon SNS topic to which Amazon Rekognition to posts the completion status.\";}}s:8:\"required\";a:2:{i:0;s:11:\"SNSTopicArn\";i:1;s:7:\"RoleArn\";}s:4:\"type\";s:6:\"object\";}s:21:\"OrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"enum\";a:4:{i:0;s:8:\"ROTATE_0\";i:1;s:9:\"ROTATE_90\";i:2;s:10:\"ROTATE_180\";i:3;s:10:\"ROTATE_270\";}s:4:\"type\";s:6:\"string\";}s:8:\"PageSize\";O:8:\"stdClass\":3:{s:7:\"maximum\";i:4096;s:7:\"minimum\";i:0;s:4:\"type\";s:7:\"integer\";}s:15:\"PaginationToken\";O:8:\"stdClass\":2:{s:9:\"maxLength\";i:255;s:4:\"type\";s:6:\"string\";}s:7:\"Percent\";O:8:\"stdClass\":4:{s:6:\"format\";s:5:\"float\";s:7:\"maximum\";i:100;s:7:\"minimum\";i:0;s:4:\"type\";s:6:\"number\";}s:12:\"PersonDetail\";O:8:\"stdClass\":3:{s:11:\"description\";s:60:\"Details
  about a person detected in a video analysis request.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"BoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:40:\"Bounding
  box around the detected person.\";}s:4:\"Face\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/FaceDetail\";s:11:\"description\";s:37:\"Face
  details for the detected person.\";}s:5:\"Index\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/PersonIndex\";s:11:\"description\";s:163:\"Identifier
  for the person detected person within a video. Use to keep track of the person throughout
  the video. The identifier is not stored by Amazon Rekognition.\";}}s:4:\"type\";s:6:\"object\";}s:15:\"PersonDetection\";O:8:\"stdClass\":3:{s:11:\"description\";s:276:\"Details
  and tracking information for a single time a person is tracked in a video. Amazon
  Rekognition operations that track persons return an array of <code>PersonDetection</code>
  objects with elements for each time a person is tracked in a video. For more information,
  see . \";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"Person\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/PersonDetail\";s:11:\"description\";s:42:\"Details
  about a person tracked in a video.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:83:\"The
  time, in milliseconds from the start of the video, that the person was tracked.\";}}s:4:\"type\";s:6:\"object\";}s:16:\"PersonDetections\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/PersonDetection\";}s:4:\"type\";s:5:\"array\";}s:11:\"PersonIndex\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"PersonMatch\";O:8:\"stdClass\":3:{s:11:\"description\";s:345:\"Information
  about a person whose face matches a face(s) in a Amazon Rekognition collection.
  Includes information about the faces in the Amazon Rekognition collection (, information
  about the person (<a>PersonDetail</a>) and the timestamp for when the person was
  detected in a video. An array of <code>PersonMatch</code> objects is returned by
  . \";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"FaceMatches\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/FaceMatchList\";s:11:\"description\";s:97:\"Information
  about the faces in the input collection that match the face of a person in the video.\";}s:6:\"Person\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/PersonDetail\";s:11:\"description\";s:37:\"Information
  about the matched person.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:100:\"The
  time, in milliseconds from the beginning of the video, that the person was matched
  in the video.\";}}s:4:\"type\";s:6:\"object\";}s:13:\"PersonMatches\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/PersonMatch\";}s:4:\"type\";s:5:\"array\";}s:20:\"PersonTrackingSortBy\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:5:\"INDEX\";i:1;s:9:\"TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:5:\"Point\";O:8:\"stdClass\":3:{s:11:\"description\";s:464:\"<p>The
  X and Y coordinates of a point on an image. The X and Y values returned are ratios
  of the overall image size. For example, if the input image is 700x200 and the operation
  returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on
  the image.</p> <p>An array of <code>Point</code> objects, <code>Polygon</code>,
  is returned by . <code>Polygon</code> represents a fine-grained polygon around detected
  text. For more information, see . </p>\";s:10:\"properties\";O:8:\"stdClass\":2:{s:1:\"X\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:68:\"The
  value of the X coordinate for a point on a <code>Polygon</code>.\";}s:1:\"Y\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:68:\"The
  value of the Y coordinate for a point on a <code>Polygon</code>.\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Polygon\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Point\";}s:4:\"type\";s:5:\"array\";}s:4:\"Pose\";O:8:\"stdClass\":3:{s:11:\"description\";s:73:\"Indicates
  the pose of the face as determined by its pitch, roll, and yaw.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"Pitch\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Degree\";s:11:\"description\";s:55:\"Value
  representing the face rotation on the pitch axis.\";}s:4:\"Roll\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Degree\";s:11:\"description\";s:54:\"Value
  representing the face rotation on the roll axis.\";}s:3:\"Yaw\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Degree\";s:11:\"description\";s:53:\"Value
  representing the face rotation on the yaw axis.\";}}s:4:\"type\";s:6:\"object\";}s:38:\"ProvisionedThroughputExceededException\";O:8:\"stdClass\":3:{s:11:\"description\";s:118:\"The
  number of requests exceeded your throughput limit. If you want to increase this
  limit, contact Amazon Rekognition.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:27:\"RecognizeCelebritiesRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}}s:8:\"required\";a:1:{i:0;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:28:\"RecognizeCelebritiesResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:14:\"CelebrityFaces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/CelebrityList\";s:11:\"description\";s:119:\"Details
  about each celebrity found in the image. Amazon Rekognition can detect a maximum
  of 15 celebrities in an image.\";}s:21:\"OrientationCorrection\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/OrientationCorrection\";s:11:\"description\";s:860:\"<p>The
  orientation of the input image (counterclockwise direction). If your application
  displays the image, you can use this value to correct the orientation. The bounding
  box coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code>
  represent face locations before the image orientation is corrected. </p> <note>
  <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif)
  metadata that includes the image's orientation. If so, and the Exif metadata for
  the input image populates the orientation field, the value of <code>OrientationCorrection</code>
  is null and the <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> bounding
  box coordinates represent face locations after Exif metadata is used to correct
  the image orientation. Images in .png format don't contain Exif metadata. </p> </note>\";}s:17:\"UnrecognizedFaces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/ComparedFaceList\";s:11:\"description\";s:50:\"Details
  about each unrecognized face in the image.\";}}s:4:\"type\";s:6:\"object\";}s:19:\"RekognitionUniqueId\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:12:\"[0-9A-Za-z]*\";s:4:\"type\";s:6:\"string\";}s:30:\"ResourceAlreadyExistsException\";O:8:\"stdClass\":3:{s:11:\"description\";s:50:\"A
  collection with the specified ID already exists.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:22:\"ResourceInUseException\";O:8:\"stdClass\":3:{s:11:\"description\";s:4:\"<p/>\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:25:\"ResourceNotFoundException\";O:8:\"stdClass\":3:{s:11:\"description\";s:56:\"The
  collection specified in the request cannot be found.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:7:\"RoleArn\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:48:\"arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+\";s:4:\"type\";s:6:\"string\";}s:8:\"S3Bucket\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:255;s:9:\"minLength\";i:3;s:7:\"pattern\";s:17:\"[0-9A-Za-z\\.\\-_]*\";s:4:\"type\";s:6:\"string\";}s:8:\"S3Object\";O:8:\"stdClass\":3:{s:11:\"description\";s:354:\"<p>Provides
  the S3 bucket name and object name.</p> <p>The region for the S3 bucket containing
  the S3 object must match the region you use for Amazon Rekognition operations.</p>
  <p>For Amazon Rekognition to process an S3 object, the user must have permission
  to access the S3 object. For more information, see <a>manage-access-resource-policies</a>.
  </p>\";s:10:\"properties\";O:8:\"stdClass\":3:{s:6:\"Bucket\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/S3Bucket\";s:11:\"description\";s:22:\"Name
  of the S3 bucket.\";}s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/S3ObjectName\";s:11:\"description\";s:19:\"S3
  object key name.\";}s:7:\"Version\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/S3ObjectVersion\";s:11:\"description\";s:73:\"If
  the bucket is versioning enabled, you can specify the object version. \";}}s:4:\"type\";s:6:\"object\";}s:12:\"S3ObjectName\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:1024;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:15:\"S3ObjectVersion\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:1024;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:11:\"SNSTopicArn\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:28:\"(^arn:aws:sns:.*:\\w{12}:.+$)\";s:4:\"type\";s:6:\"string\";}s:25:\"SearchFacesByImageRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":4:{s:12:\"CollectionId\";s:8:\"myphotos\";s:18:\"FaceMatchThreshold\";i:95;s:5:\"Image\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:6:\"Bucket\";s:8:\"mybucket\";s:4:\"Name\";s:7:\"myphoto\";}}s:8:\"MaxFaces\";i:5;}s:10:\"properties\";O:8:\"stdClass\":4:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:31:\"ID
  of the collection to search.\";}s:18:\"FaceMatchThreshold\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:156:\"(Optional)
  Specifies the minimum confidence in the face match to return. For example, don't
  return any matches where confidence in matches is less than 70%.\";}s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:172:\"The
  input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call
  Amazon Rekognition operations, passing base64-encoded image bytes is not supported.
  \";}s:8:\"MaxFaces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/MaxFaces\";s:11:\"description\";s:126:\"Maximum
  number of faces to return. The operation returns the maximum number of faces with
  the highest confidence in the match.\";}}s:8:\"required\";a:2:{i:0;s:12:\"CollectionId\";i:1;s:5:\"Image\";}s:4:\"type\";s:6:\"object\";}s:26:\"SearchFacesByImageResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":3:{s:11:\"FaceMatches\";a:1:{i:0;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.3234420120716095;s:4:\"Left\";d:0.32333299517631531;s:3:\"Top\";d:0.5;s:5:\"Width\";d:0.24222199618816376;}s:10:\"Confidence\";d:99.998298645019531;s:6:\"FaceId\";s:36:\"38271d79-7bc2-5efb-b752-398a8d575b85\";s:7:\"ImageId\";s:36:\"d5631190-d039-54e4-b267-abd22c8647c5\";}s:10:\"Similarity\";d:99.970367431640625;}}s:23:\"SearchedFaceBoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.33481481671333313;s:4:\"Left\";d:0.31888890266418457;s:3:\"Top\";d:0.49333333969116211;s:5:\"Width\";d:0.25;}s:22:\"SearchedFaceConfidence\";d:99.999122619628906;}s:10:\"properties\";O:8:\"stdClass\":4:{s:11:\"FaceMatches\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/FaceMatchList\";s:11:\"description\";s:84:\"An
  array of faces that match the input face, along with the confidence in the match.\";}s:16:\"FaceModelVersion\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:108:\"Version
  number of the face detection model associated with the input collection (<code>CollectionId</code>).\";}s:23:\"SearchedFaceBoundingBox\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/BoundingBox\";s:11:\"description\";s:96:\"The
  bounding box around the face in the input image that Amazon Rekognition used for
  the search.\";}s:22:\"SearchedFaceConfidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:87:\"The
  level of confidence that the <code>searchedFaceBoundingBox</code>, contains a face.\";}}s:4:\"type\";s:6:\"object\";}s:18:\"SearchFacesRequest\";O:8:\"stdClass\":4:{s:7:\"example\";O:8:\"stdClass\":4:{s:12:\"CollectionId\";s:8:\"myphotos\";s:6:\"FaceId\";s:36:\"70008e50-75e4-55d0-8e80-363fb73b3a14\";s:18:\"FaceMatchThreshold\";i:90;s:8:\"MaxFaces\";i:10;}s:10:\"properties\";O:8:\"stdClass\":4:{s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:41:\"ID
  of the collection the face belongs to.\";}s:6:\"FaceId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/FaceId\";s:11:\"description\";s:51:\"ID
  of a face to find matches for in the collection.\";}s:18:\"FaceMatchThreshold\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:161:\"Optional
  value specifying the minimum confidence in the face match to return. For example,
  don't return any matches where confidence in matches is less than 70%.\";}s:8:\"MaxFaces\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/MaxFaces\";s:11:\"description\";s:126:\"Maximum
  number of faces to return. The operation returns the maximum number of faces with
  the highest confidence in the match.\";}}s:8:\"required\";a:2:{i:0;s:12:\"CollectionId\";i:1;s:6:\"FaceId\";}s:4:\"type\";s:6:\"object\";}s:19:\"SearchFacesResponse\";O:8:\"stdClass\":3:{s:7:\"example\";O:8:\"stdClass\":2:{s:11:\"FaceMatches\";a:3:{i:0;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.32592600584030151;s:4:\"Left\";d:0.51444399356842041;s:3:\"Top\";d:0.15111100673675537;s:5:\"Width\";d:0.24444399774074554;}s:10:\"Confidence\";d:99.999496459960938;s:6:\"FaceId\";s:36:\"8be04dba-4e58-520d-850e-9eae4af70eb2\";s:7:\"ImageId\";s:36:\"465f4e93-763e-51d0-b030-b9667a2d94b1\";}s:10:\"Similarity\";d:99.972221374511719;}i:1;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.16555599868297577;s:4:\"Left\";d:0.30963000655174255;s:3:\"Top\";d:0.70666700601577759;s:5:\"Width\";d:0.22074100375175476;}s:10:\"Confidence\";i:100;s:6:\"FaceId\";s:36:\"29a75abe-397b-5101-ba4f-706783b2246c\";s:7:\"ImageId\";s:36:\"147fdf82-7a71-52cf-819b-e786c7b9746e\";}s:10:\"Similarity\";d:97.041549682617188;}i:2;O:8:\"stdClass\":2:{s:4:\"Face\";O:8:\"stdClass\":4:{s:11:\"BoundingBox\";O:8:\"stdClass\":4:{s:6:\"Height\";d:0.18888899683952332;s:4:\"Left\";d:0.37833800911903381;s:3:\"Top\";d:0.23555600643157959;s:5:\"Width\";d:0.25222599506378174;}s:10:\"Confidence\";d:99.999900817871094;s:6:\"FaceId\";s:36:\"908544ad-edc3-59df-8faf-6a87cc256cf5\";s:7:\"ImageId\";s:36:\"3c731605-d772-541a-a5e7-0375dbc68a07\";}s:10:\"Similarity\";d:95.945205688476562;}}s:14:\"SearchedFaceId\";s:36:\"70008e50-75e4-55d0-8e80-363fb73b3a14\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"FaceMatches\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/FaceMatchList\";s:11:\"description\";s:86:\"An
  array of faces that matched the input face, along with the confidence in the match.\";}s:16:\"FaceModelVersion\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:108:\"Version
  number of the face detection model associated with the input collection (<code>CollectionId</code>).\";}s:14:\"SearchedFaceId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/FaceId\";s:11:\"description\";s:61:\"ID
  of the face that was searched for matches in a collection.\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Smile\";O:8:\"stdClass\":3:{s:11:\"description\";s:92:\"Indicates
  whether or not the face is smiling, and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:64:\"Boolean
  value that indicates whether the face is smiling or not.\";}}s:4:\"type\";s:6:\"object\";}s:32:\"StartCelebrityRecognitionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:18:\"ClientRequestToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/ClientRequestToken\";s:11:\"description\";s:289:\"Idempotent
  token used to identify the start request. If you use the same token with multiple
  <code>StartCelebrityRecognition</code> requests, the same <code>JobId</code> is
  returned. Use <code>ClientRequestToken</code> to prevent the same job from being
  accidently started more than once. \";}s:6:\"JobTag\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/JobTag\";s:11:\"description\";s:134:\"Unique
  identifier you specify to identify the job in the completion status published to
  the Amazon Simple Notification Service topic. \";}s:19:\"NotificationChannel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/NotificationChannel\";s:11:\"description\";s:131:\"The
  Amazon SNS topic ARN that you want Rekognition Video to publish the completion status
  of the celebrity recognition analysis to.\";}s:5:\"Video\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Video\";s:11:\"description\";s:102:\"The
  video in which you want to recognize celebrities. The video must be stored in an
  Amazon S3 bucket.\";}}s:8:\"required\";a:1:{i:0;s:5:\"Video\";}s:4:\"type\";s:6:\"object\";}s:33:\"StartCelebrityRecognitionResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:163:\"The
  identifier for the celebrity recognition analysis job. Use <code>JobId</code> to
  identify the job in a subsequent call to <code>GetCelebrityRecognition</code>.\";}}s:4:\"type\";s:6:\"object\";}s:29:\"StartContentModerationRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":5:{s:18:\"ClientRequestToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/ClientRequestToken\";s:11:\"description\";s:286:\"Idempotent
  token used to identify the start request. If you use the same token with multiple
  <code>StartContentModeration</code> requests, the same <code>JobId</code> is returned.
  Use <code>ClientRequestToken</code> to prevent the same job from being accidently
  started more than once. \";}s:6:\"JobTag\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/JobTag\";s:11:\"description\";s:134:\"Unique
  identifier you specify to identify the job in the completion status published to
  the Amazon Simple Notification Service topic. \";}s:13:\"MinConfidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:399:\"Specifies
  the minimum confidence that Amazon Rekognition must have in order to return a moderated
  content label. Confidence represents how certain Amazon Rekognition is that the
  moderated content is correctly identified. 0 is the lowest confidence. 100 is the
  highest confidence. Amazon Rekognition doesn't return any moderated content labels
  with a confidence level lower than this specified value.\";}s:19:\"NotificationChannel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/NotificationChannel\";s:11:\"description\";s:128:\"The
  Amazon SNS topic ARN that you want Rekognition Video to publish the completion status
  of the content moderation analysis to.\";}s:5:\"Video\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Video\";s:11:\"description\";s:97:\"The
  video in which you want to moderate content. The video must be stored in an Amazon
  S3 bucket.\";}}s:8:\"required\";a:1:{i:0;s:5:\"Video\";}s:4:\"type\";s:6:\"object\";}s:30:\"StartContentModerationResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:157:\"The
  identifier for the content moderation analysis job. Use <code>JobId</code> to identify
  the job in a subsequent call to <code>GetContentModeration</code>.\";}}s:4:\"type\";s:6:\"object\";}s:25:\"StartFaceDetectionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":5:{s:18:\"ClientRequestToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/ClientRequestToken\";s:11:\"description\";s:282:\"Idempotent
  token used to identify the start request. If you use the same token with multiple
  <code>StartFaceDetection</code> requests, the same <code>JobId</code> is returned.
  Use <code>ClientRequestToken</code> to prevent the same job from being accidently
  started more than once. \";}s:14:\"FaceAttributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/FaceAttributes\";s:11:\"description\";s:250:\"<p>The
  face attributes you want returned.</p> <p> <code>DEFAULT</code> - The following
  subset of facial attributes are returned: BoundingBox, Confidence, Pose, Quality
  and Landmarks. </p> <p> <code>ALL</code> - All facial attributes are returned.</p>\";}s:6:\"JobTag\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/JobTag\";s:11:\"description\";s:134:\"Unique
  identifier you specify to identify the job in the completion status published to
  the Amazon Simple Notification Service topic. \";}s:19:\"NotificationChannel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/NotificationChannel\";s:11:\"description\";s:133:\"The
  ARN of the Amazon SNS topic to which you want Rekognition Video to publish the completion
  status of the face detection operation.\";}s:5:\"Video\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Video\";s:11:\"description\";s:93:\"The
  video in which you want to detect faces. The video must be stored in an Amazon S3
  bucket.\";}}s:8:\"required\";a:1:{i:0;s:5:\"Video\";}s:4:\"type\";s:6:\"object\";}s:26:\"StartFaceDetectionResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:140:\"The
  identifier for the face detection job. Use <code>JobId</code> to identify the job
  in a subsequent call to <code>GetFaceDetection</code>.\";}}s:4:\"type\";s:6:\"object\";}s:22:\"StartFaceSearchRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":6:{s:18:\"ClientRequestToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/ClientRequestToken\";s:11:\"description\";s:279:\"Idempotent
  token used to identify the start request. If you use the same token with multiple
  <code>StartFaceSearch</code> requests, the same <code>JobId</code> is returned.
  Use <code>ClientRequestToken</code> to prevent the same job from being accidently
  started more than once. \";}s:12:\"CollectionId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/CollectionId\";s:11:\"description\";s:68:\"ID
  of the collection that contains the faces you want to search for.\";}s:18:\"FaceMatchThreshold\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:138:\"The
  minimum confidence in the person match to return. For example, don't return any
  matches where confidence in matches is less than 70%. \";}s:6:\"JobTag\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/JobTag\";s:11:\"description\";s:134:\"Unique
  identifier you specify to identify the job in the completion status published to
  the Amazon Simple Notification Service topic. \";}s:19:\"NotificationChannel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/NotificationChannel\";s:11:\"description\";s:116:\"The
  ARN of the Amazon SNS topic to which you want Rekognition Video to publish the completion
  status of the search. \";}s:5:\"Video\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Video\";s:11:\"description\";s:79:\"The
  video you want to search. The video must be stored in an Amazon S3 bucket. \";}}s:8:\"required\";a:2:{i:0;s:5:\"Video\";i:1;s:12:\"CollectionId\";}s:4:\"type\";s:6:\"object\";}s:23:\"StartFaceSearchResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:130:\"The
  identifier for the search job. Use <code>JobId</code> to identify the job in a subsequent
  call to <code>GetFaceSearch</code>. \";}}s:4:\"type\";s:6:\"object\";}s:26:\"StartLabelDetectionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":5:{s:18:\"ClientRequestToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/ClientRequestToken\";s:11:\"description\";s:283:\"Idempotent
  token used to identify the start request. If you use the same token with multiple
  <code>StartLabelDetection</code> requests, the same <code>JobId</code> is returned.
  Use <code>ClientRequestToken</code> to prevent the same job from being accidently
  started more than once. \";}s:6:\"JobTag\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/JobTag\";s:11:\"description\";s:134:\"Unique
  identifier you specify to identify the job in the completion status published to
  the Amazon Simple Notification Service topic. \";}s:13:\"MinConfidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:507:\"<p>Specifies
  the minimum confidence that Rekognition Video must have in order to return a detected
  label. Confidence represents how certain Amazon Rekognition is that a label is correctly
  identified.0 is the lowest confidence. 100 is the highest confidence. Rekognition
  Video doesn't return any labels with a confidence level lower than this specified
  value.</p> <p>If you don't specify <code>MinConfidence</code>, the operation returns
  labels with confidence values greater than or equal to 50 percent.</p>\";}s:19:\"NotificationChannel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/NotificationChannel\";s:11:\"description\";s:122:\"The
  Amazon SNS topic ARN you want Rekognition Video to publish the completion status
  of the label detection operation to. \";}s:5:\"Video\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Video\";s:11:\"description\";s:94:\"The
  video in which you want to detect labels. The video must be stored in an Amazon
  S3 bucket.\";}}s:8:\"required\";a:1:{i:0;s:5:\"Video\";}s:4:\"type\";s:6:\"object\";}s:27:\"StartLabelDetectionResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:143:\"The
  identifier for the label detection job. Use <code>JobId</code> to identify the job
  in a subsequent call to <code>GetLabelDetection</code>. \";}}s:4:\"type\";s:6:\"object\";}s:26:\"StartPersonTrackingRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:18:\"ClientRequestToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/ClientRequestToken\";s:11:\"description\";s:283:\"Idempotent
  token used to identify the start request. If you use the same token with multiple
  <code>StartPersonTracking</code> requests, the same <code>JobId</code> is returned.
  Use <code>ClientRequestToken</code> to prevent the same job from being accidently
  started more than once. \";}s:6:\"JobTag\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/JobTag\";s:11:\"description\";s:134:\"Unique
  identifier you specify to identify the job in the completion status published to
  the Amazon Simple Notification Service topic. \";}s:19:\"NotificationChannel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/NotificationChannel\";s:11:\"description\";s:122:\"The
  Amazon SNS topic ARN you want Rekognition Video to publish the completion status
  of the people detection operation to.\";}s:5:\"Video\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Video\";s:11:\"description\";s:94:\"The
  video in which you want to detect people. The video must be stored in an Amazon
  S3 bucket.\";}}s:8:\"required\";a:1:{i:0;s:5:\"Video\";}s:4:\"type\";s:6:\"object\";}s:27:\"StartPersonTrackingResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"JobId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/JobId\";s:11:\"description\";s:143:\"The
  identifier for the person detection job. Use <code>JobId</code> to identify the
  job in a subsequent call to <code>GetPersonTracking</code>.\";}}s:4:\"type\";s:6:\"object\";}s:27:\"StartStreamProcessorRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:53:\"The
  name of the stream processor to start processing.\";}}s:8:\"required\";a:1:{i:0;s:4:\"Name\";}s:4:\"type\";s:6:\"object\";}s:28:\"StartStreamProcessorResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:13:\"StatusMessage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:26:\"StopStreamProcessorRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:43:\"The
  name of a stream processor created by .\";}}s:8:\"required\";a:1:{i:0;s:4:\"Name\";}s:4:\"type\";s:6:\"object\";}s:27:\"StopStreamProcessorResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:15:\"StreamProcessor\";O:8:\"stdClass\":3:{s:11:\"description\";s:319:\"An
  object that recognizes faces in a streaming video. An Amazon Rekognition stream
  processor is created by a call to . The request parameters for <code>CreateStreamProcessor</code>
  describe the Kinesis video stream source for the streaming video, face recognition
  parameters, and where to stream the analysis resullts. \";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Name\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StreamProcessorName\";s:11:\"description\";s:49:\"Name
  of the Amazon Rekognition stream processor. \";}s:6:\"Status\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/StreamProcessorStatus\";s:11:\"description\";s:58:\"Current
  status of the Amazon Rekognition stream processor.\";}}s:4:\"type\";s:6:\"object\";}s:18:\"StreamProcessorArn\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:66:\"(^arn:[a-z\\d-]+:rekognition:[a-z\\d-]+:\\d{12}:streamprocessor\\/.+$)\";s:4:\"type\";s:6:\"string\";}s:20:\"StreamProcessorInput\";O:8:\"stdClass\":3:{s:11:\"description\";s:46:\"Information
  about the source streaming video. \";s:10:\"properties\";O:8:\"stdClass\":1:{s:18:\"KinesisVideoStream\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/KinesisVideoStream\";s:11:\"description\";s:69:\"The
  Kinesis video stream input stream for the source streaming video.\";}}s:4:\"type\";s:6:\"object\";}s:19:\"StreamProcessorList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StreamProcessor\";}s:4:\"type\";s:5:\"array\";}s:19:\"StreamProcessorName\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:128;s:9:\"minLength\";i:1;s:7:\"pattern\";s:16:\"[a-zA-Z0-9_.\\-]+\";s:4:\"type\";s:6:\"string\";}s:21:\"StreamProcessorOutput\";O:8:\"stdClass\":3:{s:11:\"description\";s:171:\"Information
  about the Amazon Kinesis Data Streams stream to which a Rekognition Video stream
  processor streams the results of a video analysis. For more information, see .\";s:10:\"properties\";O:8:\"stdClass\":1:{s:17:\"KinesisDataStream\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/KinesisDataStream\";s:11:\"description\";s:117:\"The
  Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor
  streams the analysis results.\";}}s:4:\"type\";s:6:\"object\";}s:23:\"StreamProcessorSettings\";O:8:\"stdClass\":3:{s:11:\"description\";s:112:\"Input
  parameters used to recognize faces in a streaming video analyzed by a Amazon Rekognition
  stream processor.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"FaceSearch\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/FaceSearchSettings\";s:11:\"description\";s:50:\"Face
  search settings to use on a streaming video. \";}}s:4:\"type\";s:6:\"object\";}s:21:\"StreamProcessorStatus\";O:8:\"stdClass\":2:{s:4:\"enum\";a:5:{i:0;s:7:\"STOPPED\";i:1;s:8:\"STARTING\";i:2;s:7:\"RUNNING\";i:3;s:6:\"FAILED\";i:4;s:8:\"STOPPING\";}s:4:\"type\";s:6:\"string\";}s:6:\"String\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"Sunglasses\";O:8:\"stdClass\":3:{s:11:\"description\";s:103:\"Indicates
  whether or not the face is wearing sunglasses, and the confidence level in the determination.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:41:\"Level
  of confidence in the determination.\";}s:5:\"Value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:75:\"Boolean
  value that indicates whether the face is wearing sunglasses or not.\";}}s:4:\"type\";s:6:\"object\";}s:13:\"TextDetection\";O:8:\"stdClass\":3:{s:11:\"description\";s:510:\"<p>Information
  about a word or line of text detected by .</p> <p>The <code>DetectedText</code>
  field contains the text that Amazon Rekognition detected in the image. </p> <p>Every
  word and line has an identifier (<code>Id</code>). Each word belongs to a line and
  has a parent identifier (<code>ParentId</code>) that identifies the line of text
  in which the word appears. The word <code>Id</code> is also an index for the word
  within a line of words. </p> <p>For more information, see <a>text-detection</a>.</p>\";s:10:\"properties\";O:8:\"stdClass\":6:{s:10:\"Confidence\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Percent\";s:11:\"description\";s:145:\"The
  confidence that Amazon Rekognition has in the accuracy of the detected text and
  the accuracy of the geometry points around the detected text.\";}s:12:\"DetectedText\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:59:\"The
  word or line of text recognized by Amazon Rekognition. \";}s:8:\"Geometry\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Geometry\";s:11:\"description\";s:178:\"The
  location of the detected text on the image. Includes an axis aligned coarse bounding
  box surrounding the text and a finer grain polygon for more accurate spatial information.\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:114:\"The
  identifier for the detected text. The identifier is only unique for a single call
  to <code>DetectText</code>. \";}s:8:\"ParentId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/UInteger\";s:11:\"description\";s:196:\"The
  Parent identifier for the detected text identified by the value of <code>ID</code>.
  If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code>
  is <code>Null</code>. \";}s:4:\"Type\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/TextTypes\";s:11:\"description\";s:35:\"The
  type of text that was detected.\";}}s:4:\"type\";s:6:\"object\";}s:17:\"TextDetectionList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/TextDetection\";}s:4:\"type\";s:5:\"array\";}s:9:\"TextTypes\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:4:\"LINE\";i:1;s:4:\"WORD\";}s:4:\"type\";s:6:\"string\";}s:19:\"ThrottlingException\";O:8:\"stdClass\":3:{s:11:\"description\";s:85:\"Amazon
  Rekognition is temporarily unable to process the request. Try your call again.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:9:\"Timestamp\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"UInteger\";O:8:\"stdClass\":2:{s:7:\"minimum\";i:0;s:4:\"type\";s:7:\"integer\";}s:5:\"ULong\";O:8:\"stdClass\":2:{s:7:\"minimum\";i:0;s:4:\"type\";s:7:\"integer\";}s:3:\"Url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Urls\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Url\";}s:4:\"type\";s:5:\"array\";}s:5:\"Video\";O:8:\"stdClass\":3:{s:11:\"description\";s:199:\"Video
  file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such
  as use <code>Video</code> to specify a video for analysis. The supported file formats
  are .mp4, .mov and .avi.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"S3Object\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/S3Object\";s:11:\"description\";s:54:\"The
  Amazon S3 bucket name and file name for the video.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"VideoJobStatus\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:11:\"IN_PROGRESS\";i:1;s:9:\"SUCCEEDED\";i:2;s:6:\"FAILED\";}s:4:\"type\";s:6:\"string\";}s:13:\"VideoMetadata\";O:8:\"stdClass\":3:{s:11:\"description\";s:178:\"Information
  about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned
  in every page of paginated responses from a Amazon Rekognition video operation.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:5:\"Codec\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:48:\"Type
  of compression used in the analyzed video. \";}s:14:\"DurationMillis\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/ULong\";s:11:\"description\";s:36:\"Length
  of the video in milliseconds.\";}s:6:\"Format\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:68:\"Format
  of the analyzed video. Possible values are MP4, MOV and AVI. \";}s:11:\"FrameHeight\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/ULong\";s:11:\"description\";s:38:\"Vertical
  pixel dimension of the video.\";}s:9:\"FrameRate\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Float\";s:11:\"description\";s:41:\"Number
  of frames per second in the video.\";}s:10:\"FrameWidth\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/ULong\";s:11:\"description\";s:40:\"Horizontal
  pixel dimension of the video.\";}}s:4:\"type\";s:6:\"object\";}s:22:\"VideoTooLargeException\";O:8:\"stdClass\":3:{s:11:\"description\";s:125:\"The
  file size or duration of the supplied media is too large. The maximum file size
  is 8GB. The maximum duration is 2 hours. \";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}}"
...
