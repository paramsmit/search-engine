---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:7:\"version\";s:5:\"3.0.0\";s:5:\"title\";s:10:\"Looker
  API\";s:11:\"description\";s:226:\"This document is a representative sample (subset)
  of the Looker API that should only be used to unit test the Looker ruby sdk. To
  get the current, actual Looker API metadata visit /api/3.0/swagger.json on your
  Looker instance.\";s:7:\"contact\";O:8:\"stdClass\":1:{s:4:\"name\";s:32:\"Looker
  Team <support@looker.com>\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:4:\"EULA\";s:3:\"url\";s:29:\"https://learn.looker.com/eula\";}}"
host: localhost:19999
basePath: /api/3.0
paths:
  /user:
    get:
      tags:
      - User
      operationId: me
      summary: Get current user
      description: Get information about the current user; i.e. the user account currently
        calling the API.n
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Current user.
          schema:
            $ref: User
  /users/{id}:
    get:
      tags:
      - User
      operationId: user
      summary: Get a user
      description: Get information about the user with a specific id.nnIf the caller
        is an admin or the caller is the user being specified, then full user information
        willnbe returned. Otherwise, a minimal 'public' variant of the user information
        will be returned. This containsnThe user name and avatar url, but no sensitive
        information.n
      parameters:
      - name: id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Specified user.
          schema:
            $ref: User
    delete:
      tags:
      - User
      operationId: delete_user
      summary: delete a user
      description: Delete the user with a specific id.n**DANGER** this will delete
        the user and all looks and other information owned by the user.n
      parameters:
      - name: id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: User successfully deleted.
          schema:
            type: boolean
    patch:
      tags:
      - User
      operationId: update_user
      summary: update a user
      description: Update information about the user with a specific id.n
      parameters:
      - name: id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: user
        in: body
        description: User
        required: true
        schema:
          $ref: User
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: New state for specified user.
          schema:
            $ref: User
  /users:
    get:
      tags:
      - User
      operationId: all_users
      summary: get all users
      description: Get information about all users.n
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: All users.
          schema:
            type: array
            items:
              $ref: User
    post:
      tags:
      - User
      operationId: create_user
      summary: create a user
      description: Create a user with the specified information.n
      parameters:
      - name: user
        in: body
        description: User
        required: false
        schema:
          $ref: User
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        409:
          description: Resource Already Exists
          schema:
            $ref: Error
        422:
          description: Validation Error
          schema:
            $ref: ValidationError
        500:
          description: Server Error
          schema:
            $ref: Error
        200:
          description: Created User
          schema:
            $ref: User
  /users/{user_id}/credentials_email:
    get:
      tags:
      - User
      operationId: user_credentials_email
      summary: get email/password credential
      description: Email/password login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: email/password credential
          schema:
            $ref: CredentialsEmail
    post:
      tags:
      - User
      operationId: create_user_credentials_email
      summary: create email/password credential
      description: Email/password login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: user_credentials_email
        in: body
        description: email/password credential
        required: false
        schema:
          $ref: CredentialsEmail
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: email/password credential
          schema:
            $ref: CredentialsEmail
    patch:
      tags:
      - User
      operationId: update_user_credentials_email
      summary: update email/password credential
      description: Email/password login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: user_credentials_email
        in: body
        description: email/password credential
        required: true
        schema:
          $ref: CredentialsEmail
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: email/password credential
          schema:
            $ref: CredentialsEmail
    delete:
      tags:
      - User
      operationId: delete_user_credentials_email
      summary: delete email/password credential
      description: Email/password login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_totp:
    get:
      tags:
      - User
      operationId: user_credentials_totp
      summary: get Two-factor credential
      description: Two-factor login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Two-factor credential
          schema:
            $ref: CredentialsTotp
    post:
      tags:
      - User
      operationId: create_user_credentials_totp
      summary: create Two-factor credential
      description: Two-factor login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: user_credentials_totp
        in: body
        description: Two-factor credential
        required: false
        schema:
          $ref: CredentialsTotp
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Two-factor credential
          schema:
            $ref: CredentialsTotp
    delete:
      tags:
      - User
      operationId: delete_user_credentials_totp
      summary: delete Two-factor credential
      description: Two-factor login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_api:
    get:
      tags:
      - User
      operationId: user_credentials_api
      summary: get API credential
      description: API login information for the specified user. This is for 'API
        Users' used for the 'old' query API.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: API credential
          schema:
            $ref: CredentialsApi
    post:
      tags:
      - User
      operationId: create_user_credentials_api
      summary: create API credential
      description: API login information for the specified user. This is for 'API
        Users' used for the 'old' query API.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: user_credentials_api
        in: body
        description: API credential
        required: false
        schema:
          $ref: CredentialsApi
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: API credential
          schema:
            $ref: CredentialsApi
    delete:
      tags:
      - User
      operationId: delete_user_credentials_api
      summary: delete API credential
      description: API login information for the specified user. This is for 'API
        Users' used for the 'old' query API.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_ldap:
    get:
      tags:
      - User
      operationId: user_credentials_ldap
      summary: get LDAP credential
      description: LDAP login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: LDAP credential
          schema:
            $ref: CredentialsLDAP
    delete:
      tags:
      - User
      operationId: delete_user_credentials_ldap
      summary: delete LDAP credential
      description: LDAP login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_google:
    get:
      tags:
      - User
      operationId: user_credentials_google
      summary: get Google auth credential
      description: Google authentication login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Google auth credential
          schema:
            $ref: CredentialsGoogle
    delete:
      tags:
      - User
      operationId: delete_user_credentials_google
      summary: delete Google auth credential
      description: Google authentication login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_api3s:
    get:
      tags:
      - User
      operationId: all_user_credentials_api3s
      summary: get all API 3 credentials
      description: API 3 login information for the specified user. This is for the
        newer API keys that can be added for any user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: API 3 credential
          schema:
            type: array
            items:
              $ref: CredentialsApi3
  /users/{user_id}/credentials_api3/{credentials_api3_id}:
    get:
      tags:
      - User
      operationId: user_credentials_api3
      summary: get API 3 credential
      description: API 3 login information for the specified user. This is for the
        newer API keys that can be added for any user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: credentials_api3_id
        in: path
        description: id of API 3 credential
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: API 3 credential
          schema:
            $ref: CredentialsApi3
    delete:
      tags:
      - User
      operationId: delete_user_credentials_api3
      summary: delete API 3 credential
      description: API 3 login information for the specified user. This is for the
        newer API keys that can be added for any user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: credentials_api3_id
        in: path
        description: id of API 3 credential
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_api3:
    post:
      tags:
      - User
      operationId: create_user_credentials_api3
      summary: create API 3 credential
      description: API 3 login information for the specified user. This is for the
        newer API keys that can be added for any user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: user_credentials_api3
        in: body
        description: API 3 credential
        required: false
        schema:
          $ref: CredentialsApi3
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: API 3 credential
          schema:
            $ref: CredentialsApi3
  /users/{user_id}/credentials_embeds:
    get:
      tags:
      - User
      operationId: all_user_credentials_embeds
      summary: get all Embedding credentials
      description: Embed login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Embedding credential
          schema:
            type: array
            items:
              $ref: CredentialsEmbed
  /users/{user_id}/credentials_embed/{credentials_embed_id}:
    get:
      tags:
      - User
      operationId: user_credentials_embed
      summary: get Embedding credential
      description: Embed login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: credentials_embed_id
        in: path
        description: id of Embedding credential
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Embedding credential
          schema:
            $ref: CredentialsEmbed
    delete:
      tags:
      - User
      operationId: delete_user_credentials_embed
      summary: delete Embedding credential
      description: Embed login information for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: credentials_embed_id
        in: path
        description: id of Embedding credential
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/credentials_looker_openid:
    get:
      tags:
      - User
      operationId: user_credentials_looker_openid
      summary: get Looker Openid credential
      description: Looker Openid login information for the specified user. Used by
        Looker Analysts.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Looker Openid credential
          schema:
            $ref: CredentialsLookerOpenid
    delete:
      tags:
      - User
      operationId: delete_user_credentials_looker_openid
      summary: delete Looker Openid credential
      description: Looker Openid login information for the specified user. Used by
        Looker Analysts.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/sessions:
    get:
      tags:
      - User
      operationId: all_user_sessions
      summary: get all Web login sessions
      description: Web login session for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Web login session
          schema:
            type: array
            items:
              $ref: Session
  /users/{user_id}/session/{session_id}:
    get:
      tags:
      - User
      operationId: user_session
      summary: get Web login session
      description: Web login session for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: session_id
        in: path
        description: id of Web login session
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Web login session
          schema:
            $ref: Session
    delete:
      tags:
      - User
      operationId: delete_user_session
      summary: delete Web login session
      description: Web login session for the specified user.
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: session_id
        in: path
        description: id of Web login session
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Not Found
          schema:
            $ref: Error
        204:
          description: Successfully deleted.
          schema:
            type: boolean
  /users/{user_id}/attribute_values:
    get:
      tags:
      - User
      operationId: user_attribute_user_values
      summary: Get User Attribute Values
      description: '### Get user attribute values for a given user.nnReturns the values
        of specified user attributes (or all user attributes) for a certain user.nnA
        value for each user attribute is searched for in the following locations,
        in this order:n1. in the user''s account informationn1. in groups that the
        user is a member ofn1. the default value of the user attributennIf more than
        one group has a value defined for a user attribute, the group with the lowest
        rank wins.nnThe response will only include user attributes for which values
        were found. Use `include_unset=true` to includenempty records for user attributes
        with no value.nnThe value of all hidden user attributes will be blank.n'
      parameters:
      - name: user_id
        in: path
        description: Id of user
        required: true
        type: integer
        format: int64
      - name: fields
        in: query
        description: Requested fields.
        required: false
        type: string
      - name: user_attribute_ids
        in: query
        description: Specific user attributes to request. Omit or leave blank to request
          all user attributes.
        required: false
        type: array
        items:
          type: integer
          format: int64
        collectionFormat: csv
      - name: all_values
        in: query
        description: If true, returns all values in the search path instead of just
          the first value found. Useful for debugging group precedence.
        required: false
        type: boolean
      - name: include_unset
        in: query
        description: If true, returns an empty record for each requested attribute
          that has no user, group, or default value.
        required: false
        type: boolean
      responses:
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
        200:
          description: Value of user attribute.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAttributeWithValue'
      x-looker-status: beta
  /users/{user_id}/roles:
    get:
      tags:
      - User
      operationId: user_roles
      summary: Get roles for a user
      description: Get information about roles of the user with a specific id.n
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Roles of user.
          schema:
            type: array
            items:
              $ref: Role
    put:
      tags:
      - User
      operationId: set_user_roles
      summary: Set roles for a user
      description: Set roles of the user with a specific id.n
      parameters:
      - name: user_id
        in: path
        description: id of user
        required: true
        type: integer
        format: int64
      - name: roles
        in: body
        description: array of roles ids for user
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        400:
          description: Bad Request
          schema:
            $ref: Error
        404:
          description: Not Found
          schema:
            $ref: Error
        200:
          description: Roles of user.
          schema:
            type: array
            items:
              $ref: Role
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":15:{s:5:\"Error\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"message\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:13:\"Error
  details\";}s:17:\"documentation_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:18:\"Documentation
  link\";}}s:8:\"required\";a:2:{i:0;s:7:\"message\";i:1;s:17:\"documentation_url\";}}s:19:\"BackupConfiguration\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:38:\"Type
  of backup: looker-s3 or custom-s3\";}s:16:\"custom_s3_bucket\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:36:\"Name
  of bucket for custom-s3 backups\";}s:13:\"custom_s3_key\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:37:\"AWS
  S3 key used for custom-s3 backups\";}s:16:\"custom_s3_secret\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:40:\"AWS
  S3 secret used for custom-s3 backups\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:15:\"CredentialsApi3\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Unique
  Id\";}s:9:\"client_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:17:\"API
  key client_id\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:14:\"CredentialsApi\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"token\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:13:\"API
  key token\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:16:\"CredentialsEmail\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":7:{s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:33:\"EMail
  address used for user login\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:12:\"logged_in_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:48:\"Timestamp
  for most recent login using credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}s:8:\"user_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this user\";}}}s:16:\"CredentialsEmbed\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":7:{s:2:\"id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Unique
  Id\";}s:16:\"external_user_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:33:\"Embedder's
  unique id for the user\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:12:\"logged_in_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:48:\"Timestamp
  for most recent login using credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:17:\"CredentialsGoogle\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":8:{s:5:\"email\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:13:\"EMail
  address\";}s:14:\"google_user_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:32:\"Google's
  Unique ID for this user\";}s:6:\"domain\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:13:\"Google
  domain\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:12:\"logged_in_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:48:\"Timestamp
  for most recent login using credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:15:\"CredentialsLDAP\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":8:{s:5:\"email\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:13:\"EMail
  address\";}s:7:\"ldap_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:28:\"LDAP
  Unique ID for this user\";}s:7:\"ldap_dn\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:60:\"LDAP
  Distinguished name for this user (as-of the last login)\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:12:\"logged_in_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:48:\"Timestamp
  for most recent login using credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:23:\"CredentialsLookerOpenid\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":8:{s:5:\"email\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:33:\"EMail
  address used for user login\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:12:\"logged_in_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:48:\"Timestamp
  for most recent login using credential\";}s:12:\"logged_in_ip\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:59:\"IP
  address of client for most recent login using credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}s:8:\"user_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this user\";}}}s:15:\"CredentialsTotp\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"verified\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:17:\"User
  has verified\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:45:\"Timestamp
  for the creation of this credential\";}s:11:\"is_disabled\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Has
  this credential been disabled?\";}s:4:\"type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"Short
  name for the type of this kind of credential\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:15:\"ValidationError\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:6:\"errors\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:17:\"documentation_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:18:\"Documentation
  link\";}}s:8:\"required\";a:2:{i:0;s:7:\"message\";i:1;s:17:\"documentation_url\";}}s:4:\"Role\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Unique
  Id\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:12:\"Name
  of Role\";}s:14:\"permission_set\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:13:\"PermissionSet\";}s:9:\"model_set\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:8:\"ModelSet\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}s:9:\"users_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:40:\"Link
  to get list of users with this role\";}}}s:7:\"Session\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":14:{s:2:\"id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Unique
  Id\";}s:10:\"ip_address\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:50:\"IP
  address of user when this session was initiated\";}s:7:\"browser\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:19:\"User's
  browser type\";}s:16:\"operating_system\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:23:\"User's
  Operating System\";}s:4:\"city\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:57:\"City
  component of user location (derived from IP address)\";}s:5:\"state\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:58:\"State
  component of user location (derived from IP address)\";}s:7:\"country\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:60:\"Country
  component of user location (derived from IP address)\";}s:16:\"credentials_type\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:52:\"Type
  of credentials used for logging in this session\";}s:11:\"extended_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:52:\"Time
  when this session was last extended by the user\";}s:14:\"extended_count\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:41:\"Number
  of times this session was extended\";}s:12:\"sudo_user_id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:81:\"Actual
  user in the case when this session represents one user sudo'ing as another\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:36:\"Time
  when this session was initiated\";}s:10:\"expires_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:34:\"Time
  when this session will expire\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:4:\"User\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":21:{s:2:\"id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Unique
  Id\";}s:10:\"first_name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:10:\"First
  name\";}s:9:\"last_name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:9:\"Last
  name\";}s:12:\"display_name\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:79:\"Full
  name for display (available only if both first_name and last_name are set)\";}s:5:\"email\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:13:\"EMail
  address\";}s:11:\"is_disabled\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"description\";s:25:\"Account
  has been disabled\";}s:10:\"avatar_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:41:\"URL
  for the avatar image (may be generic)\";}s:13:\"home_space_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:31:\"ID
  string for user's home space\";}s:14:\"access_filters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:106:\"Model
  access filters. Of the form: '{model => {key => value}, model2 => {key1 => value1,
  key2 => value2}}'\";}s:17:\"credentials_email\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:16:\"CredentialsEmail\";s:8:\"readOnly\";b:1;s:11:\"description\";s:32:\"Email/Password
  login credentials\";}s:16:\"credentials_totp\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:15:\"CredentialsTotp\";s:8:\"readOnly\";b:1;s:11:\"description\";s:22:\"Two-factor
  credentials\";}s:16:\"credentials_ldap\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:15:\"CredentialsLDAP\";s:8:\"readOnly\";b:1;s:11:\"description\";s:16:\"LDAP
  credentials\";}s:18:\"credentials_google\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:17:\"CredentialsGoogle\";s:8:\"readOnly\";b:1;s:11:\"description\";s:23:\"Google
  auth credentials\";}s:15:\"credentials_api\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:14:\"CredentialsApi\";s:8:\"readOnly\";b:1;s:11:\"description\";s:20:\"API
  user credentials\";}s:16:\"credentials_api3\";O:8:\"stdClass\":4:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:15:\"CredentialsApi3\";}s:8:\"readOnly\";b:1;s:11:\"description\";s:17:\"API
  3 credentials\";}s:17:\"credentials_embed\";O:8:\"stdClass\":4:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:16:\"CredentialsEmbed\";}s:8:\"readOnly\";b:1;s:11:\"description\";s:17:\"Embed
  credentials\";}s:25:\"credentials_looker_openid\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"CredentialsLookerOpenid\";s:8:\"readOnly\";b:1;s:11:\"description\";s:59:\"LookerOpenID
  credentials. Used for login by Looker Analysts\";}s:8:\"sessions\";O:8:\"stdClass\":4:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:7:\"Session\";}s:8:\"readOnly\";b:1;s:11:\"description\";s:15:\"Active
  sessions\";}s:8:\"role_ids\";O:8:\"stdClass\":4:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"readOnly\";b:1;s:11:\"description\";s:39:\"Array
  of ids of the roles for this user\";}s:18:\"is_looker_employee\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:8:\"readOnly\";b:1;s:11:\"description\";s:44:\"User
  is identified as an emplpoyee of Looker\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}s:10:\"UserPublic\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Unique
  Id\";}s:10:\"first_name\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:10:\"First
  Name\";}s:9:\"last_name\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;s:11:\"description\";s:9:\"Last
  Name\";}s:10:\"avatar_url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:41:\"URL
  for the avatar image (may be generic)\";}s:3:\"url\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:3:\"uri\";s:8:\"readOnly\";b:1;s:11:\"description\";s:21:\"Link
  to get this item\";}}}}"
...
