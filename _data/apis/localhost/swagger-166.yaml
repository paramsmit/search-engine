---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:129:\"This is a simple
  Petstore server. It is based off of the Swagger Petstore example. See http://petstore.swagger.io
  for comparison.\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:15:\"Simple Petstore\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:24:\"james.schubert@gmail.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: localhost:3000
basePath: /api
paths:
  /pets:
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      description: ""
      operationId: addPet
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Pet to add to the store
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        201:
          description: Pet created
          schema:
            $ref: '#/definitions/Pet'
        405:
          description: Invalid input
    put:
      tags:
      - pet
      summary: Update a pet
      description: ""
      operationId: updatePet
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Pet to update
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        400:
          description: Invalid id
        404:
          description: Pet not found
  /pets/findByStatus:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - pending
          - sold
          default: available
        collectionFormat: csv
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
  /pets/findByStatusMulti:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided separately on query string.
        Useful for testing swagger codegen generators features.
      operationId: findPetsByStatusMulti
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - pending
          - sold
          default: available
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
  /pets/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by id
      description: Returns a specific pet
      operationId: getPetById
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: id of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid id supplied
        404:
          description: Pet not found
    post:
      tags:
      - pet
      summary: Updates a pet using form data
      description: ""
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: id of pet
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated pet name
        required: false
        type: string
      - name: status
        in: formData
        description: Updated pet status
        required: false
        type: string
      responses:
        405:
          description: Invalid input
    delete:
      tags:
      - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid id
        404:
          description: Pet not found
  /tags:
    get:
      tags:
      - store
      summary: Gets info about tags in the store
      description: ""
      operationId: getTags
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: _page
        description: Page number to return
        required: true
        type: integer
        format: int64
        default: "1"
        minimum: "1"
      - in: query
        name: _limit
        description: Page size to return
        required: true
        type: integer
        format: int64
        default: "20"
        minimum: "1"
      responses:
        200:
          description: Tag information
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
          headers:
            Link:
              type: string
              description: prev/first/next/last Link header info
  /tags/{tagId}:
    get:
      tags:
      - store
      summary: Get tag by id
      description: Returns a specific tag
      operationId: getTagById
      produces:
      - application/json
      parameters:
      - name: tagId
        in: path
        description: id of tag to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
        400:
          description: Invalid id supplied
        404:
          description: Tag not found
  /tags/{tagId}/pets:
    get:
      tags:
      - store
      - pet
      summary: Get pets for a given tag id
      description: Returns a set of pets for a given tag
      operationId: getPetsByTag
      produces:
      - application/json
      parameters:
      - name: tagId
        in: path
        description: id of tag to return
        required: true
        type: integer
        format: int64
      - in: query
        name: _page
        description: Page number to return
        required: false
        type: integer
        format: int64
        default: "1"
        minimum: "1"
      - in: query
        name: _limit
        description: Page size to return
        required: false
        type: integer
        format: int64
        default: "10"
        minimum: "1"
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
          headers:
            Link:
              type: string
              description: prev/first/next/last Link header info
  /categories:
    get:
      tags:
      - store
      summary: Gets info about categories in the store
      description: ""
      operationId: getCategories
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: _page
        description: Page number to return
        required: true
        type: integer
        format: int64
        default: "1"
        minimum: "1"
      - in: query
        name: _limit
        description: Page size to return
        required: true
        type: integer
        format: int64
        default: "20"
        minimum: "1"
      responses:
        200:
          description: Category information
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
          headers:
            Link:
              type: string
              description: prev/first/next/last Link header info
  /categories/{categoryId}:
    get:
      tags:
      - store
      summary: Get category by id
      description: Returns a specific category
      operationId: getCategoryById
      produces:
      - application/json
      parameters:
      - name: categoryId
        in: path
        description: id of category to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Category'
        400:
          description: Invalid id supplied
        404:
          description: Category not found
  /categories/{categoryId}/pets:
    get:
      tags:
      - store
      - pet
      summary: Get pets for a given category id
      description: Returns a set of pets for a given category
      operationId: getPetsByCategory
      produces:
      - application/json
      parameters:
      - name: categoryId
        in: path
        description: id of category to return
        required: true
        type: integer
        format: int64
      - in: query
        name: _page
        description: Page number to return
        required: false
        type: integer
        format: int64
        default: "1"
        minimum: "1"
      - in: query
        name: _limit
        description: Page size to return
        required: false
        type: integer
        format: int64
        default: "10"
        minimum: "1"
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
          headers:
            Link:
              type: string
              description: prev/first/next/last Link header info
  /orders:
    get:
      tags:
      - store
      summary: Gets info about orders in the store
      description: ""
      operationId: getOrders
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - placed
          - approved
          - delivered
          default: placed
        collectionFormat: csv
      - in: query
        name: _page
        description: Page number to return
        required: true
        type: integer
        format: int64
        minimum: "1"
        default: "1"
      - in: query
        name: _limit
        description: Page size to return
        required: false
        type: integer
        format: int64
        minimum: "1"
        default: "5"
      responses:
        200:
          description: Order information
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
          headers:
            Link:
              type: string
              description: prev/first/next/last Link header info
  /orders/{orderId}:
    get:
      tags:
      - store
      summary: Get order by id
      description: Returns a specific order
      operationId: getOrderById
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: id of order to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid id supplied
        404:
          description: Order not found
  /orders/{orderId}/pet:
    get:
      tags:
      - store
      summary: Get pet associated with an order
      description: Returns a specific order's pet
      operationId: getByByOrderId
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: id of order to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid id supplied
        404:
          description: Pet not found
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":5:{s:5:\"Order\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:5:\"petId\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"quantity\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:8:\"shipDate\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:12:\"Order
  Status\";s:4:\"enum\";a:3:{i:0;s:6:\"placed\";i:1;s:8:\"approved\";i:2;s:9:\"delivered\";}}s:8:\"complete\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"default\";b:0;}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"Order\";}}s:8:\"Category\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"Category\";}}s:4:\"User\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"userStatus\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:11:\"User
  Status\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:4:\"User\";}}s:3:\"Tag\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"Tag\";}}s:3:\"Pet\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:9:\"photoUrls\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"categoryId\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"doggie\";}s:9:\"photoUrls\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:3:\"xml\";O:8:\"stdClass\":2:{s:4:\"name\";s:8:\"photoUrl\";s:7:\"wrapped\";b:1;}s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"tags\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:3:\"xml\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"tag\";s:7:\"wrapped\";b:1;}s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Tag\";}}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:23:\"pet
  status in the store\";s:4:\"enum\";a:3:{i:0;s:9:\"available\";i:1;s:7:\"pending\";i:2;s:4:\"sold\";}}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"Pet\";}}}"
...
