---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:7:\"version\";s:2:\"v1\";s:5:\"title\";s:16:\"Auto
  Parking API\";s:11:\"description\";s:369:\"The first version of Auto Parking Api.\n\n##
  Requests Objects\nAll URLs use [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).\nEvery
  endpoint (URL) may support one of four different http verbs. GET\nrequests fetch
  information about an object, POST requests create objects,\nPUT requests update
  objects, and finally DELETE requests will delete\nobjects.\n\";}"
host: localhost
basePath: /v1
paths:
  /users/{user-id}:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      security:
      - key: []
      - oauth:
        - basic
      tags:
      - Users
      description: Get basic information about a user.
      responses:
        200:
          description: The user object
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        404:
          description: User not found
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /users/searchByName:
    get:
      security:
      - key: []
      - oauth:
        - basic
      tags:
      - Users
      description: Get basic information about a user.
      parameters:
      - in: query
        name: username
        description: Created user object
        required: true
        type: string
      responses:
        200:
          description: The user object
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        404:
          description: User not found
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /users/{user-id}/follows:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - Relationships
      description: Get the list of users this user follows.
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /users/{user-id}/followed-by:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - Relationships
      description: Get the list of users this user is followed by.
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /users/register:
    post:
      tags:
      - Users
      description: Registration of a new usern
      security:
      - oauth:
        - basic
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Successful operation
        405:
          description: Invalid input
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /users/{user-id}/edit:
    parameters:
    - $ref: '#/parameters/user-id'
    put:
      tags:
      - Users
      description: Edit an existing usern
      security:
      - oauth:
        - basic
      responses:
        200:
          description: Successful operation
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /users/{user-id}/delete:
    parameters:
    - $ref: '#/parameters/user-id'
    delete:
      tags:
      - Users
      description: Delete an usern
      security:
      - oauth:
        - basic
      responses:
        200:
          description: Successful operation
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /users/{user-id}/relationship:
    parameters:
    - $ref: '#/parameters/user-id'
    post:
      tags:
      - Relationships
      description: Modify the relationship between the current user and the target
        user.n
      security:
      - oauth:
        - relationships
      parameters:
      - name: action
        in: body
        description: One of follow/unfollow.
        schema:
          type: string
          enum:
          - follow
          - unfollow
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /establishment/searchByName:
    get:
      security:
      - key: []
      - oauth:
        - basic
      tags:
      - Establishment
      description: Get basic information about an establishment.
      parameters:
      - in: query
        name: name
        description: Created establishment object
        required: true
        type: string
      responses:
        200:
          description: The establishment object
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Establishment'
        400:
          description: Invalid ID supplied
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        404:
          description: Establishment not found
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /establishment/register:
    post:
      tags:
      - Establishment
      description: Registration of a new establishmentn
      security:
      - oauth:
        - basic
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/Establishment'
      responses:
        200:
          description: Successful operation
        405:
          description: Invalid input
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /establishment/{establishment-id}/edit:
    parameters:
    - $ref: '#/parameters/establishment-id'
    put:
      tags:
      - Establishment
      description: Edition of a establishmentn
      security:
      - oauth:
        - basic
      responses:
        200:
          description: Successful operation
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /establishment/{establishment-id}/delete:
    parameters:
    - $ref: '#/parameters/establishment-id'
    delete:
      tags:
      - Establishment
      description: Remotion of a usern
      security:
      - oauth:
        - basic
      responses:
        200:
          description: Successful operation
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /establishment/{establishment-id}/search:
    parameters:
    - $ref: '#/parameters/establishment-id'
    get:
      tags:
      - Establishment
      description: Search for a establishment by name.
      parameters:
      - name: comments
        in: query
        description: List of comments leaved by users.
        type: integer
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Establishment'
        400:
          description: Invalid ID supplied
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        404:
          description: Establishment not found
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
        405:
          description: Validation exception
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/errorModel'
  /establishment/{establishment-id}/location:
    parameters:
    - $ref: '#/parameters/establishment-id'
    get:
      tags:
      - Location
      - Establishment
      description: Search for a location by geographic coordinate.
      parameters:
      - name: distance
        in: query
        description: Default is 1000m (distance=1000), max distance is 5000.
        type: integer
      - name: lat
        in: query
        description: latitude of the center search coordinate. If used, lng is required.n
        type: number
      - name: lng
        in: query
        description: longitude of the center search coordinate. If used, lat is required.n
        type: number
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Establishment'
  /establishment/{establishment-id}/classification:
    parameters:
    - name: establishment-id
      in: path
      description: Establishment ID
      type: integer
      required: true
    get:
      tags:
      - Classification
      - Establishment
      description: Get a list of recent comments on a establishment object.n
      responses:
        200:
          description: OK
          schema:
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: array
                items:
                  $ref: '#/definitions/Classification'
  /establishment/{establishment-id}/comments:
    parameters:
    - name: establishment-id
      in: path
      description: Establishment ID
      type: integer
      required: true
    get:
      tags:
      - Comments
      - Establishment
      description: Get a list of recent comments on a establishment object.n
      responses:
        200:
          description: OK
          schema:
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: array
                items:
                  $ref: '#/definitions/Comment'
    post:
      tags:
      - Comments
      - Establishment
      description: Create a comment on a media object with the following rules:n*
        The total length of the comment cannot exceed 300 characters.n* The comment
        cannot contain more than 1 URL.n* The comment cannot consist of all capital
        letters.n
      security:
      - oauth:
        - comments
      parameters:
      - name: TEXT
        description: Text to post as a comment on the establishment object as specified
          innestablishment-id.n
        in: body
        schema:
          type: number
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: object
    delete:
      tags:
      - Comments
      - Establishment
      description: Remove a comment on the authenticated establishment object.n
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: object
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":6:{s:4:\"User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":10:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"full_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"profile_picture\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"website\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"userStatus\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:11:\"User
  Status\";}s:6:\"counts\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"follows\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"follwed_by\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}}}s:13:\"Establishment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"adress\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"totalVacancies\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:13:\"FreeVacancies\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:7:\"Comment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"created_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"from\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/MiniProfile\";}}}s:14:\"Classification\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"record_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"stars\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"from\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/MiniProfile\";}}}s:11:\"MiniProfile\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:42:\"A
  shorter version of User for search array\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"user_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"full_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:15:\"profile_picture\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"errorModel\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:4:\"code\";i:1;s:7:\"message\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"code\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:3:\"int\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
