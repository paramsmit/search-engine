---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:14:\"localhost:8080\";s:7:\"version\";s:3:\"1.0\";}"
host: localhost:8080
basePath: /nuxeo/site/api/v1
paths:
  /@emptyWithDefault:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The type of the empty document to be initialized
        in: query
        name: type
        required: true
        type: string
      - description: The name of the empty document to be initialized
        in: query
        name: name
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: 'To retrieve all initialized properties, the ''properties: *''
        header must be used'
      operationId: getEmptyDocument
      summary: Initialize an empty document with default properties given a document
        type
  /automation:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/OperationDescriptionList'
      operationId: getOperationsList
      summary: Gets the list of all operation/chain
  /automation/{operationName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the operation
        in: path
        name: operationName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/OperationDescription'
      operationId: getOperationDescription
      summary: Gets the description of the operation/chain
    post:
      consumes:
      - application/json+nxrequest
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the operation
        in: path
        name: operationName
        required: true
        type: string
      - description: The operation parameters
        in: body
        name: operationParams
        required: true
        schema:
          $ref: '#/definitions/OperationParams'
      responses:
        200:
          description: No response was specified
      operationId: executeOperation
      summary: Execute an operation or a chain on a document
  /config/facets:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/facet'
      operationId: getFacets
      summary: List registered facets
  /config/facets/{facet}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the facet
        in: path
        name: facet
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/facet'
      operationId: getFacet
      summary: Facet description
  /config/schemas:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/schema'
      operationId: getSchemas
      summary: List registered schemas
  /config/schemas/{schema}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the schema
        in: path
        name: schema
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/schema'
      operationId: getSchema
      summary: Schema description
  /config/types:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/docType'
      operationId: getDocTypes
      summary: List registered document type
  /config/types/{docType}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the document type
        in: path
        name: docType
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/docType'
      operationId: getDocType
      summary: Document type description
  /directory/{directoryName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Directory name. Ex: ''subject'''
        in: path
        name: directoryName
        required: true
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/directoryEntries'
      operationId: getDirectoryEntries
      summary: Get directory entries
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Directory name. Ex: ''subject'''
        in: path
        name: directoryName
        required: true
        type: string
      - description: Directory entry object that is created or updated in the directory
          'directoryName'
        in: body
        name: Directory
        required: true
        schema:
          $ref: '#/definitions/directoryEntry'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/directoryEntry'
      operationId: createDirectoryEntry
      summary: Creates a directory entry
  /directory/{directoryName}/{entryId}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Directory name. Ex: ''subject'''
        in: path
        name: directoryName
        required: true
        type: string
      - description: Directory entry id
        in: path
        name: entryId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: deleteDirectoryEntry
      summary: Delete a directory entry
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Directory name. Ex: ''subject'''
        in: path
        name: directoryName
        required: true
        type: string
      - description: Directory entry id
        in: path
        name: entryId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/directoryEntry'
      operationId: getDirectoryEntry
      summary: Get a directory entry
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Directory name. Ex: ''subject'''
        in: path
        name: directoryName
        required: true
        type: string
      - description: Directory entry id
        in: path
        name: entryId
        required: true
        type: string
      - description: Directory entry object that is created or updated in the directory
          'directoryName'
        in: body
        name: Directory
        required: true
        schema:
          $ref: '#/definitions/directoryEntry'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/directoryEntry'
      operationId: updateDirectoryEntry
      summary: Update a directory entry
  /group:
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Group object to be created or updated.
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/group'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/group'
      operationId: createGroup
      summary: Create a group
  /group/search:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Query string. Ex: ''Admin'' will return Administrator user'
        in: query
        name: q
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/groups'
      operationId: searchGroup
      summary: Search a group
  /group/{groupName}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: deleteGroupByName
      summary: Delete a group by its name
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/group'
      operationId: getGroupByName
      summary: Get a group by its name
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      - description: Group object to be created or updated.
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/group'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/group'
      operationId: updateGroupByName
      summary: Update a group by its name
  /group/{groupName}/@groups:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/groupList'
      operationId: getGroupMembersGroup
      summary: Get the group members of a group
  /group/{groupName}/@users:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/userList'
      operationId: getGroupMembers
      summary: Get the user members of a group
  /group/{groupName}/user/{userName}:
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: addAUserToGroup
      summary: Add a user to a group
  /id/{docId}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
      description: Only documents which you have permission to see will be returned
      operationId: deleteDocumentById
      summary: Deletes a document by its id
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: Only documents which you have permission to see will be returned
      operationId: getDocumentById
      summary: Find a document by its id
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      operationId: createDocumentById
      summary: Creates a document by its parent id
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: Only documents which you have permission can be updated. Only the
        properties part of the document object is taken into account for update
      operationId: updateDocumentById
      summary: Updates a document by its id
  /id/{docId}/@acl:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Acp'
      operationId: getACLByPath
      summary: View the ACL of a document given its id
  /id/{docId}/@audit:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/LogEntries'
      operationId: getAuditById
      summary: View the audit trail of a document given its id
  /id/{docId}/@blob/{fieldPath}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: 'The field path you want do download (ex: file:content)'
        in: path
        name: fieldPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: getBlob
      summary: Get the main blob of a document by its id
  /id/{docId}/@bo/{adapterName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObject'
      operationId: getBOById
      summary: Get the business object adapter on a document given its id
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      - description: The created or updated business object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/BusinessObject'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObject'
      operationId: updateBOById
      summary: Updates the business object adapter on a document given its id
  /id/{docId}/@bo/{adapterName}/{docName}:
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      - description: Name of the document
        in: path
        name: docName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObject'
      operationId: createBOById
      summary: Creates a document based on its business object
  /id/{docId}/@children:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: Only documents which you have permission to see will be returned
      operationId: getChildrenById
      summary: Get the children of a document by its id
  /id/{docId}/@children/@bo/{adapterName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObjectList'
      description: <ul><li>If a document can't be adapted, the resulting item will
        be null</li><li> This type of call works for every API endpoint that responds
        DocumentList (@search, @pp ...)</li></ul>
      operationId: getBOByPath
      summary: Get the list of business object of the children of a document by its
        id
  /id/{docId}/@convert:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The name of the converter to execute
        in: query
        name: name
        required: false
        type: string
      - description: The requested mime type for the converted Blob, such as 'application/pdf'
        in: query
        name: type
        required: false
        type: string
      - description: The requested extension of the converted Blob, such as 'pdf'
        in: query
        name: format
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: One of the 'name', 'type' or 'format' parameters must be passed.
      operationId: convertDocumentMainBlobById
      summary: Convert the main Blob of the document
  /id/{docId}/@emptyWithDefault:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The type of the empty document to be initialized
        in: query
        name: type
        required: true
        type: string
      - description: The name of the empty document to be initialized
        in: query
        name: name
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: 'To retrieve all initialized properties, the ''properties: *''
        header must be used'
      operationId: getEmptyDocumentById
      summary: Initialize an empty document with default properties given a document
        type and a parent
  /id/{docId}/@pp/{pageProviderName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: 'Name of the page provider, ex: ''user_domains'''
        in: path
        name: pageProviderName
        required: true
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: Only documents which you have permission to see will be returned
      operationId: getChildrenById
      summary: Execute a page provider on document by its id
  /id/{docId}/@rendition/{renditionName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: 'Name of the rendition, ex: ''pdf'''
        in: path
        name: renditionName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      operationId: getRenditionById
      summary: Returns the specified rendition on document by its id
  /id/{docId}/@search:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: NXQL query
        in: query
        name: query
        required: false
        type: string
      - description: A full text query
        in: query
        name: fullText
        required: false
        type: string
      - description: Field on which to order
        in: query
        name: orderBy
        required: false
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: Only documents which you have permission to see will be returned
      operationId: searchFromId
      summary: Get the children of a document by its id
  /id/{docId}/@task:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: id of the user who is actor of the task
        in: query
        name: userId
        required: true
        type: string
      - description: id of the workflow instance the task belongs to
        in: query
        name: workflowInstanceId
        required: true
        type: string
      - description: name of the workflow model of the task (i.e. 'SerialDocumentReview',
          'ParallelDocumentReview')
        in: query
        name: workflowModelName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/tasks'
      description: Only task instance which you have permission to see will be returned
      operationId: getDocumentTasks
      summary: List tasks of the given document
  /id/{docId}/@workflow:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflows'
      description: Only workflow instances launched by current user will be returned
      operationId: getDocumentWorkflow
      summary: Get the workflow instances launched on the given document
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The workflow request describing the workflow instance to be created
        in: body
        name: workflowRequestBody
        required: true
        schema:
          $ref: '#/definitions/workflowRequest'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflowRequest'
      operationId: createWorkflowInstanceOnDocument
      summary: Start a workflow instance on the given document
  /me:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: getLoggedInUser
      summary: Get the logged in user
  /me/changepassword:
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The body containing the new password along with the old password
          for security check
        in: body
        name: passwordbody
        required: true
        schema:
          $ref: '#/definitions/changePassword'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: changePassword
      summary: Change the logged in user's password
  /oauth2/provider:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2ProviderDataList'
      operationId: getOAuth2Providers
      summary: Retrieves the list of available OAuth2 providers.
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The OAuth2 provider to be added or updated.
        in: body
        name: oauth2ProviderBody
        required: true
        schema:
          $ref: '#/definitions/oauth2ProviderData'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2ProviderData'
      operationId: addOAuth2Provider
      summary: Adds an OAuth2 provider.
  /oauth2/provider/{oauth2ProviderId}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the OAuth2 provider
        in: path
        name: oauth2ProviderId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2ProviderData'
      operationId: getOauth2Provider
      summary: Retrieves OAuth2 provider data for the current user.
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The OAuth2 provider to be added or updated.
        in: body
        name: oauth2ProviderBody
        required: true
        schema:
          $ref: '#/definitions/oauth2ProviderData'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2ProviderData'
      operationId: updateOAuth2Provider
      summary: Updates an OAuth2 provider.
  /oauth2/provider/{oauth2ProviderId}/token:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the OAuth2 provider
        in: path
        name: oauth2ProviderId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2ProviderTokenData'
      operationId: getOauth2ProviderTokenData
      summary: Retrieves a valid access token to the current user. A new token will
        be request if the current one is expired.
  /oauth2/token:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2TokenDataList'
      operationId: getOauth2Tokens
      summary: Retrieves all OAuth2 tokens.
  /oauth2/token/{oauth2ProviderId}/{username}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: deleteOauth2Token
      summary: Delete an OAuth2 token.
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2TokenData'
      operationId: getOauth2Token
      summary: Gets an OAuth2 token.
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/oauth2TokenData'
      operationId: updateOauth2Token
      summary: Updates an OAuth2 token.
  /path/{docId}/@blob/{blobXpath}/@convert:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The name of the converter to execute
        in: query
        name: name
        required: false
        type: string
      - description: The requested mime type for the converted Blob, such as 'application/pdf'
        in: query
        name: type
        required: false
        type: string
      - description: The requested extension of the converted Blob, such as 'pdf'
        in: query
        name: format
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: One of the 'name', 'type' or 'format' parameters must be passed.
      operationId: convertDocumentBlobById
      summary: Convert the Blob at the given xpath of the document
  /path/{docPath}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      description: Only documents which you have permission can be deleted
      operationId: deleteDocumentByPath
      summary: Deletes a document by its path
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: Only documents which you have permission to see will be returned
      operationId: getDocumentByPath
      summary: Find a document by its path
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      operationId: createDocumentByPath
      summary: Creates a document by its parent path
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: Only documents which you have permission can be updated. Only the
        properties part of the document object is taken into account for update
      operationId: updateDocumentByPath
      summary: Updates a document by its path
  /path/{docPath}/@acl:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Acp'
      operationId: getACLByPath
      summary: View the ACL of a document given its path
  /path/{docPath}/@audit:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/LogEntries'
      operationId: getAuditByPath
      summary: View the audit trail of a document given its path
  /path/{docPath}/@blob/{blobXpath}/@convert:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The name of the converter to execute
        in: query
        name: name
        required: false
        type: string
      - description: The requested mime type for the converted Blob, such as 'application/pdf'
        in: query
        name: type
        required: false
        type: string
      - description: The requested extension of the converted Blob, such as 'pdf'
        in: query
        name: format
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: One of the 'name', 'type' or 'format' parameters must be passed.
      operationId: convertDocumentBlobByPath
      summary: Convert the Blob at the given xpath of the document
  /path/{docPath}/@blob/{fieldPath}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: 'The field path you want do download (ex: file:content)'
        in: path
        name: fieldPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: getBlob
      summary: Get the main blob of a document by its path
  /path/{docPath}/@bo/{adapterName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObject'
      operationId: getBOByPath
      summary: Get the business object adapter on a document given its path
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      - description: The created or updated business object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/BusinessObject'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObject'
      operationId: updateBOByPath
      summary: Updates the business object adapter on a document given its path
  /path/{docPath}/@bo/{adapterName}/{docName}:
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      - description: Name of the document
        in: path
        name: docName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObject'
      operationId: createBOByPath
      summary: Creates a document based on its business object
  /path/{docPath}/@children:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: Only documents which you have permission to see will be returned
      operationId: getChildrenByPath
      summary: Get the children of a document by its path
  /path/{docPath}/@children/@bo/{adapterName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Name of the adapter
        in: path
        name: adapterName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/BusinessObjectList'
      description: <ul><li>If a document can't be adapted, the resulting item will
        be null</li><li> This type of call works for every API endpoint that responds
        DocumentList (@search, @pp ...)</li></ul>
      operationId: getBOByPath
      summary: Get the list of business object of the children of a document by its
        path
  /path/{docPath}/@children/@op/{operationName}:
    post:
      consumes:
      - application/json+nxrequest
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Name of the operation
        in: path
        name: operationName
        required: true
        type: string
      - description: The operation parameters
        in: body
        name: operationParams
        required: true
        schema:
          $ref: '#/definitions/OperationParams'
      responses:
        200:
          description: No response was specified
      description: This works on every API endpoint that return DocumentList
      operationId: executeOperationOnDocByPath
      summary: Execute an operation or a chain on the children of a document
  /path/{docPath}/@convert:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The name of the converter to execute
        in: query
        name: name
        required: false
        type: string
      - description: The requested mime type for the converted Blob, such as 'application/pdf'
        in: query
        name: type
        required: false
        type: string
      - description: The requested extension of the converted Blob, such as 'pdf'
        in: query
        name: format
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: One of the 'name', 'type' or 'format' parameters must be passed.
      operationId: convertDocumentMainBlobByPath
      summary: Convert the main Blob of the document
  /path/{docPath}/@emptyWithDefault:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The type of the empty document to be initialized
        in: query
        name: type
        required: true
        type: string
      - description: The name of the empty document to be initialized
        in: query
        name: name
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: 'To retrieve all initialized properties, the ''properties: *''
        header must be used'
      operationId: getEmptyDocumentByPath
      summary: Initialize an empty document with default properties given a document
        type and a parent
  /path/{docPath}/@op/{operationName}:
    post:
      consumes:
      - application/json+nxrequest
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Name of the operation
        in: path
        name: operationName
        required: true
        type: string
      - description: The operation parameters
        in: body
        name: operationParams
        required: true
        schema:
          $ref: '#/definitions/OperationParams'
      responses:
        200:
          description: No response was specified
      operationId: executeOperationOnDocByPath
      summary: Execute an operation or a chain on a document
  /path/{docPath}/@pp/{pageProviderName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: 'Name of the page provider, ex: ''user_domains'''
        in: path
        name: pageProviderName
        required: true
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: Only documents which you have permission to see will be returned
      operationId: getChildrenByPath
      summary: Execute a page provider on document by its path
  /path/{docPath}/@rendition/{renditionName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: 'Name of the rendition, ex: ''pdf'''
        in: path
        name: renditionName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      operationId: getRenditionByPath
      summary: Returns the specified rendition on document by its path
  /path/{docPath}/@search:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Index of the current page
        format: int64
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        in: query
        name: offset
        required: false
        type: integer
      - description: Size of the page to retrieve
        format: int64
        in: query
        name: pageSize
        required: false
        type: integer
      - description: Maximum results to retrieve
        format: int64
        in: query
        name: maxResults
        required: false
        type: integer
      - description: Property to sort by, for example 'dc:title'
        in: query
        name: sortBy
        required: false
        type: string
      - description: Sort order, accepts 'asc' or 'desc', default is 'desc'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: NXQL query
        in: query
        name: query
        required: false
        type: string
      - description: A full text query
        in: query
        name: fullText
        required: false
        type: string
      - description: Field on which to order
        in: query
        name: orderBy
        required: false
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: Only documents which you have permission to see will be returned
      operationId: searchFromPath
      summary: Get the children of a document by its path
  /path/{docPath}/@task:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: id of the user who is actor of the task
        in: query
        name: userId
        required: true
        type: string
      - description: id of the workflow instance the task belongs to
        in: query
        name: workflowInstanceId
        required: true
        type: string
      - description: name of the workflow model of the task (i.e. 'SerialDocumentReview',
          'ParallelDocumentReview')
        in: query
        name: workflowModelName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/tasks'
      description: Only task instance which you have permission to see will be returned
      operationId: getDocumentRelatedWorkflowTasks
      summary: List tasks of the given document
  /path/{docPath}/@workflow:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflows'
      description: Only workflow instances launched by current user will be returned
      operationId: getDocumentWorkflow
      summary: Get the workflow instances launched on the given document
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The workflow request describing the workflow instance to be created
        in: body
        name: workflowRequestBody
        required: true
        schema:
          $ref: '#/definitions/workflowRequest'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflowRequest'
      operationId: createWorkflowInstanceOnDocument
      summary: Start a workflow instance on the given document
  /query:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'The query to perform. (By default: SELECT * FROM Document)'
        in: query
        name: query
        required: false
        type: string
      - description: 'The number of entries per page. (By default: 0)'
        in: query
        name: pageSize
        required: false
        type: integer
      - description: 'The selected page index. (By default: 0)'
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: 'The maximum entries. (By default: 200)'
        in: query
        name: maxResults
        required: false
        type: integer
      - description: 'Property(ies) sorting. (Example: sortBy=''dc:title,dc:description'')'
        in: query
        name: sortBy
        required: false
        type: string
      - description: 'Sort order. (Example: sortOrder=''DESC,ASC'')'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: 'Ordered parameters. (Example: for ''Select * From Document where
          dc:title = ?'' -> queryParams=''titleA'')'
        in: query
        name: queryParams
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/search'
      description: You can have also named parameters in the query. See http://doc.nuxeo.com/x/qAc5AQ
      operationId: query
      summary: Perform Named Page Provider on the repository
  /query/{providerName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The page provider name.
        in: path
        name: providerName
        required: true
        type: string
      - description: 'The number of entries per page. (By default: 0)'
        in: query
        name: pageSize
        required: false
        type: integer
      - description: 'The selected page index. (By default: 0)'
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: 'The maximum entries. (By default: 200)'
        in: query
        name: maxResults
        required: false
        type: integer
      - description: 'Property(ies) sorting. (Example: sortBy=''dc:title,dc:description'')'
        in: query
        name: sortBy
        required: false
        type: string
      - description: 'Sort order. (Example: sortOrder=''DESC,ASC'')'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: 'Ordered parameters. (Example: for ''Select * From Document where
          dc:title = ?'' -> queryParams=''titleA'')'
        in: query
        name: queryParams
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/search'
      description: You can have also named parameters in the query. See http://doc.nuxeo.com/x/qAc5AQ
      operationId: pageprovider
      summary: Perform Named Page Provider on the repository
  /repo/{repoId}/id/{docId}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      description: Only documents which you have permission to see will be returned
      operationId: deleteDocumentById
      summary: Deletes a document by its id
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: Only documents which you have permission to see will be returned
      operationId: getDocumentById
      summary: Find a document by its id
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      operationId: createDocumentById
      summary: Creates a document by its parent id
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: Id of the document
        in: path
        name: docId
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/document'
      description: Only documents which you have permission can be updated. Only the
        properties part of the document object is taken into account for update
      operationId: updateDocumentById
      summary: Updates a document by its id
  /repo/{repoId}/path/{docPath}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      description: Only documents which you have permission to see will be returned
      operationId: deleteDocumentByPath
      summary: Deletes a document by its path
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Document'
      description: Only documents which you have permission to see will be returned
      operationId: getDocumentByPath
      summary: Find a document by its path
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Document'
      operationId: createDocumentByPath
      summary: Creates a document by its parent path
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The name of the repository
        in: path
        name: repoId
        required: true
        type: string
      - description: 'Path of the document, ex: ''default-domain'''
        in: path
        name: docPath
        required: true
        type: string
      - description: The created or updated document object
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/document'
      - description: Schemas to be included in response
        in: header
        name: X-NXDocumentProperties
        required: false
        type: string
      - description: Categories to be included in context parameters map
        in: header
        name: X-NXContext-Category
        required: false
        type: string
      - description: 'Checkin Document Version. Return the last document version.
          (not live document) | Values: major or minor or none'
        in: header
        name: X-Versioning-Option
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Document'
      description: Only documents which you have permission can be updated. Only the
        properties part of the document object is taken into account for update
      operationId: updateDocumentByPath
      summary: Updates a document by its path
  /search/lang/{queryLanguage}/execute:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The query language.
        in: path
        name: queryLanguage
        required: true
        type: string
      - description: 'The query to perform. (By default: SELECT * FROM Document)'
        in: query
        name: query
        required: false
        type: string
      - description: 'The number of entries per page. (By default: 0)'
        in: query
        name: pageSize
        required: false
        type: integer
      - description: 'The selected page index. (By default: 0)'
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        format: int64
        in: query
        name: offset
        required: false
        type: integer
      - description: 'The maximum entries. (By default: 200)'
        in: query
        name: maxResults
        required: false
        type: integer
      - description: 'Property(ies) sorting. (Example: sortBy=''dc:title,dc:description'')'
        in: query
        name: sortBy
        required: false
        type: string
      - description: 'Sort order. (Example: sortOrder=''DESC,ASC'')'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: 'Ordered parameters. (Example: for ''Select * From Document where
          dc:title = ?'' -> queryParams=''titleA'')'
        in: query
        name: queryParams
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: You can have also named parameters in the query. See http://doc.nuxeo.com/x/qAc5AQ
      operationId: query
      summary: Performs a search query.
  /search/pp/{providerName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The page provider name.
        in: path
        name: providerName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/pageproviderdef'
      operationId: getPageProviderDefinition
      summary: Gets the definition of a page provider.
  /search/pp/{providerName}/execute:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The page provider name.
        in: path
        name: providerName
        required: true
        type: string
      - description: 'The number of entries per page. (By default: 0)'
        in: query
        name: pageSize
        required: false
        type: integer
      - description: 'The selected page index. (By default: 0)'
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        format: int64
        in: query
        name: offset
        required: false
        type: integer
      - description: 'The maximum entries. (By default: 200)'
        in: query
        name: maxResults
        required: false
        type: integer
      - description: 'Property(ies) sorting. (Example: sortBy=''dc:title,dc:description'')'
        in: query
        name: sortBy
        required: false
        type: string
      - description: 'Sort order. (Example: sortOrder=''DESC,ASC'')'
        in: query
        name: sortOrder
        required: false
        type: string
      - description: 'Ordered parameters. (Example: for ''Select * From Document where
          dc:title = ?'' -> queryParams=''titleA'')'
        in: query
        name: queryParams
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      description: You can have also named parameters in the query. See http://doc.nuxeo.com/x/qAc5AQ
      operationId: pageprovider
      summary: Perform Named Page Provider on the repository
  /search/saved:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the page provider.
        in: query
        name: pageProvider
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/savedsearches'
      operationId: getSavedSearches
      summary: Returns the list of saved searches.
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The created or updated saved search object.
        in: body
        name: saved search
        required: true
        schema:
          $ref: '#/definitions/savedsearch'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/savedsearch'
      operationId: saveSearch
      summary: Saves a search.
  /search/saved/{searchId}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The search id.
        in: path
        name: searchId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: deleteSavedSearch
      summary: Deletes the saved search with the supplied id.
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The search id.
        in: path
        name: searchId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/savedsearch'
      operationId: getSavedSearch
      summary: Return the saved search with the supplied id.
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The search id.
        in: path
        name: searchId
        required: true
        type: string
      - description: The created or updated saved search object.
        in: body
        name: saved search
        required: true
        schema:
          $ref: '#/definitions/savedsearch'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/savedsearch'
      operationId: updateSavedSearch
      summary: Updates the saved search with the supplied id.
  /search/saved/{searchId}/execute:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The search id.
        in: path
        name: searchId
        required: true
        type: string
      - description: 'The number of entries per page. (By default: 0)'
        in: query
        name: pageSize
        required: false
        type: integer
      - description: 'The selected page index. (By default: 0)'
        in: query
        name: currentPageIndex
        required: false
        type: integer
      - description: The offset of the returned result set. If set, the 'currentPageIndex'
          parameter is ignored.
        format: int64
        in: query
        name: offset
        required: false
        type: integer
      - description: 'The maximum entries. (By default: 200)'
        in: query
        name: maxResults
        required: false
        type: integer
      - description: 'Property(ies) sorting. (Example: sortBy=''dc:title,dc:description'')'
        in: query
        name: sortBy
        required: false
        type: string
      - description: 'Sort order. (Example: sortOrder=''DESC,ASC'')'
        in: query
        name: sortOrder
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/documents'
      operationId: executeSavedSearch
      summary: Executes saved searches, returning its results.
  /task:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: id of the user who is actor of the task
        in: query
        name: userId
        required: true
        type: string
      - description: id of the workflow instance the task belongs to
        in: query
        name: workflowInstanceId
        required: true
        type: string
      - description: name of the workflow model of the task (i.e. 'SerialDocumentReview',
          'ParallelDocumentReview')
        in: query
        name: workflowModelName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/tasks'
      description: Only task instance which you have permission to see will be returned
      operationId: getTasks
      summary: Query tasks by user and workflow ids
  /task/{taskId}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/task'
      description: Only task instance which you have permission to see will be returned
      operationId: getTaskById
      summary: Get a task by its id
  /task/{taskId}/delegate:
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: string
      - description: comma separated ids of the delegated actors
        in: query
        name: delegatedActors
        required: true
        type: string
      - description: comment
        in: query
        name: comment
        required: false
        type: string
      responses:
        200:
          description: No response was specified
      description: See https://doc.nuxeo.com/x/34z1
      operationId: delegateTask
      summary: Delegate a task
  /task/{taskId}/reassign:
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: string
      - description: comma separated ids of the new actors
        in: query
        name: actors
        required: true
        type: string
      - description: comment
        in: query
        name: comment
        required: false
        type: string
      responses:
        200:
          description: No response was specified
      description: See https://doc.nuxeo.com/x/1YcZAQ
      operationId: reassignTask
      summary: Reassign a task
  /task/{taskId}/{action}:
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: string
      - description: the action to be applied when completed the task. The action
          determines the transition to be followed and the next task within the workflow.
        in: path
        name: action
        required: true
        type: string
      - description: The task completion describing the needed information to complete
          the task
        in: body
        name: taskCompletionRequestBody
        required: true
        schema:
          $ref: '#/definitions/taskCompletionRequest'
      responses:
        200:
          description: No response was specified
      description: Complete a workflow related task
      operationId: completeTask
      summary: Complete task
  /token:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Application symbolic name
        in: query
        name: application
        required: false
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/AuthenticationTokenList'
      operationId: getTokens
      summary: Gets all readable authentication tokens
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Application symbolic name
        in: query
        name: application
        required: false
        type: string
      - description: Device identifier
        in: query
        name: deviceId
        required: true
        type: string
      - description: Device description
        in: query
        name: deviceDescription
        required: true
        type: string
      - description: Permission granted with the authentication token
        in: query
        name: permission
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: createToken
      summary: Acquire new authentication token
  /token/{token}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Authentication Token
        in: path
        name: token
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      operationId: deleteToken
      summary: Delete an existing authentication token
  /user:
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The user to be created or updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: createUser
      summary: Create a user
  /user/search:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Query string
        in: query
        name: q
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/users'
      operationId: searchUser
      summary: Get a user by its name
  /user/{userName}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: deleteUserByName
      summary: Delete a user by its name
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: getUserByName
      summary: Get a user by its name
    put:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      - description: The user to be created or updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: updateUserByName
      summary: Update a user by its name
  /user/{userName}/group/{groupName}:
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: 'Username of the user, ex: ''Administrator'''
        in: path
        name: userName
        required: true
        type: string
      - description: 'Name of the group, ex: ''members'''
        in: path
        name: groupName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/user'
      operationId: addAGroupToUser
      summary: Add a group to a user
  /workflow:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflows'
      description: Only workflow instances launched by current user will be returned
      operationId: getRunningWorkflowInstancesLaunchedByCurrentUser
      summary: Get the workflow instances launched by the current user
    post:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: The workflow request describing the workflow instance to be created
        in: body
        name: workflowRequestBody
        required: true
        schema:
          $ref: '#/definitions/workflowRequest'
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflowRequest'
      operationId: createWorkflowInstanceById
      summary: Start a workflow instance
  /workflow/{workflowInstanceId}:
    delete:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the workflow instance
        in: path
        name: workflowInstanceId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
      description: Only workflow instance which you have permission to see will be
        returned
      operationId: deleteWorkflowInstanceById
      summary: Delete a workflow instance by its id
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the workflow instance
        in: path
        name: workflowInstanceId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflow'
      description: Only workflow instance which you have permission to see will be
        returned
      operationId: getWorkflowInstanceById
      summary: Find a workflow instance by its id
  /workflow/{workflowInstanceId}/graph:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Id of the workflow instance
        in: path
        name: workflowInstanceId
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflowGraph'
      description: Get the json serialization of a workflow instance graph
      operationId: getWorkflowModelGraph
      summary: Get the json serialization of a workflow instance graph
  /workflowModel:
    get:
      produces:
      - application/json
      - application/json+nxentity
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflows'
      operationId: getWorkflowModels
      summary: Get the workflow models
  /workflowModel/{modelName}:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the workflow model
        in: path
        name: modelName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflow'
      operationId: getWorkflowModel
      summary: Find a workflow model by its name
  /workflowModel/{modelName}/graph:
    get:
      produces:
      - application/json
      - application/json+nxentity
      parameters:
      - description: Name of the workflow model
        in: path
        name: modelName
        required: true
        type: string
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/workflowGraph'
      description: Get the json serialization of a workflow model graph
      operationId: getWorkflowModelGraph
      summary: Get the json serialization of a workflow model graph
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":42:{s:3:\"Ace\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"granted\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"permission\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"username\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:3:{i:0;s:7:\"granted\";i:1;s:10:\"permission\";i:2;s:8:\"username\";}s:11:\"uniqueItems\";b:0;}s:3:\"Acl\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"ace\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Ace\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:3:\"ace\";i:1;s:4:\"name\";}s:11:\"uniqueItems\";b:0;}s:3:\"Acp\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"acls\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Acl\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:23:\"AuthenticationTokenList\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"token\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}s:3:\"url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"userName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:3:{i:0;s:5:\"token\";i:1;s:3:\"url\";i:2;s:8:\"userName\";}s:11:\"uniqueItems\";b:0;}s:14:\"BusinessObject\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"value\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:18:\"BusinessObjectList\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/BusinessObject\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:8:\"GroupRef\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"label\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:3:\"url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:3:{i:0;s:5:\"label\";i:1;s:4:\"name\";i:2;s:3:\"url\";}s:11:\"uniqueItems\";b:0;}s:10:\"LogEntries\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/LogEntry\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:8:\"LogEntry\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":12:{s:8:\"category\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"comment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"docLifeCycle\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"docPath\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"docType\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"docUUID\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"eventDate\";O:8:\"stdClass\":3:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"eventId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"logDate\";O:8:\"stdClass\":3:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:13:\"principalName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"repositoryId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:12:{i:0;s:8:\"category\";i:1;s:7:\"comment\";i:2;s:12:\"docLifeCycle\";i:3;s:7:\"docPath\";i:4;s:7:\"docType\";i:5;s:7:\"docUUID\";i:6;s:11:\"entity-type\";i:7;s:9:\"eventDate\";i:8;s:7:\"eventId\";i:9;s:7:\"logDate\";i:10;s:13:\"principalName\";i:11;s:12:\"repositoryId\";}s:11:\"uniqueItems\";b:0;}s:20:\"OperationDescription\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":8:{s:8:\"category\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"label\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"params\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:39:\"#/definitions/OperationParamDescription\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:8:\"requires\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"signature\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:3:\"url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:5:{i:0;s:2:\"id\";i:1;s:5:\"label\";i:2;s:6:\"params\";i:3;s:9:\"signature\";i:4;s:3:\"url\";}s:11:\"uniqueItems\";b:0;}s:24:\"OperationDescriptionList\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"codec\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:10:\"operations\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/OperationDescription\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:4:\"path\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:3:{i:0;s:5:\"codec\";i:1;s:10:\"operations\";i:2;s:4:\"path\";}s:11:\"uniqueItems\";b:0;}s:25:\"OperationParamDescription\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":7:{s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"order\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"required\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"values\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:6:\"widget\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:4:{i:0;s:11:\"description\";i:1;s:4:\"name\";i:2;s:8:\"required\";i:3;s:4:\"type\";}s:11:\"uniqueItems\";b:0;}s:15:\"OperationParams\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"context\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"uniqueItems\";b:0;}s:6:\"params\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:7:\"context\";i:1;s:6:\"params\";}s:11:\"uniqueItems\";b:0;}s:14:\"changePassword\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"newPassword\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"oldPassword\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:11:\"newPassword\";i:1;s:11:\"oldPassword\";}}s:16:\"directoryEntries\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/directoryEntry\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:14:\"directoryEntry\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:13:\"directoryName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:13:\"directoryName\";i:1;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:7:\"docType\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"facets\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"parent\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"schemas\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}}s:8:\"required\";a:5:{i:0;s:11:\"entity-type\";i:1;s:6:\"facets\";i:2;s:4:\"name\";i:3;s:6:\"parent\";i:4;s:7:\"schemas\";}}s:8:\"document\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":13:{s:11:\"changeToken\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:17:\"contextParameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"facets\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:12:\"lastModified\";O:8:\"stdClass\":3:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"path\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:1;}s:10:\"repository\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"state\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:3:\"uid\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"versionLabel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:9:\"documents\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Document\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:5:\"facet\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"schemas\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}}s:8:\"required\";a:1:{i:0;s:4:\"name\";}}s:14:\"layoutResource\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:3:\"url\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/layoutResource\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:3:\"url\";}s:11:\"uniqueItems\";b:0;}s:18:\"oauth2ProviderData\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":14:{s:22:\"authorizationServerURL\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:16:\"authorizationURL\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"clientId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"clientSecret\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"isAuthorized\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:9:\"isEnabled\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"scopes\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"serviceName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:14:\"tokenServerURL\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:20:\"userAuthorizationURL\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"userId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:11:\"serviceName\";}s:11:\"uniqueItems\";b:0;}s:22:\"oauth2ProviderDataList\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/definitions/oauth2ProviderData\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:23:\"oauth2ProviderTokenData\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"token\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:1:{i:0;s:5:\"token\";}s:11:\"uniqueItems\";b:0;}s:15:\"oauth2TokenData\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":8:{s:8:\"clientId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"creationDate\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"isShared\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"nuxeoLogin\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:12:\"serviceLogin\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"serviceName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:10:\"sharedWith\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:8:\"required\";a:4:{i:0;s:11:\"entity-type\";i:1;s:10:\"nuxeoLogin\";i:2;s:12:\"serviceLogin\";i:3;s:11:\"serviceName\";}s:11:\"uniqueItems\";b:0;}s:19:\"oauth2TokenDataList\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/oauth2TokenData\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:5:\"query\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"label\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:3:\"url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:3:{i:0;s:5:\"label\";i:1;s:4:\"name\";i:2;s:3:\"url\";}s:11:\"uniqueItems\";b:0;}s:11:\"savedsearch\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":13:{s:16:\"currentPageIndex\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:10:\"maxResults\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:16:\"pageProviderName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"params\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"uniqueItems\";b:0;}s:5:\"query\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:13:\"queryLanguage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"queryParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:6:\"sortBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"sortOrder\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:5:\"title\";}s:11:\"uniqueItems\";b:0;}s:13:\"savedsearches\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/savedsearch\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:6:\"schema\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"@prefix\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"fields\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:7:\"@prefix\";i:1;s:6:\"fields\";i:2;s:4:\"name\";}}s:4:\"task\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":15:{s:6:\"actors\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:8:\"comments\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/taskComments\";}s:4:\"type\";s:5:\"array\";}s:7:\"created\";O:8:\"stdClass\":3:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"directive\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"dueDate\";O:8:\"stdClass\":3:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"nodeName\";O:8:\"stdClass\":3:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:5:\"state\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:17:\"targetDocumentIds\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:8:\"taskInfo\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/taskInfo\";s:11:\"uniqueItems\";b:1;}s:4:\"type\";O:8:\"stdClass\":3:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"variables\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:1;}s:10:\"workflowId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:10:\"taskAction\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"label\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:3:\"url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:3:{i:0;s:5:\"label\";i:1;s:4:\"name\";i:2;s:3:\"url\";}s:11:\"uniqueItems\";b:0;}s:12:\"taskComments\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"author\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"date\";O:8:\"stdClass\":3:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:6:\"author\";i:1;s:4:\"date\";}s:11:\"uniqueItems\";b:0;}s:21:\"taskCompletionRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:7:\"comment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:13:\"nodeVariables\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:1;}s:16:\"worflowVariables\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:1;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:8:\"taskInfo\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"actions\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/taskAction\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:14:\"layoutResource\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/layoutResource\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:7:\"actions\";i:1;s:14:\"layoutResource\";}s:11:\"uniqueItems\";b:0;}s:5:\"tasks\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/task\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:4:\"user\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":6:{s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:14:\"extendedGroups\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/GroupRef\";}s:11:\"uniqueItems\";b:0;}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:15:\"isAdministrator\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isAnonymous\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:4:{i:0;s:11:\"entity-type\";i:1;s:2:\"id\";i:2;s:15:\"isAdministrator\";i:3;s:11:\"isAnonymous\";}s:11:\"uniqueItems\";b:0;}s:8:\"userList\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":19:{s:16:\"currentPageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:17:\"currentPageOffset\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:15:\"currentPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/user\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}s:11:\"erroMessage\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:8:\"hasError\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:19:\"isLastPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:6:\"isNext\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"isPaginable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:23:\"isPreviousPageAvailable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:10:\"isSortable\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"uniqueItems\";b:0;}s:11:\"maxPageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:13:\"numberOfPages\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"pageIndex\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:8:\"pageSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:11:\"resultCount\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}s:9:\"totalSize\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}s:8:\"workflow\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":6:{s:19:\"attachedDocumentIds\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"initiator\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:9:\"variables\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:1;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:13:\"workflowGraph\";O:8:\"stdClass\":1:{s:11:\"uniqueItems\";b:0;}s:15:\"workflowRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:11:\"documentIds\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:16:\"worflowVariables\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:23:\"#/definitions/container\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:11:\"uniqueItems\";b:1;}s:17:\"workflowModelName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:1:{i:0;s:11:\"entity-type\";}s:11:\"uniqueItems\";b:0;}s:9:\"workflows\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"entity-type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:0;}s:7:\"entries\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/workflow\";}s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:0;}}s:8:\"required\";a:2:{i:0;s:11:\"entity-type\";i:1;s:7:\"entries\";}s:11:\"uniqueItems\";b:0;}}"
...
