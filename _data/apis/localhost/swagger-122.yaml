---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":4:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:20:\"Mean
  Application API\";s:11:\"description\";s:20:\"Mean Application API\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"MIT\";s:3:\"url\";s:35:\"https://opensource.org/licenses/MIT\";}}"
host: localhost:3000
basePath: /api/
paths:
  /auth/login:
    post:
      tags:
      - Auth
      description: Login to the system
      parameters:
      - name: login
        in: body
        description: User auth login details
        schema:
          type: object
          required:
          - email
          - password
          properties:
            email:
              type: string
            password:
              type: string
      produces:
      - application/json
      responses:
        200:
          description: Usuario logueado con token
          schema:
            type: object
            properties:
              user:
                type: object
                $ref: '#/definitions/User'
              token:
                type: string
  /auth/register:
    post:
      tags:
      - Auth
      description: Register to the system and then logs the user
      parameters:
      - name: register
        in: body
        description: User auth registration details
        schema:
          type: object
          required:
          - user
          - company
          properties:
            user:
              type: object
              required:
              - email
              - name
              - lastName
              - documentId
              - password
              properties:
                email:
                  type: string
                  uniqueItems: true
                name:
                  type: string
                lastName:
                  type: string
                documentId:
                  type: string
                phoneNumber:
                  type: string
                password:
                  type: string
            company:
              type: object
              required:
              - name
              - cuit
              properties:
                name:
                  type: string
                  uniqueItems: true
                cuit:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                webSite:
                  type: string
      produces:
      - application/json
      responses:
        200:
          description: User is created then loggedin and has a valid token
          schema:
            type: object
            properties:
              user:
                type: object
                $ref: '#/definitions/User'
              token:
                type: string
  /user/check:
    post:
      tags:
      - Users
      description: Checks if a user with the provided email or/and Identification
        number exists in the collection
      parameters:
      - name: exists
        in: body
        description: Checks user existence in user collection
        schema:
          type: object
          properties:
            email:
              type: string
            documentId:
              type: string
      produces:
      - application/json
      responses:
        200:
          description: Returns true or false weither the user exists or not
          schema:
            type: boolean
  /user/create:
    post:
      tags:
      - Users
      description: Adds a user to the Users collection
      parameters:
      - name: create
        in: body
        description: User Added to Users collection
        schema:
          type: object
          properties:
            user:
              type: object
              $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        200:
          description: Returns the user created with the id in the collection
          schema:
            $ref: '#/definitions/User'
      security:
      - Authorization: []
  /user/get:
    post:
      tags:
      - Users
      description: Get the users of the same company of the user, with optional filters
      parameters:
      - name: get
        in: body
        description: Finds users with the sent filters
        schema:
          type: object
          properties:
            filters:
              type: object
              properties:
                name:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
                profiles:
                  type: array
                  items:
                    type: string
      produces:
      - application/json
      responses:
        200:
          description: Returns the user created with the id in the collection
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
      - Authorization: []
  /user/update:
    post:
      tags:
      - Users
      description: Adds a user to the Users collection
      parameters:
      - name: create
        in: body
        description: User Added to Users collection
        schema:
          type: object
          properties:
            user:
              type: object
              $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        200:
          description: Returns the user created in the collection
          schema:
            type: object
            properties:
              user:
                type: object
                $ref: '#/definitions/User'
      security:
      - Authorization: []
  /company/check:
    post:
      tags:
      - Companies
      description: Checks if a company with the provided name or cuit exists in the
        collection
      parameters:
      - name: exists
        in: body
        description: Checks company existence in companies collection
        schema:
          type: object
          properties:
            name:
              type: string
            cuit:
              type: string
      produces:
      - application/json
      responses:
        200:
          description: Returns true or false weither the company exists or not
          schema:
            type: boolean
  /company/create:
    post:
      tags:
      - Companies
      description: Adds a company to the companies collection
      parameters:
      - name: create
        in: body
        description: Create a company document
        schema:
          type: object
          properties:
            company:
              type: object
              $ref: '#/definitions/Company'
      produces:
      - application/json
      responses:
        200:
          description: Company is created and its data is returned
          schema:
            $ref: '#/definitions/Company'
      security:
      - Authorization: []
  /company/get:
    post:
      tags:
      - Companies
      description: Get the companies in the collection, with optional filters
      parameters:
      - name: get
        in: body
        description: Finds companies with the sent filters
        schema:
          type: object
          properties:
            filters:
              type: object
              properties:
                name:
                  type: string
            populateFields:
              type: array
              items:
                type: string
      produces:
      - application/json
      responses:
        200:
          description: Returns the companies matching the filters in the collection
          schema:
            type: object
            properties:
              companies:
                type: array
                items:
                  $ref: '#/definitions/Company'
      security:
      - Authorization: []
  /company/add-sales-channel:
    post:
      tags:
      - Companies
      description: Creates new company as a sales channel of the company of the user
        doing the request
      parameters:
      - name: get
        in: body
        description: Creates new company as a sales channel of the company of the
          user doing the request
        schema:
          type: object
          properties:
            company:
              type: object
              $ref: '#/definitions/Company'
      produces:
      - application/json
      responses:
        200:
          description: Returns the company created
          schema:
            type: object
            properties:
              company:
                type: array
                items:
                  $ref: '#/definitions/Company'
      security:
      - Authorization: []
  /opportunity/create:
    post:
      tags:
      - Opportunities
      description: Adds an opportunity to the opportunities collection
      parameters:
      - name: create
        in: body
        description: Create an opportunity document
        schema:
          type: object
          properties:
            opportunity:
              type: object
              $ref: '#/definitions/Opportunity'
      produces:
      - application/json
      responses:
        200:
          description: Opportunity is created and its data is returned
          schema:
            $ref: '#/definitions/Opportunity'
      security:
      - Authorization: []
  /opportunity/get:
    post:
      tags:
      - Opportunities
      description: Get the opportunities in the collection, which the user sending
        the request has access to, with optional filters
      parameters:
      - name: get
        in: body
        description: Finds opportunities with the sent filters
        schema:
          type: object
          properties:
            filters:
              type: object
              properties:
                name:
                  type: string
            onlyUserOpportunities:
              type: boolean
      produces:
      - application/json
      responses:
        200:
          description: Returns the opportunities matching the filters and which user
            has access to in the collection
          schema:
            type: object
            properties:
              opportunities:
                type: array
                items:
                  $ref: '#/definitions/Opportunity'
      security:
      - Authorization: []
  /demo/create:
    post:
      tags:
      - Demos
      description: Adds an demo to the demos collection
      parameters:
      - name: create
        in: body
        description: Create a demo document
        schema:
          type: object
          properties:
            demo:
              type: object
              $ref: '#/definitions/Demo'
      produces:
      - application/json
      responses:
        200:
          description: Demo is created and its data is returned
          schema:
            $ref: '#/definitions/Demo'
      security:
      - Authorization: []
  /demo/get:
    post:
      tags:
      - Demos
      description: Get the demos in the collection, which the user sending the request
        has access to, with optional filters
      parameters:
      - name: get
        in: body
        description: Finds demos with the sent filters
        schema:
          type: object
          properties:
            filters:
              type: object
              properties:
                opportunity:
                  type: string
      produces:
      - application/json
      responses:
        200:
          description: Returns the demos matching the filters and which user has access
            to in the collection
          schema:
            type: object
            properties:
              demos:
                type: array
                items:
                  $ref: '#/definitions/Demo'
      security:
      - Authorization: []
  /industry/create:
    post:
      tags:
      - Industry
      description: Adds an industry to the collection
      parameters:
      - name: create
        in: body
        description: Create an industry document
        schema:
          type: object
          properties:
            industry:
              type: object
              $ref: '#/definitions/Industry'
      produces:
      - application/json
      responses:
        200:
          description: Industry is created and its data is returned
          schema:
            $ref: '#/definitions/Industry'
      security:
      - Authorization: []
produces:
- application/json
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":4:{s:4:\"User\";O:8:\"stdClass\":2:{s:8:\"required\";a:5:{i:0;s:5:\"email\";i:1;s:4:\"name\";i:2;s:8:\"lastName\";i:3;s:10:\"documentId\";i:4;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":14:{s:3:\"_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;s:8:\"readOnly\";b:1;}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}s:10:\"documentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"userCompany\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"supervisor\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"roles\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"profiles\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:9:\"createdAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:9:\"createdBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:10:\"modifiedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:10:\"modifiedBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}}}s:7:\"Company\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:4:\"cuit\";}s:10:\"properties\";O:8:\"stdClass\":23:{s:3:\"_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:10:\"uniqueItem\";b:1;s:8:\"readOnly\";b:1;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}s:4:\"cuit\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:10:\"uniqueItem\";b:1;}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"website\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"industry\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"country\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"origin\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"employeesCount\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:12:\"anualBilling\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:11:\"hasStandard\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"default\";s:5:\"false\";}s:14:\"branchesNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"isClient\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"default\";s:5:\"false\";}s:14:\"isSalesChannel\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"default\";s:5:\"false\";}s:14:\"salesChannelOf\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"users\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:13:\"salesChannels\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:9:\"createdAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:9:\"createdBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:11:\"modifieddAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:10:\"modifiedBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}}}s:11:\"Opportunity\";O:8:\"stdClass\":2:{s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:11:\"description\";i:2;s:13:\"companyClient\";}s:10:\"properties\";O:8:\"stdClass\":15:{s:3:\"_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:10:\"uniqueItem\";b:1;s:8:\"readOnly\";b:1;}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"companyClient\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"estimatedTotal\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"automation\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"docManager\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"digitization\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"hardware\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"demo\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:18:\"#/definitions/Demo\";}s:8:\"proposal\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:18:\"#/definitions/Demo\";}s:9:\"createdAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:9:\"createdBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:11:\"modifieddAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:10:\"modifiedBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}}}s:4:\"Demo\";O:8:\"stdClass\":2:{s:8:\"required\";a:1:{i:0;s:8:\"dmeoType\";}s:10:\"properties\";O:8:\"stdClass\":13:{s:3:\"_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:10:\"uniqueItem\";b:1;s:8:\"readOnly\";b:1;}s:11:\"opportunity\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:8:\"dmeoType\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"possibleDate_1\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"possibleDate_2\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"possibleDate_3\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"selectedDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"genericDemos\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:12:\"workflowFile\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"buffer\";}s:11:\"contentType\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"createdAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:9:\"createdBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:11:\"modifieddAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:10:\"modifiedBy\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}}}}"
...
