---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:31:\"This is our backend
  api server.\";s:5:\"title\";s:11:\"Backend API\";s:7:\"contact\";O:8:\"stdClass\":0:{}s:7:\"license\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"MIT\";}s:7:\"version\";s:3:\"0.1\";}"
host: localhost:8080
basePath: /v1
paths:
  /comments:
    post:
      security:
      - ApiKeyAuth: []
      description: Create a new comment
      consumes:
      - application/json
      produces:
      - application/json
      summary: Create a new comment
      parameters:
      - description: Post comment
        name: post
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/common.CommentInput'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/model.Comment'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/common.ErrResp'
        500:
          description: StatusInternalServerError
  /login:
    post:
      description: Login a user
      consumes:
      - application/json
      produces:
      - application/json
      summary: Login a user
      parameters:
      - description: Login user
        name: user
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/common.LoginForm'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/model.Token'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/common.ErrResp'
        500:
          description: StatusInternalServerError
  /me:
    get:
      security:
      - ApiKeyAuth: []
      consumes:
      - application/json
      produces:
      - application/json
      summary: Me message
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.User'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/common.ErrResp'
        500:
          description: StatusInternalServerError
  /posts:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      summary: Posts pagination query all
      parameters:
      - type: integer
        default: 100
        description: limit
        name: limit
        in: query
      - type: integer
        default: 0
        description: offset
        name: offset
        in: query
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.Post'
        500:
          description: StatusInternalServerError
    post:
      security:
      - ApiKeyAuth: []
      description: Register a new user
      consumes:
      - application/json
      produces:
      - application/json
      summary: Register a new user
      parameters:
      - description: Post content
        name: post
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/common.PostInput'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/model.Post'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/common.ErrResp'
        500:
          description: StatusInternalServerError
  /posts/{id}:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      summary: Posts query by id
      parameters:
      - type: string
        description: Post id
        name: id
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.Post'
        500:
          description: StatusInternalServerError
  /posts/{id}/comments:
    get:
      security:
      - ApiKeyAuth: []
      description: Get a post's comments
      consumes:
      - application/json
      produces:
      - application/json
      summary: Get a post's comments
      parameters:
      - type: string
        description: Post id
        name: id
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.Comment'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/common.ErrResp'
        500:
          description: StatusInternalServerError
  /register:
    post:
      description: Register a new user
      consumes:
      - application/json
      produces:
      - application/json
      summary: Register a new user
      parameters:
      - description: Register user
        name: user
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/common.RegisterForm'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/model.Token'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/common.ErrResp'
        500:
          description: StatusInternalServerError
  /users_batch:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      summary: Posts pagination query all
      parameters:
      - type: string
        description: search by ids
        name: ids
        in: query
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.User'
        500:
          description: StatusInternalServerError
definitions: !php/object "O:8:\"stdClass\":9:{s:19:\"common.CommentInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:7:\"content\";i:1;s:7:\"post_id\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"post_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"common.ErrResp\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"errors\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"common.LoginForm\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"common.PostInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:7:\"content\";i:1;s:5:\"title\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:19:\"common.RegisterForm\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:5:\"email\";i:2;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:6:\"avatar\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:13:\"model.Comment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:9:\"author_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"createdAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"deletedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"post_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"updatedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"model.Post\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:9:\"author_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"comments\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/model.Comment\";}}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"createdAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"deletedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"updatedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"model.Token\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:9:\"createdAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"deletedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"updatedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"model.User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:6:\"avator\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"createdAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"deletedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"updatedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
