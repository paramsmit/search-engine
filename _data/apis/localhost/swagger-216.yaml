---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:7:\"version\";s:2:\"v1\";s:5:\"title\";s:6:\"Portal\";}"
host: localhost:10474
paths:
  /api/Admins/{id}:
    get:
      tags:
      - Admins
      summary: Gets a single admin from the system.
      operationId: Admins_GetAdmin
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      responses:
        401:
          description: User not logged in or not authorized.
        404:
          description: Admin not found.
        200:
          description: Success
          schema:
            $ref: '#/definitions/AdminResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - Admins
      summary: Edits admin information from the system
      operationId: Admins_PutUpdateAdmin
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: ID of the Admin to Update
        required: true
        type: string
      - name: request
        in: body
        description: Admin First Name and Last Name
        required: true
        schema:
          $ref: '#/definitions/UpdateAdminRequest'
      responses:
        401:
          description: User not logged in, not an admin or doesnt exsist.
        404:
          description: Bad ID
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Admins:
    get:
      tags:
      - Admins
      summary: Gets all admins from the system
      operationId: Admins_GetAdmins
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[AdminResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Admins
      summary: Adds an administrator to the system
      operationId: Admins_PostAdmins
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: request
        in: body
        description: Admin information, First Name, Last Name and Email
        required: true
        schema:
          $ref: '#/definitions/NewAdminRequest'
      responses:
        401:
          description: User not logged in or not an admin. Invalid name or email addresses.
        409:
          description: User already exists
        400:
          description: Password is not a @microsoft.com email
        201:
          description: Success
          schema:
            $ref: '#/definitions/AdminResponse'
      deprecated: false
      security:
      - oauth: []
  /api/calendar/user:
    post:
      tags:
      - Calendar
      summary: Gets Calendar Information of the student.
      operationId: Calendar_PostStudentCalendarInformation
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: request
        in: body
        description: Start &amp; End date for calendar
        required: true
        schema:
          $ref: '#/definitions/StudentCalendarInfomationRequest'
      - name: id
        in: query
        description: User ID - optional. Only for admins
        required: true
        type: string
      responses:
        401:
          description: User not logged in, trying to access someone elses calendar.
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/CalendarResponse'
      deprecated: false
      security:
      - oauth: []
  /api/calendar/share:
    post:
      tags:
      - Calendar
      summary: Creates a share calendar request.
      operationId: Calendar_PostShareCalendar
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: The email of the person to share with
        required: true
        schema:
          $ref: '#/definitions/CalendarShareRequest'
      responses:
        204:
          description: Success
        401:
          description: User not logged in
      deprecated: false
      security:
      - oauth: []
  /api/Calendar/{id}:
    delete:
      tags:
      - Calendar
      summary: Deletes a calendar entry from a calendar.
      operationId: Calendar_DeleteCalendarEntry
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Calendar Id
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not authorized, trying to remove someone elses information.
        404:
          description: Calendar entry not found.
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Calendar:
    get:
      tags:
      - Calendar
      summary: Gets all the calendars from the system.
      operationId: Calendar_GetCalendar
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in
        400:
          description: Calendar for user does not exisit.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[CalendarResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Calendar
      summary: Used to add a calendar to the database as well as courses and exams
        to the calendar.
      operationId: Calendar_PostUserCalendar
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      parameters:
      - name: calendar
        in: body
        description: Calendar Information
        required: true
        schema:
          $ref: '#/definitions/CalendarRequest'
      responses:
        401:
          description: User not logged in, not authorized to view information.
        404:
          description: course or exam already exisits in the database.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CalendarResponse'
      deprecated: false
      security:
      - oauth: []
  /api/courses/addStudent:
    post:
      tags:
      - Courses
      summary: Add a student to a students list in course
      operationId: Courses_PostAddStudentsToCourse
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: Student ID and Course ID
        required: true
        schema:
          $ref: '#/definitions/AddStudentToCourseRequest'
      responses:
        404:
          description: Not a valid course or course does not exsits.
        401:
          description: User not signed in.
        200:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/courses/{id}/disable:
    put:
      tags:
      - Courses
      summary: Used to disable courses from the system.
      operationId: Courses_PutDisableCourse
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not signed in/not an admin
        404:
          description: Incorrect Course
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/courses/{id}/enable:
    put:
      tags:
      - Courses
      summary: Used to enable courses from the system.
      operationId: Courses_PutEnableCourse
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not signed in/not an admin
        404:
          description: Incorrect Course
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Courses:
    get:
      tags:
      - Courses
      summary: Used to get a all the courses
      operationId: Courses_GetCourses
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        400:
          description: Not a valid course or course does not exsits.
        401:
          description: User not signed in.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[CourseResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Courses
      summary: used to add courses
      operationId: Courses_PostAddCourse
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: course
        in: body
        description: Course and course code
        required: true
        schema:
          $ref: '#/definitions/CourseRequest'
      responses:
        401:
          description: User not logged In or not an Admin
        400:
          description: No course name
        409:
          description: Course already exist in the system
        201:
          description: Course created
          schema:
            $ref: '#/definitions/CourseResponse'
      deprecated: false
      security:
      - oauth: []
  /api/Courses/{id}:
    get:
      tags:
      - Courses
      summary: Used to get a single course
      operationId: Courses_GetSingleCourse
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: integer
        format: int32
      responses:
        404:
          description: Not a valid course or course does not exsits.
        401:
          description: User not signed in.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CourseResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - Courses
      summary: edits course information on the system
      operationId: Courses_PutCourse
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: integer
        format: int32
      - name: request
        in: body
        description: Couse Name and Course Code
        required: true
        schema:
          $ref: '#/definitions/CourseRequest'
      responses:
        409:
          description: Course already exist in the system
        401:
          description: User not logged in or not an admin
        404:
          description: Course not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/DroppedOut:
    get:
      tags:
      - DroppedOut
      summary: Gets all drop out students
      operationId: DroppedOut_GetDroppedOut
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[DroppedOutResponse]'
      deprecated: false
      security:
      - oauth: []
  /api/DroppedOut/{id}:
    get:
      tags:
      - DroppedOut
      summary: Individual students that have dropped out of the program.
      operationId: DroppedOut_GetDroppedOutStudent
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: ID of the Dropped Out Student
        required: true
        type: string
      responses:
        401:
          description: User not an admin.User not authorized.
        404:
          description: Invalid id. Student does not exist.
        204:
          description: Success
          schema:
            $ref: '#/definitions/DroppedOutResponse'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - DroppedOut
      summary: Sets a user as dropped out
      operationId: DroppedOut_PostDroppedOut
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: string
      - name: request
        in: body
        description: Reason for dropping out, date of drop out, date when last recieved
          stipend &amp; amount recieved
        required: true
        schema:
          $ref: '#/definitions/DroppedOutRequest'
      responses:
        401:
          description: User not logged in or not an admin or not the user who is dropping
            out
        404:
          description: User not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/exam/addStudent:
    post:
      tags:
      - Exam
      summary: Add a student to an Exam
      operationId: Exam_PostAddStudentToExam
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: Exam ID and Student ID
        required: true
        schema:
          $ref: '#/definitions/AddStudentToExamRequest'
      responses:
        401:
          description: User no an Admin
        404:
          description: Student or Exam not found
        409:
          description: Student already exist in the specified exam.
        204:
          description: Student added to exam successfully
      deprecated: false
      security:
      - oauth: []
  /api/exam/{id}/disable:
    put:
      tags:
      - Exam
      summary: Used to disable an Exam from the system.
      operationId: Exam_PutDisableExam
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Exam ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not an admin or no authorized
        404:
          description: Incorrect Exam
        204:
          description: Return no content
      deprecated: false
      security:
      - oauth: []
  /api/exam/{id}/enable:
    put:
      tags:
      - Exam
      summary: Used to Enable Exams from the system.
      operationId: Exam_PutEnableExam
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Exam ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not signed in or not an admin.
        404:
          description: Incorrect Exam
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Exam:
    get:
      tags:
      - Exam
      summary: Gets a list of all the exmas.
      operationId: Exam_GetExams
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not authorized to view exams.
        200:
          description: Succcess
          schema:
            $ref: '#/definitions/CollectionResponse[ExamResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Exam
      summary: Add exams to the program.
      operationId: Exam_PostExams
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: exam
        in: body
        description: Exams and Exam codes
        required: true
        schema:
          $ref: '#/definitions/ExamRequest'
      responses:
        400:
          description: No Exam name
        401:
          description: User not an Admin. Not Authorized
        409:
          description: Exams already exists in the sytem.
        201:
          description: Success
          schema:
            $ref: '#/definitions/ExamResponse'
      deprecated: false
      security:
      - oauth: []
  /api/Exam/{id}:
    get:
      tags:
      - Exam
      summary: Gets a single exams from the system.
      operationId: Exam_GetSingleExam
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Exam ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or no authorized.
        404:
          description: Exam not found.
        200:
          description: Success
          schema:
            $ref: '#/definitions/ExamResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - Exam
      summary: Edits Exams  information on the system.
      operationId: Exam_PutExam
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Exam ID
        required: true
        type: integer
        format: int32
      - name: request
        in: body
        description: Exam details
        required: true
        schema:
          $ref: '#/definitions/ExamRequest'
      responses:
        401:
          description: User not authorized or not an admin.
        404:
          description: Exam not found
        409:
          description: Exam alreay exisits in the system.
        204:
          description: Return Accepted
      deprecated: false
      security:
      - oauth: []
  /api/Feedback:
    get:
      tags:
      - Feedback
      summary: Gets all students feedback that has been answered.
      operationId: Feedback_GetAllFeedback
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[FeedbackResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Feedback
      summary: used to login to the service
      operationId: Feedback_PostFeedback
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: feedback
        in: body
        description: Comment message
        required: true
        schema:
          $ref: '#/definitions/FeedbackRequest'
      responses:
        400:
          description: Invalid feedback
        401:
          description: User not logged In or not a Student
        201:
          description: Success
          schema:
            $ref: '#/definitions/FeedbackResponse'
      deprecated: false
      security:
      - oauth: []
  /api/Feedback/{id}:
    get:
      tags:
      - Feedback
      summary: Gets single feedback from a student that has been answered already.
      operationId: Feedback_GetSingleFeedback
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Feedback ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not authorized to view information.
        404:
          description: Feedback not found.
        200:
          description: Success
          schema:
            $ref: '#/definitions/FeedbackResponse'
      deprecated: false
      security:
      - oauth: []
  /api/students/furtherEmployment:
    get:
      tags:
      - FurtherEmployment
      summary: Gets all students who got employment
      operationId: FurtherEmployment_GetAllStudentsWithFurtherEmployment
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: since
        in: query
        description: Date since the employent aquired
        required: false
        type: string
        format: date-time
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[FurtherEmploymentResponse]'
      deprecated: false
      security:
      - oauth: []
  /api/students/{id}/furtherEmployment:
    get:
      tags:
      - FurtherEmployment
      summary: Gets a specific students who got employment
      operationId: FurtherEmployment_GetStudentWithFurtherEmployment
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Further Employment ID
        required: true
        type: string
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Student not found
        400:
          description: Student has not been employeed
        200:
          description: Success
          schema:
            $ref: '#/definitions/FurtherEmploymentResponse'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - FurtherEmployment
      summary: Used to set further employment info for a student
      operationId: FurtherEmployment_PostFurtherEmployment
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Users ID
        required: true
        type: string
      - name: request
        in: body
        description: Details of users further employment
        required: true
        schema:
          $ref: '#/definitions/FurtherEmploymentRequest'
      responses:
        401:
          description: User not logged in, not an admin or trying to change another
            students info.
        404:
          description: User not found, not a student or not active.
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Health:
    get:
      tags:
      - Health
      operationId: Health_Get
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Object'
      deprecated: false
  /api/students/hostEmployer:
    post:
      tags:
      - HostEmployer
      summary: Associates a student with a host employeer
      operationId: HostEmployer_PostAssociateStudentToHostEmployeer
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: studentId
        in: body
        description: Student ID
        required: true
        schema:
          type: string
      - name: hostEmployerId
        in: query
        description: Host employeer ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not authorised or not admin
        404:
          description: host or student not found
        204:
          description: success
      deprecated: false
      security:
      - oauth: []
  /api/hostEmployers/{id}/disable:
    put:
      tags:
      - HostEmployer
      summary: Disables a Host Employer from the system
      operationId: HostEmployer_PutDisableHostEmployer
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Host Employer ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Host Employer not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/hostEmployers/{id}/enable:
    put:
      tags:
      - HostEmployer
      summary: Enables a Host Employer from the system
      operationId: HostEmployer_PutEnableHostEmployer
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Host Employer ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Host Employer not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/HostEmployer/{id}:
    get:
      tags:
      - HostEmployer
      summary: Gets a Host Employer and the Students
      operationId: HostEmployer_GetHostEmployer
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Host Employer ID
        required: true
        type: integer
        format: int32
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Host Employer not found. Or bad host employer ID
        200:
          description: Success
          schema:
            $ref: '#/definitions/HostEmployerResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - HostEmployer
      summary: Used to update an existing host Employer.
      operationId: HostEmployer_PutHostEmployer
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Host Employer ID
        required: true
        type: integer
        format: int32
      - name: request
        in: body
        description: Host Employer Name
        required: true
        schema:
          $ref: '#/definitions/HostEmployerRequest'
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: ID not found
        409:
          description: Name already in use
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/HostEmployer:
    get:
      tags:
      - HostEmployer
      summary: Gets all Host Employers from the system
      operationId: HostEmployer_GetHostEmployers
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an Admin
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[HostEmployerResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - HostEmployer
      summary: Adds a Host Employer to the system
      operationId: HostEmployer_PostAddHostEmployer
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: hostEmployer
        in: body
        description: Host Employer Name
        required: true
        schema:
          $ref: '#/definitions/HostEmployerRequest'
      responses:
        401:
          description: User not signed in or not an admin.
        409:
          description: Name already in use
        400:
          description: Required data not provided
        201:
          description: Success
          schema:
            $ref: '#/definitions/StudentResponse'
      deprecated: false
      security:
      - oauth: []
  /api/login/confirmPasswordReset:
    post:
      tags:
      - Login
      summary: Finishes the password reset process
      operationId: Login_PostConfirmPasswordReset
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: Email for user
        required: true
        schema:
          $ref: '#/definitions/ConfirmPasswordResetRequest'
      responses:
        400:
          description: No token or no/invalid password
        404:
          description: Bad token
        204:
          description: Success
      deprecated: false
  /api/login/beginPasswordReset:
    post:
      tags:
      - Login
      summary: Starts the password reset process
      operationId: Login_PostStartPasswordReset
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: Email for user
        required: true
        schema:
          $ref: '#/definitions/BeginPasswordResetRequest'
      responses:
        400:
          description: Bad email
        204:
          description: Success
      deprecated: false
  /api/Login:
    post:
      tags:
      - Login
      summary: used to login to the service
      operationId: Login_PostLogin
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: request
        in: body
        description: Username &amp; password
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      responses:
        400:
          description: Email or password not provided. Email or Password incorrect.
        200:
          description: Success
          schema:
            $ref: '#/definitions/LoginResponse'
      deprecated: false
  /api/students/{userId}/reward:
    get:
      tags:
      - Reward
      summary: Gets all the student claimed rewards from the system.
      operationId: Reward_GetStudentReward
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        type: string
      - name: date
        in: query
        description: Date since the reward was claimed
        required: false
        type: string
        format: date-time
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[ClaimedRewardsResponse]'
      deprecated: false
      security:
      - oauth: []
  /api/students/rewards:
    post:
      tags:
      - Reward
      summary: Disables a rewards from the system.
      operationId: Reward_PostAssociateStudentToReward
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: studentId
        in: body
        description: Student ID
        required: true
        schema:
          type: string
      - name: rewardsId
        in: query
        description: Reward ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in, user not an admin.
        404:
          description: Rewards not found.
        200:
          description: Sucess
      deprecated: false
      security:
      - oauth: []
  /api/rewards/{id}/disable:
    put:
      tags:
      - Reward
      summary: Disables a rewards from the system.
      operationId: Reward_PutDisableRewards
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Reward ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in, user not an admin.
        404:
          description: Rewards not found.
        200:
          description: Sucess
      deprecated: false
      security:
      - oauth: []
  /api/rewards/{id}/enable:
    put:
      tags:
      - Reward
      summary: Enables Rewards to the system.
      operationId: Reward_PutEnableRewards
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Reward ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not an admin, user not logged in.
        404:
          description: Reward not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Reward/{id}:
    get:
      tags:
      - Reward
      summary: Students can claim rewards and icon rewards.
      operationId: Reward_GetRewards
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Rewards id.
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not authorized
        404:
          description: Reward was not found.
        200:
          description: Success
          schema:
            $ref: '#/definitions/RewardResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - Reward
      summary: Used to edit rewards in the system.
      operationId: Reward_PutStudentReward
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Reward ID
        required: true
        type: integer
        format: int32
      - name: request
        in: body
        description: Reward Details
        required: true
        schema:
          $ref: '#/definitions/RewardRequest'
      responses:
        401:
          description: User not logged in, not authorized.
        404:
          description: Reward not found
        409:
          description: Return conflict if reward already exisits.
        200:
          description: success
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Reward
      summary: Associates a student with a reward.
      operationId: Reward_SetRewardState
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Reward ID
        required: true
        type: integer
        format: int32
      - name: requiredState
        in: query
        description: Current State
        required: true
        type: string
        enum:
        - Active
        - Disable
      - name: requestedState
        in: query
        description: Requested State
        required: true
        type: string
        enum:
        - Active
        - Disable
      responses:
        401:
          description: User not authorised or not admin
        404:
          description: reward or student not found
        204:
          description: success
          schema:
            $ref: '#/definitions/Object'
      deprecated: false
      security:
      - oauth: []
  /api/Reward:
    get:
      tags:
      - Reward
      summary: Gets all the rewards from the system.
      operationId: Reward_GetRewards
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[RewardResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Reward
      summary: Used to Add students rewards to the system
      operationId: Reward_PostAddStudentReward
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: reward
        in: body
        description: Name, Decription, ImageId &amp; Reward State;
        required: true
        schema:
          $ref: '#/definitions/RewardRequest'
      responses:
        401:
          description: User not logged in, not an administator, or doesnt exist.
        400:
          description: Bad or no name
        409:
          description: Reward with this name is already in use
        201:
          description: Success
          schema:
            $ref: '#/definitions/RewardResponse'
      deprecated: false
      security:
      - oauth: []
  /api/ShareCalendar/{id}/{startDate}:
    get:
      tags:
      - ShareCalendar
      summary: Gets the share Calendar using the Id and start Date.
      operationId: ShareCalendar_GetShareCalendar
      consumes: []
      produces:
      - application/json
      - text/json
      parameters:
      - name: id
        in: path
        description: Share Calendar Id.
        required: true
        type: string
      - name: startDate
        in: path
        description: Anything from the filtered start date and above.
        required: true
        type: string
        format: date-time
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        404:
          description: Date not specified.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[CalendarResponse]'
      deprecated: false
  /api/students/{id}/rewards:
    get:
      tags:
      - Students
      summary: Gets all Claimed Rewards of a student
      operationId: Students_GetStudentRewards
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Student ID
        required: true
        type: string
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in, not an admin or attempting to check someone
            elses course
        404:
          description: User not found
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[ClaimedRewardsResponse]'
      deprecated: false
      security:
      - oauth: []
  /api/students/{id}/trainingproviders:
    get:
      tags:
      - Students
      summary: Gets the training provider a student belongs too.
      operationId: Students_GetTrainingProviders
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Training Provider ID
        required: true
        type: string
      - name: param
        in: body
        description: Filter Paramenters
        required: false
        schema:
          $ref: '#/definitions/FilterParameters'
      responses:
        401:
          description: User not logged in, not an admin or trying to see a students
            training provider wihout authorization.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[TrainingProviderResponse]'
      deprecated: false
      security:
      - oauth: []
  /api/students/addExams:
    post:
      tags:
      - Students
      summary: Used to add students to exams.
      operationId: Students_PostAddExamsToStudents
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: ""
        required: true
        schema:
          $ref: '#/definitions/AddStudentsToExamsRequest'
      responses:
        401:
          description: User not an admin or not logged in.
        404:
          description: Exam not found or doesn't exist, trainng provider not found
            or doesn't exist.
        409:
          description: Training Provider already has exam in listing.
        200:
          description: Sucess
      deprecated: false
      security:
      - oauth: []
  /api/students/information:
    post:
      tags:
      - Students
      summary: Students add personal information.
      operationId: Students_PostStudentInformation
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: query
        description: User ID
        required: true
        type: string
      - name: student
        in: body
        description: Users details
        required: true
        schema:
          $ref: '#/definitions/StudentsRequest'
      responses:
        401:
          description: user not logged in, not a user, trying to change details of
            another user.
        404:
          description: User was not found, not yet active
        409:
          description: Email already in use
        400:
          description: Email is invalid
        200:
          description: Success
          schema:
            $ref: '#/definitions/StudentResponse'
      deprecated: false
      security:
      - oauth: []
  /api/Students/{id}:
    get:
      tags:
      - Students
      summary: Gets one student from the system
      operationId: Students_GetStudent
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Student ID
        required: true
        type: string
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Invalid id
        200:
          description: Success
          schema:
            $ref: '#/definitions/StudentResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - Students
      summary: Used to edit students on the system
      operationId: Students_PutStudent
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Users ID
        required: true
        type: string
      - name: request
        in: body
        description: Users details
        required: true
        schema:
          $ref: '#/definitions/StudentsRequest'
      responses:
        401:
          description: User not logged in, not an administator, or user trying to
            change the other user.
        404:
          description: User not found.
        409:
          description: Email already in use.
        400:
          description: Email is invalid.
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/Students:
    get:
      tags:
      - Students
      summary: Gets all students from the system for administators.
      operationId: Students_GetStudents
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not authorized or not logged in.
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[StudentResponse]'
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - Students
      summary: Used to Add students to the system
      operationId: Students_PostStudents
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: request
        in: body
        description: Username &amp; password
        required: true
        schema:
          $ref: '#/definitions/CreateStudentRequest'
      responses:
        401:
          description: User not logged in, not an administator, or doesnt exist.
        400:
          description: Bad or no email
        409:
          description: Email already in use
        201:
          description: Success
          schema:
            $ref: '#/definitions/StudentResponse'
      deprecated: false
      security:
      - oauth: []
  /api/trainingproviders/{id}/{courseId}:
    delete:
      tags:
      - TrainingProviders
      summary: Used to remove a course from a training provider
      operationId: TrainingProviders_DeleteCourseFromTrainingProvider
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Training provider ID
        required: true
        type: integer
        format: int32
      - name: courseId
        in: path
        description: Course ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Training provider or course not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/trainingproviders/addCourse:
    post:
      tags:
      - TrainingProviders
      summary: Add Course to a training Provider.
      operationId: TrainingProviders_PostAddCourseToTrainingProvider
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: request
        in: body
        description: Training Provider Name
        required: true
        schema:
          $ref: '#/definitions/AddCourseToTrainingProviderRequest'
      responses:
        401:
          description: User not logged in, not a admin
        404:
          description: Course not found or Training Provider not found.
        409:
          description: Course already exists with chosen training provider.
        200:
          description: Success, no content
      deprecated: false
      security:
      - oauth: []
  /api/students/trainingProviders:
    post:
      tags:
      - TrainingProviders
      summary: Associates a student to a training Provider
      operationId: TrainingProviders_PostAssociateStudentToTrainingProvider
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: studentId
        in: body
        description: Student Id
        required: true
        schema:
          type: string
      - name: trainingProviderId
        in: query
        description: Training provider Id
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not authorized or not an admin
        404:
          description: Student not found or Training Provider not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/trainingproviders/{id}/disable:
    put:
      tags:
      - TrainingProviders
      summary: Disables TrainingProviders from the system, but does not remove them
        from the database.
      operationId: TrainingProviders_PutDisableTrainingProvider
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Training Provider ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Training provider not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/trainingproviders/{id}/enable:
    put:
      tags:
      - TrainingProviders
      summary: Enables a TrainingProvider from the system
      operationId: TrainingProviders_PutEnableTrainingProvider
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: Training Provider ID
        required: true
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: Training provider not found
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/TrainingProviders/{id}:
    get:
      tags:
      - TrainingProviders
      summary: Gets a training provider and their courses
      operationId: TrainingProviders_GetTrainingProvider
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: id
        in: path
        description: Training Provider ID
        required: true
        type: integer
        format: int32
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in or not an admin, training provider not found.
        404:
          description: Bad training providder ID
        200:
          description: Success
          schema:
            $ref: '#/definitions/TrainingProviderResponse'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - TrainingProviders
      summary: Used to update an existing training provider.
      operationId: TrainingProviders_PutTrainingProviders
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: Training Provider ID
        required: true
        type: integer
        format: int32
      - name: request
        in: body
        description: Training Provider Name
        required: true
        schema:
          $ref: '#/definitions/TrainingProviderRequest'
      responses:
        401:
          description: User not logged in or not an admin
        404:
          description: ID not found
        409:
          description: Name already in use
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/TrainingProviders:
    get:
      tags:
      - TrainingProviders
      summary: Gets all TrainingProviders from the system
      operationId: TrainingProviders_GetTrainingProviders
      consumes: []
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: skip
        in: query
        required: false
        type: integer
        format: int32
      - name: top
        in: query
        required: false
        type: integer
        format: int32
      responses:
        401:
          description: User not logged in
        200:
          description: Success
          schema:
            $ref: '#/definitions/CollectionResponse[TrainingProviderResponse]'
      deprecated: false
      security:
      - oauth: []
    put:
      tags:
      - TrainingProviders
      summary: Edit course to training providers
      operationId: TrainingProviders_PutEditCoursesToTrainingProviders
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: courseRequest
        in: body
        description: Course update information
        required: true
        schema:
          $ref: '#/definitions/EditCourseToTrainingProvidersRequest'
      responses:
        401:
          description: User not logged in, user not authorized to view information.
        404:
          description: Course not found or Training Provider not found
        409:
          description: Training Provider and course already been updated.
        200:
          description: Success
      deprecated: false
      security:
      - oauth: []
    post:
      tags:
      - TrainingProviders
      summary: Adds a training provider to the system
      operationId: TrainingProviders_PostTrainingProviders
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - text/json
      - application/xml
      - text/xml
      parameters:
      - name: trainingProvider
        in: body
        description: Training Provider Name
        required: true
        schema:
          $ref: '#/definitions/TrainingProviderRequest'
      responses:
        401:
          description: User not signed in or not an admin.
        409:
          description: Name already in use
        400:
          description: Required data not provided
        201:
          description: Success
          schema:
            $ref: '#/definitions/TrainingProviderResponse'
      deprecated: false
      security:
      - oauth: []
  /api/users/{id}/password:
    post:
      tags:
      - Users
      summary: Used to reset a password for student/admin
      operationId: Users_PostChangePassword
      consumes:
      - application/json
      - text/json
      - application/xml
      - text/xml
      - application/x-www-form-urlencoded
      produces: []
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: string
      - name: request
        in: body
        description: User Password
        required: true
        schema:
          $ref: '#/definitions/ResetPasswordRequest'
      responses:
        401:
          description: User not logged in, not an admin or doesnt exsist or trying
            to change someone elses password.
        404:
          description: User Not found.
        400:
          description: Password not complex enough.
        204:
          description: Success
      deprecated: false
      security:
      - oauth: []
  /api/users/{id}/disable:
    put:
      tags:
      - Users
      summary: Disables an admin from the system, but doesn't remove them from them
        from the database.
      operationId: Users_PutDisable
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: string
      responses:
        401:
          description: User not logged in or not an admin..
        404:
          description: User ID doesn't exsist.
        204:
          description: Success
        400:
          description: Can't disable yourself
      deprecated: false
      security:
      - oauth: []
  /api/users/{id}/enable:
    put:
      tags:
      - Users
      summary: Enables an admin in the system
      operationId: Users_PutEnable
      consumes: []
      produces: []
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: string
      responses:
        401:
          description: User not logged in or not an admin..
        404:
          description: User ID doesn't exsist.
        204:
          description: Success
        400:
          description: Can't enable yourself
      deprecated: false
      security:
      - oauth: []
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":53:{s:13:\"AdminResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"FirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"LastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Self\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:20:\"WaitingForPinConfirm\";i:1;s:6:\"Active\";i:2;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}}}s:18:\"UpdateAdminRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"FirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"LastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"FilterParameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Skip\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:3:\"Top\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:33:\"CollectionResponse[AdminResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/AdminResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:15:\"NewAdminRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"FirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"LastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:32:\"StudentCalendarInfomationRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"End\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:5:\"Start\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}}}s:16:\"CalendarResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:7:\"EndDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:9:\"StartDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:1:{i:0;s:6:\"Active\";}s:4:\"type\";s:6:\"string\";}s:4:\"Type\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Course\";i:1;s:4:\"Exam\";}s:4:\"type\";s:6:\"string\";}s:4:\"User\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}}}s:4:\"User\";O:8:\"stdClass\":3:{s:8:\"required\";a:1:{i:0;s:5:\"Email\";}s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":40:{s:25:\"AmountLastStipendReceived\";O:8:\"stdClass\":2:{s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:4:\"City\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:23:\"DateLastStipendReceived\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:11:\"DropOutDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:13:\"DropOutReason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"FirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:28:\"FurtherEmploymentCompanyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"FurtherEmploymentEmail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"FurtherEmploymentEndDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:28:\"FurtherEmploymentManagerName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:28:\"FurtherEmploymentPhoneNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:25:\"FurtherEmploymentPosition\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:26:\"FurtherEmploymentStartDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:16:\"HomeAddressLine1\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"HomeAddressLine2\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"HomeAddressLine3\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"HostEmployer\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/HostEmployer\";}s:24:\"HostEmployerManagerEmail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:23:\"HostEmployerManagerName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"HostEmployerManagerPhone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"ImageId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"LastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"NextOfKinEmail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"NextOfKinFirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"NextOfKinLastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"NextOfKinPhoneNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:21:\"NextOfKinRelationship\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"PasswordHash\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"PasswordResetToken\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:12:\"PasswordSalt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"PasswordVersion\";O:8:\"stdClass\":2:{s:4:\"enum\";a:1:{i:0;s:8:\"Version1\";}s:4:\"type\";s:6:\"string\";}s:11:\"PhoneNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Province\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Role\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:7:\"Student\";i:1;s:5:\"Admin\";}s:4:\"type\";s:6:\"string\";}s:9:\"StartDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:20:\"WaitingForPinConfirm\";i:1;s:6:\"Active\";i:2;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}s:8:\"Students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}}s:12:\"StudentState\";O:8:\"stdClass\":2:{s:4:\"enum\";a:5:{i:0;s:11:\"NotAStudent\";i:1;s:6:\"Active\";i:2;s:10:\"DroppedOut\";i:3;s:9:\"Employeed\";i:4;s:11:\"AwaitSignup\";}s:4:\"type\";s:6:\"string\";}}}s:12:\"HostEmployer\";O:8:\"stdClass\":3:{s:8:\"required\";a:1:{i:0;s:4:\"Name\";}s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}s:8:\"Students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}}}}s:20:\"CalendarShareRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:36:\"CollectionResponse[CalendarResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/CalendarResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:15:\"CalendarRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:7:\"EndDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:7:\"EventId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:9:\"StartDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:4:\"Type\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Course\";i:1;s:4:\"Exam\";}s:4:\"type\";s:6:\"string\";}}}s:25:\"AddStudentToCourseRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"CourseId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:9:\"StudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:34:\"CollectionResponse[CourseResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/CourseResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:14:\"CourseResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"Code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}s:8:\"Students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}}s:15:\"StudentResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":18:{s:4:\"City\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"FirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"HomeAddressLine1\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:16:\"HomeAddressLine2\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:16:\"HomeAddressLine3\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Image\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"LastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"NextOfKinEmail\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:18:\"NextOfKinFirstName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:17:\"NextOfKinLastName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:20:\"NextOfKinPhoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:21:\"NextOfKinRelationship\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:11:\"PhoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:8:\"Province\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:20:\"WaitingForPinConfirm\";i:1;s:6:\"Active\";i:2;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}s:12:\"StudentState\";O:8:\"stdClass\":2:{s:4:\"enum\";a:5:{i:0;s:11:\"NotAStudent\";i:1;s:6:\"Active\";i:2;s:10:\"DroppedOut\";i:3;s:9:\"Employeed\";i:4;s:11:\"AwaitSignup\";}s:4:\"type\";s:6:\"string\";}}}s:13:\"CourseRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:38:\"CollectionResponse[DroppedOutResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/definitions/DroppedOutResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:18:\"DroppedOutResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:25:\"AmountLastStipendRecieved\";O:8:\"stdClass\":2:{s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:23:\"DateLastStipendRecieved\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:13:\"DropOutReason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"DroppedOutDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}}}s:17:\"DroppedOutRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:25:\"AmountLastStipendRecieved\";O:8:\"stdClass\":2:{s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:23:\"DateLastStipendRecieved\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:13:\"DropOutReason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"DroppedOutDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}}}s:23:\"AddStudentToExamRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"ExamId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:9:\"StudentId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:32:\"CollectionResponse[ExamResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ExamResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:12:\"ExamResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:4:\"Code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"ExamName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:6:\"Passed\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Passed\";i:1;s:6:\"Failed\";}s:4:\"type\";s:6:\"string\";}s:6:\"Result\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}s:7:\"Student\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}s:8:\"Students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}}s:11:\"ExamRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"Code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:36:\"CollectionResponse[FeedbackResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/FeedbackResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:16:\"FeedbackResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"Comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"RepliedAt\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:9:\"RepliedBy\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:7:\"Replied\";i:1;s:7:\"Pending\";}s:4:\"type\";s:6:\"string\";}s:4:\"User\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}s:15:\"FeedbackRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:45:\"CollectionResponse[FurtherEmploymentResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:39:\"#/definitions/FurtherEmploymentResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:25:\"FurtherEmploymentResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:28:\"FurtherEmploymentCompanyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"FurtherEmploymentEmail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"FurtherEmploymentEndDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:28:\"FurtherEmploymentManagerName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:35:\"FurtherEmploymentManagerPhoneNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:25:\"FurtherEmploymentPosition\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:26:\"FurtherEmploymentStartDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:8:\"Students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}}s:24:\"FurtherEmploymentRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:11:\"CompanyName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"EndDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:11:\"ManagerName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"PhoneNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Position\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"StartDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}}}s:6:\"Object\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":0:{}}s:20:\"HostEmployerResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}s:8:\"Students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}}s:19:\"HostEmployerRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:40:\"CollectionResponse[HostEmployerResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/HostEmployerResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:27:\"ConfirmPasswordResetRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"Password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:25:\"BeginPasswordResetRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"LoginRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:13:\"LoginResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"Role\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:7:\"Student\";i:1;s:5:\"Admin\";}s:4:\"type\";s:6:\"string\";}s:12:\"StudentState\";O:8:\"stdClass\":2:{s:4:\"enum\";a:5:{i:0;s:11:\"NotAStudent\";i:1;s:6:\"Active\";i:2;s:10:\"DroppedOut\";i:3;s:9:\"Employeed\";i:4;s:11:\"AwaitSignup\";}s:4:\"type\";s:6:\"string\";}s:5:\"Token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:42:\"CollectionResponse[ClaimedRewardsResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/ClaimedRewardsResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:22:\"ClaimedRewardsResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:7:\"Claimed\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":3:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";s:8:\"readOnly\";b:1;}s:6:\"Reward\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/RewardResponse\";}s:7:\"Student\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}s:14:\"RewardResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:11:\"Description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:7:\"ImageId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"RewardedWhen\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:7:\"Disable\";}s:4:\"type\";s:6:\"string\";}s:8:\"students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}}}s:13:\"RewardRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:11:\"Description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"ImageId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"RewardedWhen\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}}}s:34:\"CollectionResponse[RewardResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/RewardResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:44:\"CollectionResponse[TrainingProviderResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:38:\"#/definitions/TrainingProviderResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:24:\"TrainingProviderResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"Courses\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/CourseResponse\";}}s:5:\"Exams\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ExamResponse\";}}s:2:\"Id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"State\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:8:\"Disabled\";}s:4:\"type\";s:6:\"string\";}}}s:25:\"AddStudentsToExamsRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"ExamId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:18:\"TrainingProviderId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:15:\"StudentsRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":15:{s:4:\"City\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"FirstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"HomeAddressLine1\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:16:\"HomeAddressLine2\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:16:\"HomeAddressLine3\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"LastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"NextOfKinEmail\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:18:\"NextOfKinFirstName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:17:\"NextOfKinLastName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:20:\"NextOfKinPhoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:21:\"NextOfKinRelationship\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:11:\"PhoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}s:8:\"Province\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:8:\"readOnly\";b:1;}}}s:35:\"CollectionResponse[StudentResponse]\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"Items\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/StudentResponse\";}}s:4:\"Next\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Previous\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"TotalCount\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:20:\"CreateStudentRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:34:\"AddCourseToTrainingProviderRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"CourseId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:18:\"TrainingProviderId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:23:\"TrainingProviderRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:36:\"EditCourseToTrainingProvidersRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"CourseId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:19:\"TrainingProvidersId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}}s:20:\"ResetPasswordRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"Password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
