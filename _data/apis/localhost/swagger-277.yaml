---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:11:\"description\";s:169:\"This is my(Alan
  Neads) OpenAPI documentation for the yelp-like review site we were tasked with making
  for the first assignment for CS 493, Cloud Application Development.\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:20:\"Business
  Review Site\";s:14:\"termsOfService\";s:0:\"\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:22:\"neadsa@oregonstate.edu\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: localhost:3000
basePath: /
paths:
  /categories:
    get:
      tags:
      - category
      summary: Get a list of the categories
      description: Get a list of the categories
      operationId: getCategories
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Categories returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
    post:
      tags:
      - category
      summary: Create a category
      description: Create a category
      operationId: createCategory
      parameters:
      - in: body
        name: category
        schema:
          $ref: '#/definitions/Category'
      consumes:
      - application/json
      responses:
        200:
          description: Created new category
          schema:
            $ref: '#/definitions/Category'
        400:
          description: Invalid input
  /categories/{categoryID}:
    get:
      tags:
      - category
      summary: Get a category
      description: Get a category
      operationId: getCategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Category returned as response
          schema:
            $ref: '#/definitions/Category'
        404:
          description: Category doesn't exist
    put:
      tags:
      - category
      summary: Update or create a category
      description: Update or create a category
      operationId: createOrUpdateCategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Category created
          schema:
            $ref: '#/definitions/Category'
        400:
          description: Invalid input
        404:
          description: Category doesn't exist
    delete:
      tags:
      - category
      summary: Delete a category
      description: Delete a category
      operationId: deleteCategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Category deleted
        400:
          description: Invalid input
        404:
          description: Category doesn't exist
  /categories/{categoryID}/subcategories:
    get:
      tags:
      - subcategory
      summary: Get a list of the subcategories
      description: Get a list of the subcategories
      operationId: getSubcategories
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Subcategories returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Subcategory'
        400:
          description: Invalid input
        404:
          description: Category doesn't exist
    post:
      tags:
      - subcategory
      summary: Create a subcategory
      description: Create a subcategory
      operationId: createSubcategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      - in: body
        name: subcategory
        schema:
          $ref: '#/definitions/Subcategory'
      consumes:
      - application/json
      responses:
        200:
          description: Created new subcategory
          schema:
            $ref: '#/definitions/Subcategory'
        400:
          description: Invalid input
        404:
          description: Category/Subcategory doesn't exist
  /categories/{categoryID}/subcategories/{subcategoryID}:
    get:
      tags:
      - subcategory
      summary: Get a category
      description: Get a subcategory
      operationId: getSubcategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      - name: subcategoryID
        in: path
        description: ID of subcategory
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Subcategory returned as response
          schema:
            $ref: '#/definitions/Subcategory'
        404:
          description: Category/Subcategory doesn't exist
    put:
      tags:
      - subcategory
      summary: Update or create a category
      description: Update or create a category
      operationId: createOrUpdateSubcategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      - name: subcategoryID
        in: path
        description: ID of subcategory
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Subcategory created
          schema:
            $ref: '#/definitions/Subcategory'
        400:
          description: Invalid input
        404:
          description: Category/Subcategory doesn't exist
    delete:
      tags:
      - subcategory
      summary: Delete a subcategory
      description: Delete a subcategory
      operationId: deleteSubcategory
      parameters:
      - name: categoryID
        in: path
        description: ID of category
        required: true
        type: integer
        format: int64
      - name: subcategoryID
        in: path
        description: ID of subcategory
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Subcategory deleted
        400:
          description: Invalid input
        404:
          description: Category/Subcategory doesn't exist
  /businesses:
    get:
      tags:
      - business
      summary: Get a list of the businesses
      description: Get a list of the businesses
      operationId: getBusinesses
      produces:
      - application/json
      responses:
        200:
          description: Business returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Business'
    post:
      tags:
      - business
      summary: Create a business
      description: Create a business
      operationId: createBusiness
      parameters:
      - in: body
        name: business
        schema:
          $ref: '#/definitions/Business'
      consumes:
      - application/json
      responses:
        200:
          description: Created new business
          schema:
            $ref: '#/definitions/Business'
        400:
          description: Invalid input
  /business/{businessID}:
    get:
      tags:
      - business
      summary: Get a business
      description: Get a business
      operationId: getBusiness
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Business returned as response
          schema:
            $ref: '#/definitions/Business'
        404:
          description: Business doesn't exist
    put:
      tags:
      - business
      summary: Update or create a business
      description: Update or create a business
      operationId: createOrUpdateBusiness
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Business created
          schema:
            $ref: '#/definitions/Business'
        400:
          description: Invalid input
        403:
          description: Business isn't owned by userID and cannot be modified
        404:
          description: Business doesn't exist
    delete:
      tags:
      - business
      summary: Delete a business
      description: Delete a business
      operationId: deleteBusiness
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Business deleted
        400:
          description: Invalid input
        403:
          description: Business isn't owned by userID and cannot be deleted
        404:
          description: Business doesn't exist
  /business/{businessID}/reviews:
    get:
      tags:
      - review
      summary: Get a list of business reviews
      description: Get a list of business reviews
      operationId: getReviews
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Reviews returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        400:
          description: Invalid input
        404:
          description: Business doesn't exist
    post:
      tags:
      - review
      summary: Create a review
      description: Create a review
      operationId: createReview
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - in: body
        name: review
        schema:
          $ref: '#/definitions/Review'
      consumes:
      - application/json
      responses:
        200:
          description: Created new review
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Invalid input
        403:
          description: Review already exists for user ID
        404:
          description: Business doesn't exist
  /business/{businessID}/reviews/{reviewID}:
    get:
      tags:
      - review
      summary: Get a review
      description: Get a review
      operationId: getReview
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - name: reviewID
        in: path
        description: ID of review
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Review returned as response
          schema:
            $ref: '#/definitions/Review'
        404:
          description: Business doesn't exist
    put:
      tags:
      - review
      summary: Update or create a review
      description: Update or create a review
      operationId: createOrUpdateReview
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - name: reviewID
        in: path
        description: ID of review
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Review created
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Invalid input
        403:
          description: Review already exists for user ID
        404:
          description: Business doesn't exist
    delete:
      tags:
      - review
      summary: Delete a review
      description: Delete a review
      operationId: deleteReview
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - name: reviewID
        in: path
        description: ID of review
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Review deleted
        400:
          description: Invalid input
        403:
          description: Review not owned by user ID
        404:
          description: Business doesn't exist
  /business/{businessID}/images:
    get:
      tags:
      - image
      summary: Get a list of business images
      description: Get a list of business images
      operationId: getImages
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Images returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
        400:
          description: Invalid input
        404:
          description: Business doesn't exist
    post:
      tags:
      - image
      summary: Create an image
      description: Create an image
      operationId: createImage
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - in: body
        name: review
        schema:
          $ref: '#/definitions/Image'
      consumes:
      - application/json
      responses:
        200:
          description: Created new image
          schema:
            $ref: '#/definitions/Image'
        400:
          description: Invalid input
        404:
          description: Business doesn't exist
  /business/{businessID}/images/{imageID}:
    get:
      tags:
      - image
      summary: Get an image
      description: Get a image
      operationId: getImage
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - name: imageID
        in: path
        description: ID of image
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Image returned as response
          schema:
            $ref: '#/definitions/Image'
        404:
          description: Business doesn't exist
    put:
      tags:
      - image
      summary: Update or create a image
      description: Update or create a image
      operationId: createOrUpdateImage
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - name: imageID
        in: path
        description: ID of image
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Image created
          schema:
            $ref: '#/definitions/Image'
        400:
          description: Invalid input
        404:
          description: Business doesn't exist
    delete:
      tags:
      - image
      summary: Delete an image
      description: Delete an image
      operationId: deleteImage
      parameters:
      - name: businessID
        in: path
        description: ID of business
        required: true
        type: integer
        format: int64
      - name: imageID
        in: path
        description: ID of image
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Image deleted
        400:
          description: Invalid input
        403:
          description: Image not owned by user ID
        404:
          description: Business doesn't exist
  /user/{userID}/businesses:
    get:
      tags:
      - user
      summary: Get a list of the users' businesses
      description: Get a list of the users' businesses
      operationId: getUserBusinesses
      parameters:
      - name: userID
        in: path
        description: ID of user
        required: true
        type: integer
        format: int64
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Businesses returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Business'
        400:
          description: Invalid input
  /user/{userID}/reviews:
    get:
      tags:
      - user
      summary: Get a list of the users' reviews
      description: Get a list of the users' reviews
      operationId: getUserReviews
      parameters:
      - name: userID
        in: path
        description: ID of user
        required: true
        type: integer
        format: int64
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Reviews returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        400:
          description: Invalid input
  /user/{userID}/images:
    get:
      tags:
      - user
      summary: Get a list of the users' images
      description: Get a list of the users' images
      operationId: getUserImages
      parameters:
      - name: userID
        in: path
        description: ID of user
        required: true
        type: integer
        format: int64
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Images returned as response
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
        400:
          description: Invalid input
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":5:{s:8:\"Category\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"Category\";}}s:11:\"Subcategory\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"categoryID\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:11:\"Subcategory\";}}s:8:\"Business\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":12:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:11:\"ownerUserID\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"streetAddress\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"city\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"state\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"zipCode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"phoneNumber\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"categories\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:27:\"List
  referencing categories\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Category\";}}s:13:\"subcategories\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:30:\"List
  referencing subcategories\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/Subcategory\";}}s:7:\"website\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"Business\";}}s:5:\"Image\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:6:\"userID\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"filePath\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"caption\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"Image\";}}s:6:\"Review\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:10:\"businessID\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:6:\"userID\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"starRating\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:16:\"dollarSignRating\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:13:\"writtenReview\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"Image\";}}}"
...
