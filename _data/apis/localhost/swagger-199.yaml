---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":4:{s:11:\"description\";s:107:\"Basic blog api
  for creating posts and comments. Used alongside AuthJB for authenticating and managing
  users\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:6:\"BlogJB\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"MIT\";s:3:\"url\";s:35:\"https://opensource.org/licenses/MIT\";}}"
host: localhost:9001
basePath: /api
paths:
  /post:
    get:
      tags:
      - Posts
      summary: Get all posts in the system
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Post'
    post:
      tags:
      - Posts
      summary: Create a new post
      parameters:
      - name: body
        in: body
        description: Post that you will like to be created
        required: true
        schema:
          type: object
          properties:
            title:
              type: string
              description: Title of the post
            content:
              type: string
              description: Text in the post
            visibility:
              type: string
              description: Parties that the post will be visible to
              default: Private
              enum:
              - Public
              - Friends
              - Private
      responses:
        200:
          description: Post successfully created
  /post/{postId}:
    get:
      tags:
      - Posts
      summary: Get a single post in the system by id
      parameters:
      - name: postId
        in: path
        type: string
        required: true
        description: The ID of the post to get.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Post'
    put:
      tags:
      - Posts
      summary: Updates a single post in the system by id
      parameters:
      - name: postId
        in: path
        required: true
        description: The ID of the post to get.
        type: string
      - name: body
        in: body
        description: Post that you will like to be created
        required: true
        schema:
          type: object
          properties:
            title:
              type: string
              description: Title of the post
            content:
              type: string
              description: Text in the post
            visibility:
              type: string
              description: Parties that the post will be visible to
              default: Private
              enum:
              - Public
              - Friends
              - Private
      responses:
        200:
          description: Update successfull
    delete:
      tags:
      - Posts
      summary: Deletes a single post in the system by id
      parameters:
      - name: postId
        in: path
        required: true
        description: The ID of the post to get.
        type: string
      responses:
        200:
          description: Post successfully deleted
  /comment/post/{postId}:
    post:
      tags:
      - Comments
      summary: Add a new comment to a given postId
      parameters:
      - name: postId
        in: path
        required: true
        description: The ID of the post to get.
        type: string
      - name: body
        in: body
        description: Comment that you will like to be created
        required: true
        schema:
          type: object
          properties:
            content:
              type: string
              description: Text in the comment
      responses:
        200:
          description: Post successfully created
  /comment/{commentId}:
    put:
      tags:
      - Comments
      summary: Update an existing comment given a commentId
      parameters:
      - name: commentId
        in: path
        required: true
        description: The ID of the comment to get.
        type: string
      - name: body
        in: body
        description: Details for the comment you'd like to change
        required: true
        schema:
          type: object
          properties:
            content:
              type: string
              description: Text in the comment
      responses:
        200:
          description: Update successfull
    delete:
      tags:
      - Comments
      summary: Delete an existing comment by commentId
      parameters:
      - name: commentId
        in: path
        required: true
        description: The ID of the comment to get.
        type: string
      responses:
        200:
          description: Delete successfull
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":2:{s:4:\"Post\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:3:\"_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:19:\"MongoDB
  document Id\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:17:\"Title
  of the post\";}s:6:\"author\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:19:\"Creator
  of the post\";}s:7:\"content\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:16:\"Text
  in the post\";}s:10:\"visibility\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:40:\"Parties
  that the post will be visible to\";s:4:\"enum\";a:3:{i:0;s:6:\"Public\";i:1;s:7:\"Friends\";i:2;s:7:\"Private\";}}s:9:\"createdAt\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:11:\"description\";s:34:\"The
  time that the post was created\";}s:9:\"updatedAt\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:11:\"description\";s:55:\"The
  time that the post was updated, null if not changed\";}s:8:\"comments\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Comment\";}}}s:7:\"Comment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:3:\"_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:36:\"MongoDB
  document Id (only in output)\";}s:6:\"author\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:22:\"Creator
  of the comment\";}s:7:\"content\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:19:\"Text
  in the comment\";}s:9:\"createdAt\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:11:\"description\";s:37:\"The
  time that the comment was created\";}s:9:\"updatedAt\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:11:\"description\";s:58:\"The
  time that the comment was updated, null if not changed\";}}}}"
...
