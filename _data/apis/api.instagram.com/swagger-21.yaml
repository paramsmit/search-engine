---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":4:{s:7:\"version\";s:2:\"v1\";s:5:\"title\";s:13:\"Instagram
  API\";s:11:\"description\";s:3912:\"The first version of the Instagram API is an
  exciting step forward towards\nmaking it easier for users to have open access to
  their data. We created it\nso that you can surface the amazing content Instagram
  users share every\nsecond, in fun and innovative ways.\n\nBuild something great!\n\nOnce
  you've\n[registered your client](http://instagram.com/developer/register/) it's
  easy\nto start requesting data from Instagram.\n\nAll endpoints are only accessible
  via https and are located at\n`api.instagram.com`. For instance: you can grab the
  most popular photos at\nthe moment by accessing the following URL with your client
  ID\n(replace CLIENT-ID with your own):\n```\n  https://api.instagram.com/v1/media/popular?client_id=CLIENT-ID\n```\nYou're
  best off using an access_token for the authenticated user for each\nendpoint, though
  many endpoints don't require it.\nIn some cases an access_token will give you more
  access to information, and\nin all cases, it means that you are operating under
  a per-access_token limit\nvs. the same limit for your single client_id.\n\n\nBe
  nice. If you're sending too many requests too quickly, we'll send back a\n`503`
  error code (server unavailable).\nYou are limited to 5000 requests per hour per
  `access_token` or `client_id`\noverall. Practically, this means you should (when
  possible) authenticate\nusers so that limits are well outside the reach of a given
  user.\n\nWe do our best to have all our URLs be\n[RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).\nEvery
  endpoint (URL) may support one of four different http verbs. GET\nrequests fetch
  information about an object, POST requests create objects,\nPUT requests update
  objects, and finally DELETE requests will delete\nobjects.\n\nSince many old browsers
  don't support PUT or DELETE, we've made it easy to\nfake PUTs and DELETEs. All you
  have to do is do a POST with _method=PUT or\n_method=DELETE as a parameter and we
  will treat it as if you used PUT or\nDELETE respectively.\n\n\nEvery response is
  contained by an envelope. That is, each response has a\npredictable set of keys
  with which you can expect to interact:\n```json\n{\n    \"meta\": {\n        \"code\":
  200\n    },\n    \"data\": {\n        ...\n    },\n    \"pagination\": {\n        \"next_url\":
  \"...\",\n        \"next_max_id\": \"13872296\"\n    }\n}\n```\n\nThe meta key is
  used to communicate extra information about the response to\nthe developer. If all
  goes well, you'll only ever see a code key with value\n200. However, sometimes things
  go wrong, and in that case you might see a\nresponse like:\n```json\n{\n    \"meta\":
  {\n        \"error_type\": \"OAuthException\",\n        \"code\": 400,\n        \"error_message\":
  \"...\"\n    }\n}\n```\n\nThe data key is the meat of the response. It may be a
  list or dictionary,\nbut either way this is where you'll find the data you requested.\nSometimes
  you just can't get enough. For this reason, we've provided a\nconvenient way to
  access more data in any request for sequential data.\nSimply call the url in the
  next_url parameter and we'll respond with the\nnext set of data.\n```json\n{\n    ...\n
  \   \"pagination\": {\n        \"next_url\": \"https://api.instagram.com/v1/tags/puppy/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296\",\n
  \       \"next_max_id\": \"13872296\"\n    }\n}\n```\nOn views where pagination
  is present, we also support the \"count\" parameter.\nSimply set this to the number
  of items you'd like to receive. Note that the\ndefault values should be fine for
  most applications - but if you decide to\nincrease this number there is a maximum
  value defined on each endpoint.\n\nIf you're writing an AJAX application, and you'd
  like to wrap our response\nwith a callback, all you have to do is specify a callback
  parameter with\nany API call:\n```\nhttps://api.instagram.com/v1/tags/coffee/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction\n```\nWould
  respond with:\n```js\ncallbackFunction({\n    ...\n});\n```\n\";s:14:\"termsOfService\";s:42:\"http://instagram.com/about/legal/terms/api\";}"
host: api.instagram.com
basePath: /v1
paths:
  /users/{user-id}:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      security:
      - key: []
      - oauth:
        - basic
      tags:
      - Users
      description: Get basic information about a user.
      responses:
        200:
          description: The user object
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
  /users/self/feed:
    get:
      tags:
      - Users
      description: See the authenticated user's feed.
      parameters:
      - name: count
        in: query
        description: Count of media to return.
        type: integer
      - name: max_id
        in: query
        description: Return media earlier than this max_id.s
        type: integer
      - name: min_id
        in: query
        description: Return media later than this min_id.
        type: integer
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
  /users/{user-id}/media/recent:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - Users
      responses:
        200:
          description: Get the most recent media published by a user. To get the most
            recentnmedia published by the owner of the access token, you can use `self`ninstead
            of the `user-id`.n
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
      parameters:
      - name: count
        in: query
        description: Count of media to return.
        type: integer
      - name: max_timestamp
        in: query
        description: Return media before this UNIX timestamp.
        type: integer
      - name: min_timestamp
        in: query
        description: Return media after this UNIX timestamp.
        type: integer
      - name: min_id
        in: query
        description: Return media later than this min_id.
        type: string
      - name: max_id
        in: query
        description: Return media earlier than this max_id.
        type: string
  /users/self/media/liked:
    get:
      tags:
      - Users
      description: See the list of media liked by the authenticated user.nPrivate
        media is returned as long as the authenticated usernhas permissionto view
        that media. Liked media lists are onlynavailable for the currently authenticated
        user.n
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
      parameters:
      - name: count
        in: query
        description: Count of media to return.
        type: integer
      - name: max_like_id
        in: query
        description: Return media liked before this id.
        type: integer
  /users/search:
    get:
      tags:
      - Users
      description: Search for a user by name.
      parameters:
      - name: q
        in: query
        description: A query string
        type: string
        required: true
      - name: count
        in: query
        description: Number of users to return.
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /users/{user-id}/follows:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - Relationships
      description: Get the list of users this user follows.
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /users/{user-id}/followed-by:
    parameters:
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - Relationships
      description: Get the list of users this user is followed by.
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /users/self/requested-by:
    get:
      tags:
      - Relationships
      description: List the users who have requested this user's permission to follow.n
      responses:
        200:
          description: OK
          schema:
            properties:
              meta:
                properties:
                  code:
                    type: integer
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /users/{user-id}/relationship:
    parameters:
    - $ref: '#/parameters/user-id'
    post:
      tags:
      - Relationships
      description: Modify the relationship between the current user and thetarget
        user.n
      security:
      - oauth:
        - relationships
      parameters:
      - name: action
        in: body
        description: One of follow/unfollow/block/unblock/approve/ignore.
        schema:
          type: string
          enum:
          - follow
          - unfollow
          - block
          - unblock
          - approve
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'
  /media/{media-id}:
    parameters:
    - name: media-id
      in: path
      description: The media ID
      type: integer
      required: true
    get:
      tags:
      - Media
      description: 'Get information about a media object.nThe returned type key will
        allow you to differentiate between `image`nand `video` media.nnNote: if you
        authenticate with an OAuth Token, you will receive then`user_has_liked` key
        which quickly tells you whether the current usernhas liked this media item.n'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Media'
  /media1/{shortcode}:
    parameters:
    - name: shortcode
      in: path
      description: The media shortcode
      type: string
      required: true
    get:
      tags:
      - Media
      description: This endpoint returns the same response as **GET** `/media/media-id`.nnA
        media object's shortcode can be found in its shortlink URL.nAn example shortlink
        is `http://instagram.com/p/D/`nIts corresponding shortcode is D.n
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Media'
  /media/search:
    get:
      tags:
      - Media
      description: Search for media in a given area. The default time span is set
        to 5ndays. The time span must not exceed 7 days. Defaults time stamps covernthe
        last 5 days. Can return mix of image and video types.n
      parameters:
      - name: LAT
        description: Latitude of the center search coordinate. If used, lng is required.n
        type: number
        in: query
      - name: MIN_TIMESTAMP
        description: A unix timestamp. All media returned will be taken later thannthis
          timestamp.n
        type: integer
        in: query
      - name: LNG
        description: Longitude of the center search coordinate. If used, lat is required.n
        type: number
        in: query
      - name: MAX_TIMESTAMP
        description: A unix timestamp. All media returned will be taken earlier than
          thisntimestamp.n
        type: integer
        in: query
      - name: DISTANCE
        description: Default is 1km (distance=1000), max distance is 5km.
        type: integer
        maximum: 5000
        default: 1000
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            description: List of all media with added `distance` property
            properties:
              data:
                type: array
                items:
                  allOf:
                  - $ref: '#/definitions/Media'
                  - properties:
                      distance:
                        type: number
  /media/popular:
    get:
      tags:
      - Media
      description: Get a list of what media is most popular at the moment.nCan return
        mix of image and video types.n
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
  /media/{media-id}/comments:
    parameters:
    - name: media-id
      in: path
      description: Media ID
      type: integer
      required: true
    get:
      tags:
      - Comments
      description: Get a list of recent comments on a media object.n
      responses:
        200:
          description: OK
          schema:
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: array
                items:
                  $ref: '#/definitions/Comment'
    post:
      tags:
      - Comments
      - Media
      description: Create a comment on a media object with the following rules:nn*
        The total length of the comment cannot exceed 300 characters.n* The comment
        cannot contain more than 4 hashtags.n* The comment cannot contain more than
        1 URL.n* The comment cannot consist of all capital letters.n
      security:
      - oauth:
        - comments
      parameters:
      - name: TEXT
        description: Text to post as a comment on the media object as specified innmedia-id.n
        in: body
        schema:
          type: number
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: object
    delete:
      tags:
      - Comments
      description: Remove a comment either on the authenticated user's media object
        ornauthored by the authenticated user.n
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: object
  /media/{media-id}/likes:
    parameters:
    - name: media-id
      in: path
      description: Media ID
      type: integer
      required: true
    get:
      tags:
      - Likes
      - Media
      description: Get a list of users who have liked this media.n
      responses:
        200:
          description: OK
          schema:
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: array
                items:
                  $ref: '#/definitions/Like'
    post:
      tags:
      - Likes
      description: Set a like on this media by the currently authenticated user.
      security:
      - oauth:
        - comments
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: object
    delete:
      tags:
      - Likes
      description: Remove a like on this media by the currently authenticated user.n
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: number
              data:
                type: object
  /tags/{tag-name}:
    parameters:
    - $ref: '#/parameters/tag-name'
    get:
      tags:
      - Tags
      description: Get information about a tag object.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Tag'
  /tags/{tag-name}/media/recent:
    parameters:
    - $ref: '#/parameters/tag-name'
    get:
      tags:
      - Tags
      description: Get a list of recently tagged media. Use the `max_tag_id` andn`min_tag_id`
        parameters in the pagination response to paginate throughnthese objects.n
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Tag'
  /tags/search:
    get:
      tags:
      - Tags
      parameters:
      - name: q
        description: 'A valid tag name without a leading #. (eg. snowy, nofilter)n'
        in: query
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              meta:
                properties:
                  code:
                    type: integer
              data:
                type: array
                items:
                  $ref: '#/definitions/Tag'
  /locations/{location-id}:
    parameters:
    - name: location-id
      description: Location ID
      in: path
      type: integer
      required: true
    get:
      tags:
      - Location
      description: Get information about a location.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Location'
  /locations/{location-id}/media/recent:
    parameters:
    - name: location-id
      description: Location ID
      in: path
      type: integer
      required: true
    get:
      tags:
      - Location
      - Media
      description: Get a list of recent media objects from a given location.
      parameters:
      - name: max_timestamp
        in: query
        description: Return media before this UNIX timestamp.
        type: integer
      - name: min_timestamp
        in: query
        description: Return media after this UNIX timestamp.
        type: integer
      - name: min_id
        in: query
        description: Return media later than this min_id.
        type: string
      - name: max_id
        in: query
        description: Return media earlier than this max_id.
        type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
  /locations/search:
    get:
      tags:
      - Location
      description: Search for a location by geographic coordinate.
      parameters:
      - name: distance
        in: query
        description: Default is 1000m (distance=1000), max distance is 5000.
        type: integer
      - name: facebook_places_id
        in: query
        description: Returns a location mapped off of a Facebook places id. If used,
          anFoursquare id and lat, lng are not required.n
        type: integer
      - name: foursquare_id
        in: query
        description: returns a location mapped off of a foursquare v1 api location
          id.nIf used, you are not required to use lat and lng. Note that thisnmethod
          is deprecated; you should use the new foursquare IDs with V2nof their API.n
        type: integer
      - name: lat
        in: query
        description: atitude of the center search coordinate. If used, lng is required.n
        type: number
      - name: lng
        in: query
        description: ongitude of the center search coordinate. If used, lat is required.n
        type: number
      - name: foursquare_v2_id
        in: query
        description: Returns a location mapped off of a foursquare v2 api location
          id. Ifnused, you are not required to use lat and lng.n
        type: integer
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Location'
  /geographies/{geo-id}/media/recent:
    parameters:
    - name: geo-id
      in: path
      description: Geolocation ID
      type: integer
      required: true
    get:
      description: 'Get recent media from a geography subscription that you created.n**Note**:
        You can only access Geographies that were explicitly creatednby your OAuth
        client. Check the Geography Subscriptions section of then[real-time updates
        page](https://instagram.com/developer/realtime/).nWhen you create a subscription
        to some geographynthat you define, you will be returned a unique geo-id that
        can be usednin this query. To backfill photos from the location covered by
        thisngeography, use the [media search endpointn](https://instagram.com/developer/endpoints/media/).n'
      parameters:
      - name: count
        in: query
        description: Max number of media to return.
        type: integer
      - name: min_id
        in: query
        description: Return media before this `min_id`.
        type: integer
      responses:
        200:
          description: OK
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":8:{s:4:\"User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"full_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"profile_picture\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"bio\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"website\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"counts\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"media\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"follows\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"follwed_by\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}}}s:5:\"Media\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":12:{s:12:\"created_time\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"Epoc
  time (ms)\";s:4:\"type\";s:7:\"integer\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"filter\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"tags\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Tag\";}}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"user\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/MiniProfile\";}s:14:\"users_in_photo\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/MiniProfile\";}}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Location\";}s:9:\"comments:\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"count\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Comment\";}}}}s:5:\"likes\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"count\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/MiniProfile\";}}}}s:6:\"images\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:14:\"low_resolution\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Image\";}s:9:\"thumbnail\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Image\";}s:19:\"standard_resolution\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Image\";}}}s:6:\"videos\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:14:\"low_resolution\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Image\";}s:19:\"standard_resolution\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Image\";}}}}}s:8:\"Location\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:7:\"Comment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"created_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"from\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/MiniProfile\";}}}s:4:\"Like\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"user_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:3:\"Tag\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"media_count\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:5:\"Image\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"width\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"height\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"MiniProfile\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:41:\"A
  shorter version of User for likes array\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"user_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"full_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:15:\"profile_picture\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
