---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:32:\"Official REST API
  for Bitrise.io\";s:5:\"title\";s:11:\"Bitrise API\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:15:\"Bitrise
  Support\";s:3:\"url\";s:30:\"https://www.bitrise.io/contact\";s:5:\"email\";s:22:\"letsconnect@bitrise.io\";}s:7:\"license\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"MIT\";}s:7:\"version\";s:3:\"0.1\";}"
host: api.bitrise.io
basePath: /v0.1
paths:
  /addons:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the available Bitrise addons
      produces:
      - application/json
      tags:
      - addons
      summary: Get list of available Bitrise addons
      operationId: addons-list
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AddonsListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /addons/{addon-id}:
    get:
      security:
      - PersonalAccessToken: []
      description: Show details of a specific Bitrise addon
      produces:
      - application/json
      tags:
      - addons
      summary: Get a specific Bitrise addon
      operationId: addons-show
      parameters:
      - type: string
        description: Addon ID
        name: addon-id
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AddonsShowResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the apps available for the authenticated account, including
        those that are owned by other users or Organizations.
      produces:
      - application/json
      tags:
      - application
      summary: Get list of the apps
      operationId: app-list
      parameters:
      - enum:
        - last_build_at
        - created_at
        type: string
        description: 'Order of the applications: sort them based on when they were
          created or the time of their last build'
        name: sort_by
        in: query
      - type: string
        description: Slug of the first app in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/register:
    post:
      security:
      - PersonalAccessToken: []
      description: 'Add a new app to Bitrise. This is the first step of the app registration
        process. To successfully set it up, you need to provide the required app parameters:
        your git provider, the repository URL, the slug of the repository as it appears
        at the provider, and the slug of the owner of the repository. Read more about
        the app creation process in our [detailed guide](https://devcenter.bitrise.io/api/adding-and-managing-apps/#adding-a-new-app).'
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - app-setup
      summary: Add a new app
      operationId: app-create
      parameters:
      - description: App parameters
        name: app
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AppUploadParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Get the details of a specific app by providing the app slug. You
        can get the app slug by calling the [/apps](https://api-docs.bitrise.io/#/application/app-list)
        endpoint or by opening the app on bitrise.io and copying the slug from the
        URL.
      produces:
      - application/json
      tags:
      - application
      summary: Get a specific app
      operationId: app-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppShowResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/addons:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all the provisioned addons for the authorized apps
      produces:
      - application/json
      tags:
      - addons
      summary: Get list of the addons for apps
      operationId: addon-list-by-app
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppAddOnsListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/android-keystore-files:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all the android keystore files that have been uploaded to
        a specific app.
      produces:
      - application/json
      tags:
      - android-keystore-file
      summary: Get a list of the android keystore files
      operationId: android-keystore-file-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Slug of the first android keystore file in the response
        name: next
        in: query
      - type: integer
        description: Max number of build certificates per page is 50.
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      description: Add a new Android keystore file to an app
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - android-keystore-file
      summary: Create an Android keystore file
      operationId: android-keystore-file-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: Android keystore file parameters
        name: android-keystore-file
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AndroidKeystoreFileUploadParams'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/avatar-candidates:
    post:
      security:
      - PersonalAccessToken: []
      description: Add new avatar candidates to a specific app
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - avatar-candidate
      summary: Create avatar candidates
      operationId: avatar-candidate-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: Avatar candidate parameters
        name: avatar-candidate
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AvatarCandidateCreateBulkParams'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/v0.AvatarCandidateCreateResponseItems'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/avatar-candidates/{avatar-slug}:
    patch:
      security:
      - PersonalAccessToken: []
      description: Promotes an avatar candidate for an app
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - avatar-candidate
      summary: Promote an avatar candidate
      operationId: avatar-candidate-promote
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Avatar candidate slug
        name: avatar-slug
        in: path
        required: true
      - description: Avatar promote parameters
        name: avatar-promote-params
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AvatarPromoteParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AvatarPromoteResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/bitrise.yml:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Get the full `bitrise.yml` configuration of an application, by
        providing the app slug. It returns the current `bitrise.yml` that is stored
        on bitrise.io in full, including the trigger map, the different workflows
        and the Steps.
      produces:
      - text/plain
      tags:
      - application
      summary: Get bitrise.yml of a specific app
      operationId: app-config-datastore-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: '{the bitrise.yml in yml format}'
          schema:
            type: string
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      description: Upload a new bitrise.yml for your application.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - app-setup
      summary: Upload a new bitrise.yml for your application.
      operationId: app-config-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: App config parameters
        name: app-config
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AppConfigRequestParam'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppConfigRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/branches:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List the existing branches of the repository of a specified Bitrise
        app.
      produces:
      - application/json
      tags:
      - application
      summary: List the branches of an app's repository
      operationId: branch-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BranchListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/build-certificates:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all the build certificates that have been uploaded to a specific
        app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app)
        guide.
      produces:
      - application/json
      tags:
      - build-certificate
      summary: Get a list of the build certificates
      operationId: build-certificate-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Slug of the first build certificate in the response
        name: next
        in: query
      - type: integer
        description: Max number of build certificates per page is 50.
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildCertificateListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      description: Create a temporary pre-signed upload URL for the build certificate
        and upload the file to AWS with a simple `curl` request. To complete the uploading
        process and view your files on the Code Signing tab of your app, continue
        with the [POST /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded](https://api-docs.bitrise.io/#/build-certificate/build-certificate-confirm)
        endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - build-certificate
      summary: Create a build certificate
      operationId: build-certificate-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: Build certificate parameters such as file name and its file size
        name: build-certificate
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.BuildCertificateUploadParams'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/v0.BuildCertificateResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/build-certificates/{build-certificate-slug}:
    get:
      security:
      - PersonalAccessToken: []
      description: Retrieve data of a specific build certificate. You can fetch the
        build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list)
        endpoint to list all available build certificates of an app. Read more in
        our [Getting a specific iOS code signing file's data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data)
        guide.
      produces:
      - application/json
      tags:
      - build-certificate
      summary: Get a specific build certificate
      operationId: build-certificate-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build certificate slug
        name: build-certificate-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildCertificateResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    delete:
      security:
      - PersonalAccessToken: []
      description: Delete an app's build certificate. You can fetch the build certificate
        slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list)
        endpoint to list all available build certificates of an app. Read more in
        our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file)
        guide.
      produces:
      - application/json
      tags:
      - build-certificate
      summary: Delete a build certificate
      operationId: build-certificate-delete
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build certificate slug
        name: build-certificate-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildCertificateResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    patch:
      security:
      - PersonalAccessToken: []
      description: Update an uploaded build certificate's attributes. You can fetch
        the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list)
        endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - build-certificate
      summary: Update a build certificate
      operationId: build-certificate-update
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build certificate slug
        name: build-certificate-slug
        in: path
        required: true
      - description: Build certificate parameters
        name: build-certificate
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.BuildCertificateUpdateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildCertificateResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded:
    post:
      security:
      - PersonalAccessToken: []
      description: This is the last step of uploading a build certificate to Bitrise.
        Confirm the build certificate upload and view the file on the Code Signing
        tab of a specific app. Read more in our [Confirming the iOS code signing file
        upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - build-certificate
      summary: Confirm a build certificate upload
      operationId: build-certificate-confirm
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build certificate slug
        name: build-certificate-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildCertificateResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/build-requests:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List the existing open build requests of a specified Bitrise app
      produces:
      - application/json
      tags:
      - build-request
      summary: List the open build requests for an app
      operationId: build-request-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildRequestListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/build-requests/{build-request-slug}:
    patch:
      security:
      - PersonalAccessToken: []
      description: Update a specific build request of a specific app
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - build-request
      summary: Update a build request
      operationId: build-request-update
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build request slug
        name: build-request-slug
        in: path
        required: true
      - description: Build request parameters
        name: build-request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.BuildRequestUpdateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildRequestUpdateResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/build-workflows:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List the workflows that were triggered at any time for a given
        Bitrise app. Note that it might list workflows that are currently not defined
        in the app's `bitrise.yml` configuration - and conversely, workflows that
        were never triggered will not be listed even if they are defined in the `bitrise.yml`
        file.
      produces:
      - application/json
      tags:
      - builds
      summary: List the workflows of an app
      operationId: build-workflow-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildWorkflowListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: 'List all the builds of a specified Bitrise app. Set parameters
        to filter builds: for example, you can search for builds run with a given
        workflow or all builds that were triggered by Pull Requests. It returns all
        the relevant data of the build.'
      produces:
      - application/json
      tags:
      - builds
      summary: List all builds of an app
      operationId: build-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - enum:
        - running_first
        - created_at
        type: string
        description: 'Order of builds: sort them based on when they were created or
          the time when they were triggered'
        name: sort_by
        in: query
      - type: string
        description: The branch which was built
        name: branch
        in: query
      - type: string
        description: The name of the workflow used for the build
        name: workflow
        in: query
      - type: string
        description: The commit message of the build
        name: commit_message
        in: query
      - type: string
        description: The event that triggered the build (push, pull-request, tag)
        name: trigger_event_type
        in: query
      - type: integer
        description: The id of the pull request that triggered the build
        name: pull_request_id
        in: query
      - type: integer
        description: The build number
        name: build_number
        in: query
      - type: integer
        description: List builds run after a given date (Unix Timestamp)
        name: after
        in: query
      - type: integer
        description: List builds run before a given date (Unix Timestamp)
        name: before
        in: query
      - type: integer
        description: 'The status of the build: not finished (0), successful (1), failed
          (2), aborted with failure (3), aborted with success (4)'
        name: status
        in: query
      - type: string
        description: Slug of the first build in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: 'Trigger a new build. Specify an app slug and at least one parameter
        out of three: a git tag or git commit hash, a branch, or a workflow ID. You
        can also set specific parameters for Pull Request builds and define additional
        environment variables for your build. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).'
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - builds
      summary: Trigger a new build
      operationId: build-trigger
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: Build trigger parameters
        name: build_params
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.BuildTriggerParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildTriggerRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds/{build-slug}:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Get the specified build of a given Bitrise app. You need to provide
        both an app slug and a build slug. You can get the build slug either by calling
        the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or
        by clicking on the build on bitrise.io and copying the slug from the URL.
        The endpoint returns all the relevant data of the build.
      produces:
      - application/json
      tags:
      - builds
      summary: Get a build of a given app
      operationId: build-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildShowResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds/{build-slug}/abort:
    post:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Abort a specific build. Set an abort reason with the `abort_reason`
        parameter. Use the `abort_with_success` parameter to abort a build but still
        count it as a successful one.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - builds
      summary: Abort a specific build
      operationId: build-abort
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      - description: Build abort parameters
        name: build-abort-params
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.BuildAbortParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildAbortResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        429:
          description: Too Many Requests
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds/{build-slug}/artifacts:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all build artifacts that have been generated for an app's
        build. You can use the created build artifact slugs from the response output
        to retrieve data of a specific build artifact with the [GET/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-show)
        endpoint or update a build artifact with the [PATCH/apps](https://api-docs.bitrise.io/#/build-artifact/artifact-update)
        endpoint.
      produces:
      - application/json
      tags:
      - build-artifact
      summary: Get a list of all build artifacts
      operationId: artifact-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      - type: string
        description: Slug of the first build artifact in the response
        name: next
        in: query
      - type: integer
        description: Max number of build artifacts per page is 50.
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ArtifactListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Retrieve data of a specific build artifact. The response output
        contains a time-limited download url (expires in 10 minutes) and a public
        install page URL. You can view the build artifact with both URLs, but the
        public install page url will not work unless you [enable it](https://devcenter.bitrise.io/tutorials/deploy/bitrise-app-deployment/#enabling-public-page-for-the-app).
      produces:
      - application/json
      tags:
      - build-artifact
      summary: Get a specific build artifact
      operationId: artifact-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      - type: string
        description: Artifact slug
        name: artifact-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ArtifactShowResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    delete:
      security:
      - PersonalAccessToken: []
      description: Delete a build artifact of an app's build. The required parameters
        are app slug, build slug and artifact slug. You can fetch the build artifact
        slug if you first list all build artifacts of an app with the [/apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list)
        endpoint.
      produces:
      - application/json
      tags:
      - build-artifact
      summary: Delete a build artifact
      operationId: artifact-delete
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      - type: string
        description: Artifact slug
        name: artifact-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ArtifactDeleteResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    patch:
      security:
      - PersonalAccessToken: []
      description: Update the `is_public_page_enabled` attribute of your app's build.
        The required parameters are app slug, build slug and artifact slug. You can
        fetch the build artifact slug if you first list all build artifacts of an
        app with the [GET /apps/](https://api-docs.bitrise.io/#/build-artifact/artifact-list)
        endpoint.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - build-artifact
      summary: Update a build artifact
      operationId: artifact-update
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      - type: string
        description: Artifact slug
        name: artifact-slug
        in: path
        required: true
      - description: Artifact parameters
        name: artifact-params
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.ArtifactUpdateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ArtifactShowResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds/{build-slug}/bitrise.yml:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Get the bitrise.yml file of one of the builds of a given app. This
        will return the `bitrise.yml` configuration with which the build ran. You
        can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show)
        of the app.
      produces:
      - text/plain
      tags:
      - builds
      summary: Get the bitrise.yml of a build
      operationId: build-bitrise-yml-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      responses:
        200:
          description: '{the bitrise.yml in yml format}'
          schema:
            type: string
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/builds/{build-slug}/log:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: Get the build log of a specified build of a Bitrise app. You can
        get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list)
        endpoint or by clicking on the build on bitrise.io and copying the slug from
        the URL.
      produces:
      - application/json
      tags:
      - builds
      summary: Get the build log of a build
      operationId: build-log
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Build slug
        name: build-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildLogInfoResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/finish:
    post:
      security:
      - PersonalAccessToken: []
      description: Save the application after registering it on Bitrise and registering
        an SSH key (and, optionally, adding a webhook). With this endpoint you can
        define the initial configuration, define application-level environment variables,
        determine the project type, and set an Organization to be the owner of the
        app. Read more about the app registration process in our [detailed guide](https://devcenter.bitrise.io/api/adding-and-managing-apps/#adding-a-new-app).
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - app-setup
      summary: Save the application at the end of the app registration process
      operationId: app-finish
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: App finish parameters
        name: app
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AppFinishParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppFinishRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/generic-project-files:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all the generic project files that have been uploaded to a
        specific app. Read more in our [Listing the uploaded files of an app](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#listing-the-uploaded-files-of-an-app)
        guide.
      produces:
      - application/json
      tags:
      - generic-project-file
      summary: Get a list of the generic project files
      operationId: generic-project-file-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Slug of the first generic project file in the response
        name: next
        in: query
      - type: integer
        description: Max number of build certificates per page is 50.
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      description: Create a temporary pre-signed upload URL (expires in 10 minutes)
        for the generic project file and upload it to AWS with a simple `curl` request.
        To complete the uploading process and view your files on the Code Signing
        tab of your app, continue with the [POST /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-confirm)
        endpoint. Read more in our [Creating and uploading files to Generic File Storage](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#creating-and-uploading-files-to-generic-file-storage)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - generic-project-file
      summary: Create a generic project file
      operationId: generic-project-files-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: Generic project file parameters
        name: generic-project-file
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.ProjectFileStorageUploadParams'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/generic-project-files/{generic-project-file-slug}:
    get:
      security:
      - PersonalAccessToken: []
      description: Retrieve data of a specific generic project file to check its attributes
        and optionally modify them with the [PATCH /apps/](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-update)
        endpoint. Read more in our [Retrieving a specific file's data](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#retrieving-a-specific-files-data)
        guide.
      produces:
      - application/json
      tags:
      - generic-project-file
      summary: Get a specific generic project file
      operationId: generic-project-file-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Generic project file slug
        name: generic-project-file-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    delete:
      security:
      - PersonalAccessToken: []
      description: Delete an app's generic project file. You can fetch an app's generic
        project file slug if you first list all the uploaded files with the [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list)
        endpoint. Read more in our [Deleting a file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#deleting-a-file)
        guide.
      produces:
      - application/json
      tags:
      - generic-project-file
      summary: Delete a generic project file
      operationId: generic-project-file-delete
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Generic project file slug
        name: generic-project-file-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    patch:
      security:
      - PersonalAccessToken: []
      description: Update a generic project file's attributes. You can fetch an app's
        generic project file slug if you first list all the uploaded files with the
        [GET /apps/{app-slug}/generic-project-files](https://api-docs.bitrise.io/#/generic-project-file/generic-project-file-list)
        endpoint. Read more in our [Updating an uploaded file](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#updating-an-uploaded-file)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - generic-project-file
      summary: Update a generic project file
      operationId: generic-project-file-update
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Generic project file slug
        name: generic-project-file-slug
        in: path
        required: true
      - description: Generic project file parameters
        name: generic-project-file
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.ProjectFileStorageDocumentUpdateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/generic-project-files/{generic-project-file-slug}/uploaded:
    post:
      security:
      - PersonalAccessToken: []
      description: This is the last step of uploading a generic project file to Bitrise.
        Confirm the generic project file upload and view the file on the Code Signing
        tab of a specific app. Read more in our [Confirming the upload](https://devcenter.bitrise.io/api/managing-files-in-generic-file-storage/#confirming-the-file-upload)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - generic-project-file
      summary: Confirm a generic project file upload
      operationId: generic-project-file-confirm
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Generic project file slug
        name: generic-project-file-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProjectFileStorageResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/outgoing-webhooks:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all the outgoing webhooks registered for a specified Bitrise
        app. This returns all the relevant data of the webhook, including the slug
        of the webhook and its URL.
      produces:
      - application/json
      tags:
      - outgoing-webhook
      summary: List the outgoing webhooks of an app
      operationId: outgoing-webhook-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Slug of the first webhook in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppWebhookListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: 'Create an outgoing webhook for a specified Bitrise app: this can
        be used to send build events to a specified URL with custom headers. Currently,
        only build events can trigger outgoing webhooks.'
      produces:
      - application/json
      tags:
      - outgoing-webhook
      summary: Create an outgoing webhook for an app
      operationId: outgoing-webhook-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: App webhook creation params
        name: app-webhook-create-params
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AppWebhookCreateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppWebhookCreatedResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}:
    put:
      security:
      - PersonalAccessToken: []
      description: 'Update an existing outgoing webhook (URL, events, secrets and
        headers) for a specified Bitrise app. Even if you do not want to change one
        of the parameters, you still have to provide that parameter as well: simply
        use its existing value.'
      produces:
      - application/json
      tags:
      - outgoing-webhook
      summary: Update an outgoing webhook of an app
      operationId: outgoing-webhook-update
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: App webhook slug
        name: app-webhook-slug
        in: path
        required: true
      - description: App webhook update params
        name: app-webhook-update-params
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.AppWebhookUpdateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppWebhookResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    delete:
      security:
      - PersonalAccessToken: []
      description: Delete an existing outgoing webhook for a specified Bitrise app.
      produces:
      - application/json
      tags:
      - outgoing-webhook
      summary: Delete an outgoing webhook of an app
      operationId: outgoing-webhook-delete
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: App webhook slug
        name: app-webhook-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppWebhookDeletedResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the delivery items of an outgoing webhook of a Bitrise
        application
      produces:
      - application/json
      tags:
      - webhook-delivery-item
      summary: List the webhook delivery items of an app
      operationId: webhook-delivery-item-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: App webhook slug
        name: app-webhook-slug
        in: path
        required: true
      - type: string
        description: Slug of the first delivery item in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.WebhookDeliveryItemShowResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items/{webhook-delivery-item-slug}:
    get:
      security:
      - PersonalAccessToken: []
      description: Get the specified delivery item of an outgoing webhook of a Bitrise
        application
      produces:
      - application/json
      tags:
      - webhook-delivery-item
      summary: Get a specific delivery item of a webhook
      operationId: webhook-delivery-item-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: App webhook slug
        name: app-webhook-slug
        in: path
        required: true
      - type: string
        description: Webhook delivery item slug
        name: webhook-delivery-item-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.WebhookDeliveryItemResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items/{webhook-delivery-item-slug}/redeliver:
    post:
      security:
      - PersonalAccessToken: []
      description: Re-deliver the delivery item of a specified webhook of a Bitrise
        application
      produces:
      - application/json
      tags:
      - webhook-delivery-item
      summary: Re-deliver the webhook delivery items of an app
      operationId: webhook-delivery-item-redeliver
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: App webhook slug
        name: app-webhook-slug
        in: path
        required: true
      - type: string
        description: Webhook delivery item slug
        name: webhook-delivery-item-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/provisioning-profiles:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List all the provisioning profiles that have been uploaded to a
        specific app. Read more in our [Listing the uploaded iOS code signing files
        of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app)
        guide.
      produces:
      - application/json
      tags:
      - provisioning-profile
      summary: Get a list of the provisioning profiles
      operationId: provisioning-profile-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Slug of the first provisioning profile in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProvisionProfileListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    post:
      security:
      - PersonalAccessToken: []
      description: Create a temporary pre-signed upload URL (expires in 10 minutes)
        for the provisioning profile and upload it to AWS with a simple `curl` request.
        To complete the upload process, continue with the [POST /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-confirm)
        endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - provisioning-profile
      summary: Create a provisioning profile
      operationId: provisioning-profile-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: Provisioning profile parameters such as file name and file size
        name: provisioning-profile
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.ProvisionProfileUploadParams'
      responses:
        201:
          description: Created
          schema:
            type: object
            $ref: '#/definitions/v0.ProvisionProfileResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}:
    get:
      security:
      - PersonalAccessToken: []
      description: Retrieve data of a specific provisioning profile. You can fetch
        the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list)
        endpoint. Read more in our [Getting a specific iOS code signing file's data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data)
        guide.
      produces:
      - application/json
      tags:
      - provisioning-profile
      summary: Get a specific provisioning profile
      operationId: provisioning-profile-show
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Provisioning profile slug
        name: provisioning-profile-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProvisionProfileResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    delete:
      security:
      - PersonalAccessToken: []
      description: Delete an app's provisioning profile. You can fetch the provisioning
        profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list)
        endpoint. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file)
        guide.
      produces:
      - application/json
      tags:
      - provisioning-profile
      summary: Delete a provisioning profile
      operationId: provisioning-profile-delete
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Provisioning profile slug
        name: provisioning-profile-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProvisionProfileResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
    patch:
      security:
      - PersonalAccessToken: []
      description: Update an uploaded provisioning profile's attributes. You can fetch
        the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list)
        endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - provisioning-profile
      summary: Update a provisioning profile
      operationId: provisioning-profile-update
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Provisioning profile slug
        name: provisioning-profile-slug
        in: path
        required: true
      - description: Provisioning profile parameters
        name: provisioning-profile
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.ProvProfileDocumentUpdateParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProvisionProfileResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded:
    post:
      security:
      - PersonalAccessToken: []
      description: This is the last step of the upload process. Confirm the provisioning
        profile upload and view the file on the Code Signing tab of a specific app.
        Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload)
        guide.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - provisioning-profile
      summary: Confirm a provisioning profile upload
      operationId: provisioning-profile-confirm
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - type: string
        description: Provisioning profile slug
        name: provisioning-profile-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ProvisionProfileResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/register-ssh-key:
    post:
      security:
      - PersonalAccessToken: []
      description: Add an SSH-key to a specific app. After creating an app, you need
        to register the SSH key so that Bitrise will be able to access and clone your
        repository during the build process. This requires the app slug of your newly
        created app.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - app-setup
      summary: Add an SSH-key to a specific app
      operationId: ssh-key-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      - description: SSH key parameters
        name: ssh-key
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/v0.SSHKeyUploadParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.SSHKeyRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/register-webhook:
    post:
      security:
      - PersonalAccessToken: []
      description: '[Register an incoming webhook](https://devcenter.bitrise.io/api/incoming-and-outgoing-webhooks/#incoming-webhooks)
        for a specific application. You can do this during the app registration process
        or at any other time in an app''s life. When calling this endpoint, a webhook
        is registered at your git provider: this is necessary to automatically trigger
        builds on Bitrise.'
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - app-setup
      summary: Register an incoming webhook for a specific application
      operationId: app-webhook-create
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.WebhookRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /apps/{app-slug}/test-devices:
    get:
      security:
      - PersonalAccessToken: []
      - AddonAuthToken: []
      description: List registered test devices of all members of a specified Bitrise
        app
      produces:
      - application/json
      tags:
      - test-devices
      summary: List the test devices for an app
      operationId: test-device-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.TestDeviceListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /builds:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the Bitrise builds that can be accessed with the authenticated
        account. Filter builds based on their owner, using the owner slug, or the
        status of the build.
      produces:
      - application/json
      tags:
      - builds
      summary: List all builds
      operationId: build-list-all
      parameters:
      - type: string
        description: The slug of the owner of the app or apps
        name: owner_slug
        in: query
      - type: boolean
        description: 'Indicates whether the build has started yet (true: the build
          hasn''t started)'
        name: is_on_hold
        in: query
      - type: integer
        description: 'The status of the build: not finished (0), successful (1), failed
          (2), aborted with failure (3), aborted with success (4)'
        name: status
        in: query
      - type: string
        description: Slug of the first build in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.BuildListAllResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /me:
    get:
      security:
      - PersonalAccessToken: []
      description: Shows the authenticated users profile data
      produces:
      - application/json
      tags:
      - user
      summary: Get your profile data
      operationId: user-profile
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.UserProfileRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /me/activities:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the Bitrise activity events
      produces:
      - application/json
      tags:
      - activity
      summary: Get list of Bitrise activity events
      operationId: activity-list
      parameters:
      - type: string
        description: Slug of the first activity event in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.ActivityEventListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /me/plan:
    get:
      security:
      - PersonalAccessToken: []
      description: 'Get the subscription of the user: the current plan, any pending
        plans, and the duration of a trial period if applicable'
      produces:
      - application/json
      tags:
      - user
      summary: The subscription plan of the user
      operationId: user-plan
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.UserPlanRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /organizations:
    get:
      security:
      - PersonalAccessToken: []
      description: List all Bitrise organizations that the user is part of
      produces:
      - application/json
      tags:
      - organizations
      summary: List the organizations that the user is part of
      operationId: org-list
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.OrganizationListRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /organizations/{org-slug}:
    get:
      security:
      - PersonalAccessToken: []
      description: Get a specified Bitrise organization that the user is part of.
      produces:
      - application/json
      tags:
      - organizations
      summary: Get a specified organization.
      operationId: org-show
      parameters:
      - type: string
        description: The organization slug
        name: org-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.OrganizationRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /organizations/{org-slug}/apps:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the available apps owned by a given organization. [Find
        the organization URL](https://devcenter.bitrise.io/team-management/organizations/org-url/)
        of the organisations you are part of; be aware that the endpoint will not
        return any apps if the authenticated account is not a member of the given
        organisation.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - application
      summary: Get list of the apps for an organization
      operationId: app-list-by-organization
      parameters:
      - type: string
        description: Organization slug
        name: org-slug
        in: path
        required: true
      - enum:
        - last_build_at
        - created_at
        type: string
        description: 'Order of applications: sort them based on when they were created
          or the time of their last build'
        name: sort_by
        in: query
      - type: string
        description: Slug of the first app in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /organizations/{organization-slug}/addons:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the provisioned addons for organization
      produces:
      - application/json
      tags:
      - addons
      summary: Get list of the addons for organization
      operationId: addon-list-by-organization
      parameters:
      - type: string
        description: Organization slug
        name: organization-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.OwnerAddOnsListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /users/{user-slug}:
    get:
      security:
      - PersonalAccessToken: []
      description: Show information about a specific user
      produces:
      - application/json
      tags:
      - user
      summary: Get a specific user
      operationId: user-show
      parameters:
      - type: string
        description: User slug
        name: user-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.UserProfileRespModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /users/{user-slug}/addons:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the provisioned addons for the authenticated user
      produces:
      - application/json
      tags:
      - addons
      summary: Get list of the addons for user
      operationId: addon-list-by-user
      parameters:
      - type: string
        description: User slug
        name: user-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.OwnerAddOnsListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /users/{user-slug}/apps:
    get:
      security:
      - PersonalAccessToken: []
      description: List all the available apps for the given user.  It needs the user
        slug that you can get from the [GET /me](https://api-docs.bitrise.io/#/user/user-profile)
        endpoint.
      produces:
      - application/json
      tags:
      - application
      summary: Get list of the apps for a user
      operationId: app-list-by-user
      parameters:
      - type: string
        description: User slug
        name: user-slug
        in: path
        required: true
      - enum:
        - last_build_at
        - created_at
        type: string
        description: Order of applications
        name: sort_by
        in: query
      - type: string
        description: Slug of the first app in the response
        name: next
        in: query
      - type: integer
        description: 'Max number of elements per page (default: 50)'
        name: limit
        in: query
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.AppListResponseModel'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
  /v0.1/apps/{app-slug}/avatar-candidates:
    get:
      security:
      - PersonalAccessToken: []
      description: List all available avatar candidates for an application
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - avatar-candidate
      summary: Get list of the avatar candidates
      operationId: avatar-candidate-list
      parameters:
      - type: string
        description: App slug
        name: app-slug
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/v0.FindAvatarCandidateResponse'
        400:
          description: Bad Request
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        401:
          description: Unauthorized
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        404:
          description: Not Found
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
        500:
          description: Internal Server Error
          schema:
            type: object
            $ref: '#/definitions/service.StandardErrorRespModel'
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":100:{s:12:\"addons.Addon\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":16:{s:12:\"banner_image\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"card_header_colors\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:10:\"categories\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:13:\"dashboard_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"developer_links\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/addons.DeveloperLink\";}}s:17:\"documentation_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"icon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"plans\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/addons.Plan\";}}s:9:\"platforms\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:14:\"preview_images\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:11:\"setup_guide\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"subtitle\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"summary\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"addons.DeveloperLink\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"addons.Feature\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"available\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"quantity\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"addons.Plan\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"features\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/addons.Feature\";}}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"price\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:30:\"service.StandardErrorRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:33:\"v0.ActivityEventListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:47:\"#/definitions/v0.ActivityEventResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:33:\"v0.ActivityEventResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":9:{s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"event_icon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"event_stype\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:26:\"repository_avatar_icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"repository_title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"target_path_string\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:28:\"v0.AddOnAppResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"icon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"plan\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:25:\"#/definitions/addons.Plan\";}s:15:\"plan_started_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:26:\"v0.AddonsListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/addons.Addon\";}}}}s:26:\"v0.AddonsShowResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:26:\"#/definitions/addons.Addon\";}}}s:34:\"v0.AndroidKeystoreFileUploadParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"alias\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"private_key_password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:28:\"v0.AppAddOnResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:13:\"dashboard_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"documentation_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"icon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"plan\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:25:\"#/definitions/addons.Plan\";}s:7:\"summary\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:29:\"v0.AppAddOnsListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:42:\"#/definitions/v0.AppAddOnResponseItemModel\";}}}}s:24:\"v0.AppConfigRequestParam\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:25:\"app_config_datastore_yaml\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:21:\"v0.AppConfigRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":0:{}}s:18:\"v0.AppFinishParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:6:\"config\";O:8:\"stdClass\":2:{s:11:\"description\";s:279:\"Which
  config to use `default-android-config`, `default-cordova-config`, `default-fastlane-config`,
  `default-ionic-config`, `default-ios-config`,`default-macos-config`, `default-react-native-config`,
  `default-xamarin-config`, `other-config` (default if parameter is not speficied)\";s:4:\"type\";s:6:\"string\";}s:4:\"envs\";O:8:\"stdClass\":2:{s:11:\"description\";s:87:\"Environment
  variables for the application workflows, e.g. {\"env1\":\"val1\",\"env2\":\"val2\"}\";s:4:\"type\";s:6:\"object\";}s:4:\"mode\";O:8:\"stdClass\":2:{s:11:\"description\";s:66:\"config
  specification mode, has to be specified with `manual` value\";s:4:\"type\";s:6:\"string\";}s:17:\"organization_slug\";O:8:\"stdClass\":2:{s:11:\"description\";s:140:\"The
  slug of the organization, who will be the owner of the application, if it's not
  specified, then the authenticated user will be the owner\";s:4:\"type\";s:6:\"string\";}s:12:\"project_type\";O:8:\"stdClass\":2:{s:11:\"description\";s:126:\"The
  type of your project (`android`, `ios`, `cordova`, `other`, `xamarin`, `macos`,
  `ionic`, `react-native`, `fastlane`, null)\";s:4:\"type\";s:6:\"string\";}s:8:\"stack_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:173:\"The
  id of the stack the application will be built (these can be found in the [system
  report](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports) file
  names)\";s:4:\"type\";s:6:\"string\";}}}s:21:\"v0.AppFinishRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:11:\"branch_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:19:\"build_trigger_token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:29:\"is_webhook_auto_reg_supported\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:23:\"v0.AppListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:37:\"#/definitions/v0.AppResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:15:\"v0.AppRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:23:\"v0.AppResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":12:{s:10:\"avatar_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"is_disabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"is_public\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:5:\"owner\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:42:\"#/definitions/v0.OwnerAccountResponseModel\";}s:12:\"project_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"provider\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"repo_owner\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"repo_slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"repo_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:23:\"v0.AppShowResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:37:\"#/definitions/v0.AppResponseItemModel\";}}}s:18:\"v0.AppUploadParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:9:\"git_owner\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"The
  slug of the owner of the repository at the git provider\";s:4:\"type\";s:6:\"string\";}s:13:\"git_repo_slug\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"The
  slug of the repository at the git provider\";s:4:\"type\";s:6:\"string\";}s:9:\"is_public\";O:8:\"stdClass\":2:{s:11:\"description\";s:102:\"If
  `true` then the repository visibility setting will be public, in case of `false`
  it will be private\";s:4:\"type\";s:7:\"boolean\";}s:8:\"provider\";O:8:\"stdClass\":2:{s:11:\"description\";s:107:\"The
  git provider you are using, it can be `github`, `bitbucket`, `gitlab`, `gitlab-self-hosted`
  or `custom`\";s:4:\"type\";s:6:\"string\";}s:8:\"repo_url\";O:8:\"stdClass\":2:{s:11:\"description\";s:26:\"The
  URL of your repository\";s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":2:{s:11:\"description\";s:71:\"It
  has to be provided by legacy reasons and has to have the `git` value\";s:4:\"type\";s:6:\"string\";}}}s:25:\"v0.AppWebhookCreateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:6:\"events\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"headers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"secret\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:33:\"v0.AppWebhookCreatedResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:44:\"#/definitions/v0.AppWebhookResponseItemModel\";}}}s:33:\"v0.AppWebhookDeletedResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:44:\"#/definitions/v0.AppWebhookResponseItemModel\";}}}s:30:\"v0.AppWebhookListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:44:\"#/definitions/v0.AppWebhookResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:30:\"v0.AppWebhookResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"events\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"headers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:19:\"registered_by_addon\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"updated_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:26:\"v0.AppWebhookResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:44:\"#/definitions/v0.AppWebhookResponseItemModel\";}}}s:25:\"v0.AppWebhookUpdateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:6:\"events\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"headers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:30:\"v0.ArtifactDeleteResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:42:\"#/definitions/v0.ArtifactResponseItemModel\";}}}s:35:\"v0.ArtifactListElementResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:13:\"artifact_meta\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"artifact_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"file_size_bytes\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:22:\"is_public_page_enabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:28:\"v0.ArtifactListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:49:\"#/definitions/v0.ArtifactListElementResponseModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:28:\"v0.ArtifactResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:13:\"artifact_meta\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"artifact_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:21:\"expiring_download_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"file_size_bytes\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:22:\"is_public_page_enabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:23:\"public_install_page_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:28:\"v0.ArtifactShowResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:42:\"#/definitions/v0.ArtifactResponseItemModel\";}}}s:23:\"v0.ArtifactUpdateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:22:\"is_public_page_enabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:34:\"v0.AvatarCandidateCreateBulkParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"filename\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"filesize\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}}s:30:\"v0.AvatarCandidateCreateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"filename\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"filesize\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:36:\"v0.AvatarCandidateCreateResponseItem\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"filename\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"filesize\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"upload_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:37:\"v0.AvatarCandidateCreateResponseItems\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"filename\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"filesize\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"upload_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:22:\"v0.AvatarPromoteParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"is_promoted\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:33:\"v0.AvatarPromoteResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:12:\"is_candidate\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:29:\"v0.AvatarPromoteResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:47:\"#/definitions/v0.AvatarPromoteResponseItemModel\";}}}s:26:\"v0.BranchListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:19:\"v0.BuildAbortParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"abort_reason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"abort_with_success\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:18:\"skip_notifications\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:26:\"v0.BuildAbortResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:36:\"v0.BuildCertificateListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:50:\"#/definitions/v0.BuildCertificateResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:36:\"v0.BuildCertificateResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":9:{s:20:\"certificate_password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"download_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_expose\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_protected\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"processed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"upload_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:32:\"v0.BuildCertificateResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:50:\"#/definitions/v0.BuildCertificateResponseItemModel\";}}}s:31:\"v0.BuildCertificateUpdateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:20:\"certificate_password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_expose\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_protected\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"processed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:31:\"v0.BuildCertificateUploadParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:32:\"v0.BuildListAllResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":24:{s:12:\"abort_reason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"build_number\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"commit_hash\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"commit_message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"commit_view_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:31:\"environment_prepare_finished_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"finished_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"is_on_hold\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:21:\"original_build_params\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"pull_request_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:26:\"pull_request_target_branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:21:\"pull_request_view_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"repository\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:37:\"#/definitions/v0.AppResponseItemModel\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"stack_config_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"stack_identifier\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"started_on_worker_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"status_text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"tag\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"triggered_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"triggered_by\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"triggered_workflow\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:28:\"v0.BuildListAllResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:46:\"#/definitions/v0.BuildListAllResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:25:\"v0.BuildListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:39:\"#/definitions/v0.BuildResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:33:\"v0.BuildLogChunkItemResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"chunk\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:28:\"v0.BuildLogInfoResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:20:\"expiring_raw_log_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"generated_log_chunks_num\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"is_archived\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"log_chunks\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:47:\"#/definitions/v0.BuildLogChunkItemResponseModel\";}}s:9:\"timestamp\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:25:\"v0.BuildParamsEnvironment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"is_expand\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"mapped_to\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:32:\"v0.BuildRequestListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:46:\"#/definitions/v0.BuildRequestResponseItemModel\";}}}}s:32:\"v0.BuildRequestResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:12:\"build_params\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"pull_request_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:27:\"v0.BuildRequestUpdateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"is_approved\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:34:\"v0.BuildRequestUpdateResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:46:\"#/definitions/v0.BuildRequestResponseItemModel\";}}}s:25:\"v0.BuildResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":23:{s:12:\"abort_reason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"build_number\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"commit_hash\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"commit_message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"commit_view_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:31:\"environment_prepare_finished_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"finished_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"is_on_hold\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:21:\"original_build_params\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"pull_request_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:26:\"pull_request_target_branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:21:\"pull_request_view_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"stack_config_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"stack_identifier\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"started_on_worker_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"status_text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"tag\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"triggered_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"triggered_by\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"triggered_workflow\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:25:\"v0.BuildShowResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:39:\"#/definitions/v0.BuildResponseItemModel\";}}}s:21:\"v0.BuildTriggerParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"build_params\";O:8:\"stdClass\":3:{s:11:\"description\";s:52:\"The
  public part of the SSH key you would like to use\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:46:\"#/definitions/v0.BuildTriggerParamsBuildParams\";}s:9:\"hook_info\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:43:\"#/definitions/v0.BuildTriggerParamsHookInfo\";}}}s:32:\"v0.BuildTriggerParamsBuildParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":18:{s:6:\"branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"branch_dest\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"branch_dest_repo_owner\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"branch_repo_owner\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"build_request_slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"commit_hash\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"commit_message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"commit_paths\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/v0.CommitPaths\";}}s:8:\"diff_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"environments\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:39:\"#/definitions/v0.BuildParamsEnvironment\";}}s:19:\"pull_request_author\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"pull_request_head_branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"pull_request_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:25:\"pull_request_merge_branch\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:27:\"pull_request_repository_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"skip_git_status_report\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:3:\"tag\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"workflow_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:29:\"v0.BuildTriggerParamsHookInfo\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"type\";O:8:\"stdClass\":3:{s:11:\"description\";s:19:\"Should
  be \"bitrise\"\";s:4:\"type\";s:6:\"string\";s:7:\"example\";s:7:\"bitrise\";}}}s:24:\"v0.BuildTriggerRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:12:\"build_number\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"build_slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"build_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"service\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"triggered_workflow\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:33:\"v0.BuildWorkflowListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:14:\"v0.CommitPaths\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"added\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"modified\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:7:\"removed\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:30:\"v0.FindAvatarCandidateResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:48:\"#/definitions/v0.FindAvatarCandidateResponseItem\";}}}}s:34:\"v0.FindAvatarCandidateResponseItem\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"download_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"filename\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:24:\"v0.OrganizationDataModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:15:\"avatar_icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"concurrency_count\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"owners\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/v0.OrganizationOwner\";}}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:28:\"v0.OrganizationListRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:38:\"#/definitions/v0.OrganizationDataModel\";}}}}s:20:\"v0.OrganizationOwner\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:24:\"v0.OrganizationRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:38:\"#/definitions/v0.OrganizationDataModel\";}}}s:28:\"v0.OwnerAccountResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"account_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:30:\"v0.OwnerAddOnResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:4:\"apps\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:42:\"#/definitions/v0.AddOnAppResponseItemModel\";}}s:13:\"dashboard_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"documentation_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"icon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"summary\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:31:\"v0.OwnerAddOnsListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:44:\"#/definitions/v0.OwnerAddOnResponseItemModel\";}}}}s:22:\"v0.PagingResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"next\";O:8:\"stdClass\":2:{s:11:\"description\";s:210:\"Next
  is the \"anchor\" for pagination. This value should be passed to the same endpoint\nto
  get the next page. Empty/not included if there's no \"next\" page.\nStop paging
  when there's no \"Next\" item in the response!\";s:4:\"type\";s:6:\"string\";}s:15:\"page_item_limit\";O:8:\"stdClass\":2:{s:11:\"description\";s:148:\"PageItemLimit
  - per-page item count. A given page might include\nless items if there's not enough
  items. This value is the \"max item count per page\".\";s:4:\"type\";s:7:\"integer\";}s:16:\"total_item_count\";O:8:\"stdClass\":2:{s:11:\"description\";s:54:\"TotalItemCount
  - total item count, through \"all pages\"\";s:4:\"type\";s:7:\"integer\";}}}s:16:\"v0.PlanDataModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:15:\"container_count\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"expires_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"price\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:41:\"v0.ProjectFileStorageDocumentUpdateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:22:\"exposed_meta_datastore\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_expose\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_protected\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"processed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"user_env_key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:38:\"v0.ProjectFileStorageListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:52:\"#/definitions/v0.ProjectFileStorageResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:38:\"v0.ProjectFileStorageResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":10:{s:12:\"download_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"exposed_meta_datastore\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_expose\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_protected\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"processed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"upload_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"user_env_key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:34:\"v0.ProjectFileStorageResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:52:\"#/definitions/v0.ProjectFileStorageResponseItemModel\";}}}s:33:\"v0.ProjectFileStorageUploadParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:12:\"user_env_key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:34:\"v0.ProvProfileDocumentUpdateParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"is_expose\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_protected\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"processed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:36:\"v0.ProvisionProfileListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:50:\"#/definitions/v0.ProvisionProfileResponseItemModel\";}}s:6:\"paging\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"pagination\";s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:36:\"#/definitions/v0.PagingResponseModel\";}}}s:36:\"v0.ProvisionProfileResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:12:\"download_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_expose\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_protected\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"processed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"upload_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:32:\"v0.ProvisionProfileResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:50:\"#/definitions/v0.ProvisionProfileResponseItemModel\";}}}s:31:\"v0.ProvisionProfileUploadParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:16:\"upload_file_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"upload_file_size\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:18:\"v0.SSHKeyRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:21:\"v0.SSHKeyUploadParams\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:20:\"auth_ssh_private_key\";O:8:\"stdClass\":2:{s:11:\"description\";s:53:\"The
  private part of the SSH key you would like to use\";s:4:\"type\";s:6:\"string\";}s:19:\"auth_ssh_public_key\";O:8:\"stdClass\":2:{s:11:\"description\";s:52:\"The
  public part of the SSH key you would like to use\";s:4:\"type\";s:6:\"string\";}s:37:\"is_register_key_into_provider_service\";O:8:\"stdClass\":2:{s:11:\"description\";s:95:\"If
  it's set to true, the provided SSH key will be registered at the provider of the
  application\";s:4:\"type\";s:7:\"boolean\";}}}s:30:\"v0.TestDeviceListResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:44:\"#/definitions/v0.TestDeviceResponseItemModel\";}}}}s:30:\"v0.TestDeviceResponseItemModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"device_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"device_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"owner\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"v0.UserPlanDataModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"current_plan\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:30:\"#/definitions/v0.PlanDataModel\";}s:12:\"pending_plan\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:30:\"#/definitions/v0.PlanDataModel\";}s:16:\"trial_expires_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"v0.UserPlanRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:34:\"#/definitions/v0.UserPlanDataModel\";}}}s:23:\"v0.UserProfileDataModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:10:\"avatar_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"unconfirmed_email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:23:\"v0.UserProfileRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:37:\"#/definitions/v0.UserProfileDataModel\";}}}s:35:\"v0.WebhookDeliveryItemResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":10:{s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"request_headers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"request_payload\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"request_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"response_body\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"response_headers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"response_http_status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"response_seconds\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"updated_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:39:\"v0.WebhookDeliveryItemShowResponseModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:49:\"#/definitions/v0.WebhookDeliveryItemResponseModel\";}}}s:19:\"v0.WebhookRespModel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
