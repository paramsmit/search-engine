---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:157:\"Interface description
  for Net2Plan to ONOS integration. This is the API presented by Net2Plan to ONOS,
  a separate description exists for the other direction.\";s:7:\"version\";s:5:\"0.2.0\";s:5:\"title\";s:30:\"Net2Plan
  - ONOS REST Interface\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:19:\"Pontus
  Sk\xF6ldstr\xF6m\";s:3:\"url\";s:19:\"http://www.acreo.se\";s:5:\"email\";s:15:\"ponsko@acreo.se\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: net2plan.com
basePath: /api
paths:
  /algorithm:
    get:
      tags:
      - Plans
      summary: GetAllAlgorithms
      description: Get a list of all algorithms
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: List of supported planning algorithms
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapAlgo'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
  /demands:
    get:
      tags:
      - Demands
      summary: GetAllDemands
      description: Get all the demands in the topology
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: List of demands
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapDemand'
        404:
          description: No demands found
          schema:
            $ref: '#/definitions/NetRapMessage'
    post:
      tags:
      - Demands
      summary: CreateDemand
      description: Add a new demand
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapDemand'
      responses:
        200:
          description: Status 200nUnique identifier generated by N2P
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapAction'
        400:
          description: Status 400
          schema:
            $ref: '#/definitions/NetRapMessage'
    delete:
      tags:
      - Demands
      summary: DeleteAllDemands
      description: Delete all the demands
      parameters: []
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapMessage'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
  /demands/{demandId}:
    get:
      tags:
      - Demands
      summary: GetDemand
      description: Get an individual demand
      produces:
      - application/json
      parameters:
      - name: demandId
        in: path
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapDemand'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
    put:
      tags:
      - Demands
      summary: UpdateDemand
      description: Update a demand
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: demandId
        in: path
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapDemand'
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapDemand'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
    delete:
      tags:
      - Demands
      summary: DeleteDemand
      description: Delete individual demand
      parameters:
      - name: demandId
        in: path
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapMessage'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
  /demands/list:
    post:
      tags:
      - Demands
      summary: CreateListDemands
      description: Create multiple demands at once
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/NetRapDemand'
      responses:
        200:
          description: Returns a list of unique identifiers for the created demands
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapAction'
  /plans:
    get:
      tags:
      - Plans
      summary: GetAllPlans
      description: Get a list of all plans, regardless of state
      produces:
      - application/json
      parameters:
      - name: state
        in: query
        description: Filter the list to only show plans with the specified status
        required: false
        type: string
        x-example: RUNNING
      responses:
        200:
          description: Status 200
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapPlan'
        400:
          description: Status 400
          schema:
            $ref: '#/definitions/NetRapMessage'
    post:
      tags:
      - Plans
      summary: CreatePlan
      description: Create a new plan based on current topology and demands
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: algorithm
        in: query
        description: Algorithm to use for planning
        required: false
        type: string
        x-example: Offline_ba_numFormulations
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapPlan'
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapPlan'
        400:
          description: Status 400
          schema:
            $ref: '#/definitions/NetRapMessage'
    delete:
      tags:
      - Plans
      summary: DeleteAllPlans
      description: Delete all the plans
      parameters: []
      responses:
        200:
          description: All plans deleted OK
          schema:
            $ref: '#/definitions/NetRapMessage'
        400:
          description: Status 400
          schema:
            $ref: '#/definitions/NetRapMessage'
  /plans/{planId}:
    get:
      tags:
      - Plans
      summary: GetPlan
      description: Get a single plan
      produces:
      - application/json
      parameters:
      - name: planId
        in: path
        description: PlanId assigned by Net2Plan, returned by CreatePlan
        required: true
        type: string
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapPlan'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
    delete:
      tags:
      - Plans
      summary: DeletePlan
      description: Delete a plan regardless of state
      parameters:
      - name: planId
        in: path
        description: PlanId assigned by Net2Plan, returned by CreatePlan
        required: true
        type: string
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapMessage'
  /routes:
    get:
      tags:
      - Route
      summary: GetAllRoutes
      parameters: []
      responses:
        200:
          description: Status 200
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapRoute'
    post:
      tags:
      - Route
      summary: CreateRoute
      parameters: []
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapIdentifier'
  /topology:
    get:
      tags:
      - Topology
      summary: GetTopology
      description: Get the current topology
      parameters: []
      responses:
        200:
          description: Full topology
          schema:
            $ref: '#/definitions/NetRapTopology'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
    post:
      tags:
      - Topology
      summary: CreateTopology
      description: Create topology from scratch
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapTopology'
      responses:
        200:
          description: Successfully created topology
          schema:
            $ref: '#/definitions/NetRapMessage'
        400:
          description: Could not create Topology
          schema:
            $ref: '#/definitions/NetRapMessage'
  /topology/link:
    get:
      tags:
      - Topology
      summary: GetAllLinks
      description: Return all links in the topology
      parameters: []
      responses:
        200:
          description: Status 200
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapLink'
        404:
          description: Status 404
          schema:
            $ref: '#/definitions/NetRapMessage'
    post:
      tags:
      - Topology
      summary: CreateLink
      description: Create a link between existing nodes in the topology
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapLink'
      responses:
        200:
          description: Status 200,nUnique identifier generated by Net2Plan
          schema:
            $ref: '#/definitions/NetRapIdentifier'
    delete:
      tags:
      - Topology
      summary: DeleteAllLinks
      description: Delete all the links in the topology
      parameters: []
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapMessage'
  /topology/link/{linkId}:
    get:
      tags:
      - Topology
      summary: GetLink
      description: Get a particular link
      parameters:
      - name: linkId
        in: path
        description: Identifier of a particular link
        required: true
        type: string
      responses:
        200:
          description: Found link
          schema:
            $ref: '#/definitions/NetRapLink'
        404:
          description: Could not find link
          schema:
            $ref: '#/definitions/NetRapMessage'
    put:
      tags:
      - Topology
      summary: UpdateLink
      description: Update a particular link
      parameters:
      - name: linkId
        in: path
        description: Identifier of a particular link
        required: true
        type: string
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapLink'
      responses:
        200:
          description: Link succesfully updated
          schema:
            $ref: '#/definitions/NetRapLink'
        404:
          description: Could not find link to update
          schema:
            $ref: '#/definitions/NetRapMessage'
    delete:
      tags:
      - Topology
      summary: DeleteLink
      description: Remove a particular link
      parameters:
      - name: linkId
        in: path
        description: Identifier of a particular link
        required: true
        type: string
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapMessage'
  /topology/node:
    get:
      tags:
      - Topology
      summary: GetAllNodes
      description: Get a list of all nodes
      parameters: []
      responses:
        200:
          description: List of nodes
          schema:
            type: array
            items:
              $ref: '#/definitions/NetRapNode'
        404:
          description: No nodes found
          schema:
            $ref: '#/definitions/NetRapMessage'
    post:
      tags:
      - Topology
      summary: CreateNode
      description: Create a new Node
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapNode'
      responses:
        200:
          description: Status 200nUnique node identifier generated by n2p
          schema:
            $ref: '#/definitions/NetRapIdentifier'
    delete:
      tags:
      - Topology
      summary: DeleteAllNodes
      description: Delete all nodes from the topology
      parameters: []
      responses:
        200:
          description: Status 200
          schema:
            $ref: '#/definitions/NetRapMessage'
  /topology/node/{nodeId}:
    get:
      tags:
      - Topology
      summary: GetNode
      description: Get information about a node
      parameters:
      - name: nodeId
        in: path
        description: Name of a node
        required: true
        type: string
      responses:
        200:
          description: A single node
          schema:
            $ref: '#/definitions/NetRapNode'
        404:
          description: Node not found
          schema:
            $ref: '#/definitions/NetRapMessage'
    put:
      tags:
      - Topology
      summary: UpdateNode
      description: Update the information on a single node
      parameters:
      - name: nodeId
        in: path
        description: Name of a node
        required: true
        type: string
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/NetRapNode'
      responses:
        200:
          description: Node was successfully updated
          schema:
            $ref: '#/definitions/NetRapNode'
        404:
          description: Node could not be found
          schema:
            $ref: '#/definitions/NetRapMessage'
    delete:
      tags:
      - Topology
      summary: DeleteNode
      description: Delete a node
      parameters:
      - name: nodeId
        in: path
        description: Name of a node
        required: true
        type: string
      responses:
        200:
          description: Successfully deleted node
          schema:
            $ref: '#/definitions/NetRapMessage'
        404:
          description: Could not find node to delete
          schema:
            $ref: '#/definitions/NetRapMessage'
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":13:{s:10:\"NetRapAlgo\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:11:\"description\";i:1;s:4:\"name\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:28:\"Description
  of the algorithm\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:21:\"Name
  of the algorithm\";}}s:11:\"description\";s:36:\"Name and description of an algorithm\";}s:12:\"NetRapDemand\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:10:\"EgressNode\";i:1;s:11:\"IngressNode\";i:2;s:14:\"OfferedTraffic\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:10:\"EgressNode\";O:8:\"stdClass\":2:{s:11:\"description\";s:39:\"nodeId
  of the destination of the demand\";s:4:\"$ref\";s:20:\"#/definitions/PortId\";}s:11:\"IngressNode\";O:8:\"stdClass\":2:{s:11:\"description\";s:34:\"nodeId
  of the source of the demand\";s:4:\"$ref\";s:20:\"#/definitions/PortId\";}s:14:\"OfferedTraffic\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:34:\"The
  traffic offered by this demand\";}s:10:\"attributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/HashMap\";s:11:\"description\";s:118:\"Optional
  map of attributes, for ACINO three are required (maxLatencyInMs/double, minAvailability/double,
  wdmClass/int)\";}s:10:\"identifier\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:11:\"description\";s:38:\"Unique
  Identifier, created by net2plan\";}s:7:\"routeId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:16:\"Associated
  route\";}s:5:\"route\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:23:\"Optionaassociated
  route\";s:4:\"$ref\";s:25:\"#/definitions/NetRapRoute\";}}s:11:\"description\";s:26:\"Representation
  of a demand\";}s:10:\"NetRapLink\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:6:{i:0;s:8:\"capacity\";i:1;s:3:\"dst\";i:2;s:5:\"layer\";i:3;s:10:\"lengthInKm\";i:4;s:16:\"propagationSpeed\";i:5;s:3:\"src\";}s:10:\"properties\";O:8:\"stdClass\":11:{s:4:\"MTBF\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:35:\"Mean
  Time Between Failures in Hours\";}s:4:\"MTTR\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:28:\"Mean
  Time To Repair in Hours\";}s:10:\"attributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/HashMap\";s:11:\"description\";s:83:\"Optional
  map of attributes, for ACINO two are required (srcPort, dstPort, both int)\";}s:8:\"capacity\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:114:\"Capacity
  of the link\nIf layer = 0, this is the amount of wavelength slots\nIf layer=1, this
  is the Gbps of the link\";}s:3:\"dst\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:67:\"Destination
  of the link.\nShould contain the ID of an existing node.\";}s:10:\"identifier\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:39:\"Unique
  identifier, assigned by net2plan\";}s:5:\"layer\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:71:\"Which
  layer the node should be placed in\n0 = Optical layer\n1 = IP layer\";}s:10:\"lengthInKm\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:32:\"Length
  of the link in kilometers\";}s:16:\"propagationSpeed\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:68:\"Signal
  propagation speed on this link\nGiven in kilometers per second\";}s:3:\"src\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:62:\"Source
  of the link.\nShould contain the ID of an existing node.\";}s:3:\"srg\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:22:\"Shared
  risk group name\";}}s:11:\"description\";s:21:\"Description of a link\";}s:10:\"NetRapNode\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:8:\"latitude\";i:2;s:9:\"longitude\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:4:\"MTBF\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:80:\"Mean
  Time Between Failure in Hours\nIf not here, a default value will be assigned\";}s:4:\"MTTR\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:76:\"Mean
  Time To Recovery in Hours\nIf not here, a default value will be assigned\";}s:3:\"SRG\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:133:\"Name
  of a Shared-risk group\nIf not here, an SRG will not be assigned\nIf here, an SRG
  with default values will be created and assigned\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:39:\"External
  name of the device (ONOS name)\";}s:8:\"latitude\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:22:\"X
  position of the node\";}s:9:\"longitude\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:22:\"Y
  position of the node\";}s:10:\"attributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/HashMap\";s:11:\"description\";s:242:\"Representation
  of a single node\nThe node can be either ROADM, OTN, SWITCH/ROUTER types.\nFor ACINO,
  the attribute list should include \n\"IPNode\": \"true\" (OTN/SWITCH/ROUTER) or
  \"false\" (ROADM), and \n\"name\": \"a3_bottom\", the symbolic name in ONOS\";}}}s:10:\"NetRapPlan\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"state\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"demands\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:28:\"Demands
  used in the planning\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/NetRapDemand\";}}s:10:\"identifier\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:11:\"description\";s:33:\"Planning
  id, assigned by Net2Plan\";}s:6:\"routes\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:29:\"Planned
  route in the topology\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/NetRapRoute\";}}s:5:\"state\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:148:\"Status
  of the plan\nWAITING - calculation not started,\nRUNNING - calculation running,
  \nFAILED - calculation failed, \nCOMPLETED - calculation complete\";}s:8:\"topology\";O:8:\"stdClass\":2:{s:11:\"description\";s:29:\"Topology
  used in the planning\";s:4:\"$ref\";s:28:\"#/definitions/NetRapTopology\";}}s:11:\"description\";s:95:\"Represents
  a plan containing topology, demands, routes, and the algorithm used to calculate
  it.\";}s:11:\"NetRapRoute\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"links\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:5:\"links\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:23:\"Links
  used by the route\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/NetRapLink\";}}s:5:\"nodes\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:31:\"Nodes
  being passed by the route\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/NetRapNode\";}}s:8:\"demandId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:17:\"Associated
  demand\";}s:5:\"layer\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:40:\"Layer
  in the network the route refers to\";}s:16:\"occupiedCapacity\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:53:\"Link
  capacity units occupied (e.g. 2 for 2 wdm slots)\";}s:10:\"attributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/HashMap\";s:11:\"description\";s:124:\"Optional
  map of attributes, for ACINO optical layer routes should have (seqFrequencySlotsInitialRoute,
  seqFrequencySlots_se)\";}}s:11:\"description\";s:37:\"Object representing an assigned
  route\";}s:9:\"NetRapSRG\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:4:\"MTBF\";i:1;s:4:\"MTTR\";i:2;s:4:\"name\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:4:\"MTBF\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:35:\"Mean
  Time Between Failures in Hours\";}s:4:\"MTTR\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:28:\"Mean
  Time To Repair in Hours\";}s:10:\"attributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/HashMap\";s:11:\"description\";s:26:\"Optional
  map of attributes\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:29:\"Name
  of the shared risk group\";}}s:11:\"description\";s:32:\"Shared risk group representation\";}s:14:\"NetRapTopology\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:5:\"links\";i:1;s:5:\"nodes\";i:2;s:4:\"srgs\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"links\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/NetRapLink\";}}s:5:\"nodes\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/NetRapNode\";}}s:4:\"srgs\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/NetRapSRG\";}}}s:11:\"description\";s:33:\"Representation
  of a full topology\";}s:6:\"PortId\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:6:\"device\";i:1;s:4:\"port\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"device\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:36:\"Device
  identifier, e.g. \"of:0000003\"\";}s:4:\"port\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:25:\"Port
  identifier, e.g. \"2\"\";}}s:11:\"description\";s:28:\"Identifies a particular port\";}s:7:\"HashMap\";O:8:\"stdClass\":1:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:13:\"NetRapMessage\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:7:\"message\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:31:\"Message
  string, typically error\";}}s:11:\"description\";s:13:\"Error message\";}s:16:\"NetRapIdentifier\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:10:\"identifier\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"identifier\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:11:\"description\";s:15:\"Identifier
  long\";}}s:11:\"description\";s:71:\"Unique identifier of various things in N2P,
  nodes, links, demands, etc.\";}s:12:\"NetRapAction\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:6:\"action\";i:1;s:6:\"demand\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"action\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:33:\"Enumerator
  for the type of action\";s:4:\"enum\";a:5:{i:0;s:3:\"NEW\";i:1;s:5:\"ROUTE\";i:2;s:4:\"MOVE\";i:3;s:6:\"UPDATE\";i:4;s:4:\"FAIL\";}}s:6:\"demand\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:26:\"#/definitions/NetRapDemand\";}}}}"
...
