---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:7:\"license\";O:8:\"stdClass\":2:{s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";s:4:\"name\";s:10:\"Apache
  2.0\";}s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:18:\"apiteam@swagger.io\";}s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:5:\"title\";s:16:\"Swagger
  Petstore\";s:7:\"version\";s:5:\"1.0.0\";s:11:\"description\";s:270:\"This is a
  sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io)
  or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you
  can use the api key `special-key` to test the authorization filters.\";}"
host: petstore.swagger.io
basePath: /v2
paths:
  /user/{username}:
    delete:
      responses:
        404:
          description: User not found
        400:
          description: Invalid username supplied
      parameters:
      - type: string
        required: true
        description: The name that needs to be deleted
        in: path
        name: username
      produces:
      - application/xml
      - application/json
      operationId: deleteUser
      description: This can only be done by the logged in user.
      summary: Delete user
      tags:
      - user
    put:
      responses:
        404:
          description: User not found
        400:
          description: Invalid user supplied
      parameters:
      - type: string
        required: true
        description: name that need to be updated
        in: path
        name: username
      - schema:
          $ref: '#/definitions/User'
        required: true
        description: Updated user object
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      operationId: updateUser
      description: This can only be done by the logged in user.
      summary: Updated user
      tags:
      - user
    get:
      responses:
        404:
          description: User not found
        400:
          description: Invalid username supplied
        200:
          schema:
            $ref: '#/definitions/User'
          description: successful operation
      parameters:
      - type: string
        required: true
        description: 'The name that needs to be fetched. Use user1 for testing. '
        in: path
        name: username
      produces:
      - application/xml
      - application/json
      operationId: getUserByName
      description: ""
      summary: Get user by user name
      tags:
      - user
  /user/logout:
    get:
      responses:
        default:
          description: successful operation
      parameters: []
      produces:
      - application/xml
      - application/json
      operationId: logoutUser
      description: ""
      summary: Logs out current logged in user session
      tags:
      - user
  /user/login:
    get:
      responses:
        400:
          description: Invalid username/password supplied
        200:
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              format: date-time
              type: string
            X-Rate-Limit:
              description: calls per hour allowed by the user
              format: int32
              type: integer
          schema:
            type: string
          description: successful operation
      parameters:
      - type: string
        required: true
        description: The user name for login
        in: query
        name: username
      - type: string
        required: true
        description: The password for login in clear text
        in: query
        name: password
      produces:
      - application/xml
      - application/json
      operationId: loginUser
      description: ""
      summary: Logs user into the system
      tags:
      - user
  /user/createWithList:
    post:
      responses:
        default:
          description: successful operation
      parameters:
      - schema:
          items:
            $ref: '#/definitions/User'
          type: array
        required: true
        description: List of user object
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      operationId: createUsersWithListInput
      description: ""
      summary: Creates list of users with given input array
      tags:
      - user
  /user/createWithArray:
    post:
      responses:
        default:
          description: successful operation
      parameters:
      - schema:
          items:
            $ref: '#/definitions/User'
          type: array
        required: true
        description: List of user object
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      operationId: createUsersWithArrayInput
      description: ""
      summary: Creates list of users with given input array
      tags:
      - user
  /user:
    post:
      responses:
        default:
          description: successful operation
      parameters:
      - schema:
          $ref: '#/definitions/User'
        required: true
        description: Created user object
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      operationId: createUser
      description: This can only be done by the logged in user.
      summary: Create user
      tags:
      - user
  /store/order/{orderId}:
    delete:
      responses:
        404:
          description: Order not found
        400:
          description: Invalid ID supplied
      parameters:
      - format: int64
        minimum: 1
        type: integer
        required: true
        description: ID of the order that needs to be deleted
        in: path
        name: orderId
      produces:
      - application/xml
      - application/json
      operationId: deleteOrder
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      summary: Delete purchase order by ID
      tags:
      - store
    get:
      responses:
        404:
          description: Order not found
        400:
          description: Invalid ID supplied
        200:
          schema:
            $ref: '#/definitions/Order'
          description: successful operation
      parameters:
      - format: int64
        minimum: 1
        maximum: 10
        type: integer
        required: true
        description: ID of pet that needs to be fetched
        in: path
        name: orderId
      produces:
      - application/xml
      - application/json
      operationId: getOrderById
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      summary: Find purchase order by ID
      tags:
      - store
  /store/order:
    post:
      responses:
        400:
          description: Invalid Order
        200:
          schema:
            $ref: '#/definitions/Order'
          description: successful operation
      parameters:
      - schema:
          $ref: '#/definitions/Order'
        required: true
        description: order placed for purchasing the pet
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      operationId: placeOrder
      description: ""
      summary: Place an order for a pet
      tags:
      - store
  /store/inventory:
    get:
      security:
      - api_key: []
      responses:
        200:
          schema:
            additionalProperties:
              format: int32
              type: integer
            type: object
          description: successful operation
      parameters: []
      produces:
      - application/json
      operationId: getInventory
      description: Returns a map of status codes to quantities
      summary: Returns pet inventories by status
      tags:
      - store
  /pet/{petId}/uploadImage:
    post:
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        200:
          schema:
            $ref: '#/definitions/ApiResponse'
          description: successful operation
      parameters:
      - format: int64
        type: integer
        required: true
        description: ID of pet to update
        in: path
        name: petId
      - type: string
        required: false
        description: Additional data to pass to server
        in: formData
        name: additionalMetadata
      - type: file
        required: false
        description: file to upload
        in: formData
        name: file
      produces:
      - application/json
      consumes:
      - multipart/form-data
      operationId: uploadFile
      description: ""
      summary: uploads an image
      tags:
      - pet
  /pet/{petId}:
    delete:
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        404:
          description: Pet not found
        400:
          description: Invalid ID supplied
      parameters:
      - type: string
        required: false
        in: header
        name: api_key
      - format: int64
        type: integer
        required: true
        description: Pet id to delete
        in: path
        name: petId
      produces:
      - application/xml
      - application/json
      operationId: deletePet
      description: ""
      summary: Deletes a pet
      tags:
      - pet
    post:
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        405:
          description: Invalid input
      parameters:
      - format: int64
        type: integer
        required: true
        description: ID of pet that needs to be updated
        in: path
        name: petId
      - type: string
        required: false
        description: Updated name of the pet
        in: formData
        name: name
      - type: string
        required: false
        description: Updated status of the pet
        in: formData
        name: status
      produces:
      - application/xml
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      operationId: updatePetWithForm
      description: ""
      summary: Updates a pet in the store with form data
      tags:
      - pet
    get:
      security:
      - api_key: []
      responses:
        404:
          description: Pet not found
        400:
          description: Invalid ID supplied
        200:
          schema:
            $ref: '#/definitions/Pet'
          description: successful operation
      parameters:
      - format: int64
        type: integer
        required: true
        description: ID of pet to return
        in: path
        name: petId
      produces:
      - application/xml
      - application/json
      operationId: getPetById
      description: Returns a single pet
      summary: Find pet by ID
      tags:
      - pet
  /pet/findByTags:
    get:
      deprecated: true
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        400:
          description: Invalid tag value
        200:
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
          description: successful operation
      parameters:
      - collectionFormat: multi
        items:
          type: string
        type: array
        required: true
        description: Tags to filter by
        in: query
        name: tags
      produces:
      - application/xml
      - application/json
      operationId: findPetsByTags
      description: Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      summary: Finds Pets by tags
      tags:
      - pet
  /pet/findByStatus:
    get:
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        400:
          description: Invalid status value
        200:
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
          description: successful operation
      parameters:
      - collectionFormat: multi
        items:
          default: available
          enum:
          - available
          - pending
          - sold
          type: string
        type: array
        required: true
        description: Status values that need to be considered for filter
        in: query
        name: status
      produces:
      - application/xml
      - application/json
      operationId: findPetsByStatus
      description: Multiple status values can be provided with comma separated strings
      summary: Finds Pets by status
      tags:
      - pet
  /pet:
    put:
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        405:
          description: Validation exception
        404:
          description: Pet not found
        400:
          description: Invalid ID supplied
      parameters:
      - schema:
          $ref: '#/definitions/Pet'
        required: true
        description: Pet object that needs to be added to the store
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      consumes:
      - application/json
      - application/xml
      operationId: updatePet
      description: ""
      summary: Update an existing pet
      tags:
      - pet
    post:
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        405:
          description: Invalid input
      parameters:
      - schema:
          $ref: '#/definitions/Pet'
        required: true
        description: Pet object that needs to be added to the store
        name: body
        in: body
      produces:
      - application/xml
      - application/json
      consumes:
      - application/json
      - application/xml
      operationId: addPet
      description: ""
      summary: Add a new pet to the store
      tags:
      - pet
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":6:{s:11:\"ApiResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"code\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:3:\"Pet\";O:8:\"stdClass\":4:{s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"Pet\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"enum\";a:3:{i:0;s:9:\"available\";i:1;s:7:\"pending\";i:2;s:4:\"sold\";}s:11:\"description\";s:23:\"pet
  status in the store\";s:4:\"type\";s:6:\"string\";}s:4:\"tags\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Tag\";}s:3:\"xml\";O:8:\"stdClass\":2:{s:7:\"wrapped\";b:1;s:4:\"name\";s:3:\"tag\";}s:4:\"type\";s:5:\"array\";}s:9:\"photoUrls\";O:8:\"stdClass\":3:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"xml\";O:8:\"stdClass\":2:{s:7:\"wrapped\";b:1;s:4:\"name\";s:8:\"photoUrl\";}s:4:\"type\";s:5:\"array\";}s:4:\"name\";O:8:\"stdClass\":2:{s:7:\"example\";s:6:\"doggie\";s:4:\"type\";s:6:\"string\";}s:8:\"category\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Category\";}s:2:\"id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:9:\"photoUrls\";}s:4:\"type\";s:6:\"object\";}s:3:\"Tag\";O:8:\"stdClass\":3:{s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"Tag\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Category\";O:8:\"stdClass\":3:{s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"Category\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:4:\"User\";O:8:\"stdClass\":3:{s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:4:\"User\";}s:10:\"properties\";O:8:\"stdClass\":8:{s:10:\"userStatus\";O:8:\"stdClass\":3:{s:11:\"description\";s:11:\"User
  Status\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Order\";O:8:\"stdClass\":3:{s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"Order\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:8:\"complete\";O:8:\"stdClass\":2:{s:7:\"default\";b:0;s:4:\"type\";s:7:\"boolean\";}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"enum\";a:3:{i:0;s:6:\"placed\";i:1;s:8:\"approved\";i:2;s:9:\"delivered\";}s:11:\"description\";s:12:\"Order
  Status\";s:4:\"type\";s:6:\"string\";}s:8:\"shipDate\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:8:\"quantity\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:5:\"petId\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}s:2:\"id\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}}"
...
