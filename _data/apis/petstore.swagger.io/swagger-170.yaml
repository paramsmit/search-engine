---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:11:\"description\";s:282:\"This is a sample
  server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io)
  or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample,
  you can use the api key `special-key` to test the authorization     filters.\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:16:\"Swagger
  Petstore\";s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:18:\"apiteam@swagger.io\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: petstore.swagger.io
paths:
  /pets:
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      description: ""
      operationId: addPet
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        201:
          description: Created operation
          schema:
            $ref: '#/definitions/Pet'
        409:
          description: Invalid input
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                - PET_ALREADY_EXISTS
              message:
                type: string
                example: A pet with this name is already available for donation
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pets/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                - INVALID_ID_ERROR
              message:
                type: string
                example: An id can only contain numbers
        404:
          description: Pet not found
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                - PET_NOT_FOUND
              message:
                type: string
                example: A pet with this id was not found
      security:
      - api_key: []
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":1:{s:3:\"Pet\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:10:\"photo_urls\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"doggie\";}s:10:\"photo_urls\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:23:\"pet
  status in the store\";s:4:\"enum\";a:3:{i:0;s:9:\"available\";i:1;s:7:\"pending\";i:2;s:4:\"sold\";}}}}}"
...
