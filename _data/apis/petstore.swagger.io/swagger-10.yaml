---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:11:\"description\";s:254:\"This is a sample
  server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a>
  or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\"
  to test the authorization filters\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:16:\"Swagger
  Petstore\";s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:7:\"contact\";O:8:\"stdClass\":3:{s:3:\"url\";s:17:\"http://swagger.io\";s:4:\"name\";s:20:\"Your
  pals at Swagger\";s:5:\"email\";s:18:\"apiteam@swagger.io\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: petstore.swagger.io
basePath: /v2
paths:
  /pet:
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      description: ""
      operationId: addPet
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: pet
        description: Pet object that needs to be added to the store
        required: false
        schema:
          $ref: '#/definitions/Pet'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    put:
      tags:
      - pet
      summary: Update an existing pet
      description: ""
      operationId: updatePet
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added to the store
        required: false
        schema:
          $ref: '#/definitions/Pet'
      responses:
        405:
          description: Validation exception
        404:
          description: Pet not found
        400:
          description: Invalid ID supplied
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/findByStatus:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      produces:
      - application/json
      - application/xml
      parameters:
      - in: query
        name: status
        description: Status values that need to be considered for filter
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma seperated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
      - application/json
      - application/xml
      parameters:
      - in: query
        name: tags
        description: Tags to filter by
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate
        API error conditions
      operationId: getPetById
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: petId
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        404:
          description: Pet not found
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: petId
        description: ID of pet that needs to be updated
        required: true
        type: string
      - in: formData
        name: name
        description: Updated name of the pet
        required: true
        type: string
      - in: formData
        name: status
        description: Updated status of the pet
        required: true
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      produces:
      - application/json
      - application/xml
      parameters:
      - in: header
        name: api_key
        description: ""
        required: true
        type: string
      - in: path
        name: petId
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a pet
      description: ""
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the pet
        required: false
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: orderId
        description: ID of pet that needs to be fetched
        required: true
        type: string
      responses:
        404:
          description: Order not found
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: orderId
        description: ID of the order that needs to be deleted
        required: true
        type: string
      responses:
        404:
          description: Order not found
        400:
          description: Invalid ID supplied
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: false
        schema:
          type: array
          items:
            $ref: User
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: false
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: query
        name: username
        description: The user name for login
        required: false
        type: string
      - in: query
        name: password
        description: The password for login in clear text
        required: false
        type: string
        format: password
      responses:
        200:
          description: successful operation
          schema:
            type: string
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: username
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        type: string
      responses:
        404:
          description: User not found
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: username
        description: name that need to be deleted
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        404:
          description: User not found
        400:
          description: Invalid user supplied
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: username
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        404:
          description: User not found
        400:
          description: Invalid username supplied
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":5:{s:4:\"User\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:2:\"id\";}}s:8:\"username\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"username\";}}s:9:\"firstName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:9:\"firstName\";}}s:8:\"lastName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"lastName\";}}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"email\";}}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"password\";}}s:5:\"phone\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"phone\";}}s:10:\"userStatus\";O:8:\"stdClass\":4:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:10:\"userStatus\";}s:11:\"description\";s:11:\"User
  Status\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:4:\"User\";}}s:8:\"Category\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:2:\"id\";}}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:4:\"name\";}}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"Category\";}}s:3:\"Pet\";O:8:\"stdClass\":3:{s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:9:\"photoUrls\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:2:\"id\";}}s:8:\"category\";O:8:\"stdClass\":2:{s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"category\";}s:4:\"$ref\";s:22:\"#/definitions/Category\";}s:4:\"name\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"doggie\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:4:\"name\";}}s:9:\"photoUrls\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:3:\"xml\";O:8:\"stdClass\":2:{s:4:\"name\";s:8:\"photoUrl\";s:7:\"wrapped\";b:1;}s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"tags\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:3:\"xml\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"tag\";s:7:\"wrapped\";b:1;}s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Tag\";}}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:6:\"status\";}s:11:\"description\";s:23:\"pet
  status in the store\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"Pet\";}}s:3:\"Tag\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:2:\"id\";}}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:4:\"name\";}}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:3:\"Tag\";}}s:5:\"Order\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:2:\"id\";}}s:5:\"petId\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"petId\";}}s:8:\"quantity\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"quantity\";}}s:8:\"shipDate\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"shipDate\";}}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:6:\"status\";}s:11:\"description\";s:12:\"Order
  Status\";}s:8:\"complete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"Order\";}}}"
...
