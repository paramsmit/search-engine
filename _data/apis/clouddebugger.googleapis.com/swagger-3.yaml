---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":11:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"Google\";s:3:\"url\";s:18:\"https://google.com\";}s:11:\"description\";s:100:\"Examines
  the call stack and variables of a running application without stopping or slowing
  it down.\n\";s:5:\"title\";s:20:\"Stackdriver Debugger\";s:7:\"version\";s:2:\"v2\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:37:\"https://console.developers.google.com\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:90:\"https://api.apis.guru/v2/cache/logo/https_cloud.google.com__static_images_new-gcp-logo.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:45:\"https://github.com/lucybot/api-spec-converter\";s:7:\"version\";s:5:\"2.6.2\";}s:6:\"format\";s:6:\"google\";s:3:\"url\";s:63:\"https://clouddebugger.googleapis.com/$discovery/rest?version=v2\";s:7:\"version\";s:2:\"v1\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:14:\"googleapis.com\";s:13:\"x-serviceName\";s:13:\"clouddebugger\";s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:20:\"google_clouddebugger\";s:4:\"type\";s:7:\"openapi\";}}"
host: clouddebugger.googleapis.com
basePath: /
paths: ~
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":27:{s:12:\"AliasContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:28:\"An
  alias to a repo revision.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"kind\";O:8:\"stdClass\":3:{s:11:\"description\";s:15:\"The
  alias kind.\";s:4:\"enum\";a:4:{i:0;s:3:\"ANY\";i:1;s:5:\"FIXED\";i:2;s:7:\"MOVABLE\";i:3;s:5:\"OTHER\";}s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:15:\"The
  alias name.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:10:\"Breakpoint\";O:8:\"stdClass\":3:{s:11:\"description\";s:60:\"Represents
  the breakpoint specification, status and results.\";s:10:\"properties\";O:8:\"stdClass\":16:{s:6:\"action\";O:8:\"stdClass\":3:{s:11:\"description\";s:85:\"Action
  that the agent should perform when the code at the\nbreakpoint location is hit.\";s:4:\"enum\";a:2:{i:0;s:7:\"CAPTURE\";i:1;s:3:\"LOG\";}s:4:\"type\";s:6:\"string\";}s:9:\"condition\";O:8:\"stdClass\":2:{s:11:\"description\";s:163:\"Condition
  that triggers the breakpoint.\nThe condition is a compound boolean expression composed
  using expressions\nin a programming language at the source location.\";s:4:\"type\";s:6:\"string\";}s:10:\"createTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:69:\"Time
  this breakpoint was created by the server in seconds resolution.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:20:\"evaluatedExpressions\";O:8:\"stdClass\":3:{s:11:\"description\";s:409:\"Values
  of evaluated expressions at breakpoint time.\nThe evaluated expressions appear in
  exactly the same order they\nare listed in the `expressions` field.\nThe `name`
  field holds the original expression text, the `value` or\n`members` field holds
  the result of the evaluated expression.\nIf the expression cannot be evaluated,
  the `status` inside the `Variable`\nwill indicate an error and contain the error
  text.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Variable\";}s:4:\"type\";s:5:\"array\";}s:11:\"expressions\";O:8:\"stdClass\":3:{s:11:\"description\";s:261:\"List
  of read-only expressions to evaluate at the breakpoint location.\nThe expressions
  are composed using expressions in the programming language\nat the source location.
  If the breakpoint action is `LOG`, the evaluated\nexpressions are included in log
  statements.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:9:\"finalTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:79:\"Time
  this breakpoint was finalized as seen by the server in seconds\nresolution.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"Breakpoint
  identifier, unique in the scope of the debuggee.\";s:4:\"type\";s:6:\"string\";}s:12:\"isFinalState\";O:8:\"stdClass\":2:{s:11:\"description\";s:103:\"When
  true, indicates that this is a final result and the\nbreakpoint state will not change
  from here on.\";s:4:\"type\";s:7:\"boolean\";}s:6:\"labels\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:91:\"A
  set of custom breakpoint properties, populated by the agent, to be\ndisplayed to
  the user.\";s:4:\"type\";s:6:\"object\";}s:8:\"location\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/SourceLocation\";s:11:\"description\";s:27:\"Breakpoint
  source location.\";}s:8:\"logLevel\";O:8:\"stdClass\":3:{s:11:\"description\";s:70:\"Indicates
  the severity of the log. Only relevant when action is `LOG`.\";s:4:\"enum\";a:3:{i:0;s:4:\"INFO\";i:1;s:7:\"WARNING\";i:2;s:5:\"ERROR\";}s:4:\"type\";s:6:\"string\";}s:16:\"logMessageFormat\";O:8:\"stdClass\":2:{s:11:\"description\";s:411:\"Only
  relevant when action is `LOG`. Defines the message to log when\nthe breakpoint hits.
  The message may include parameter placeholders `$0`,\n`$1`, etc. These placeholders
  are replaced with the evaluated value\nof the appropriate expression. Expressions
  not referenced in\n`log_message_format` are not logged.\n\nExample: `Message received,
  id = $0, count = $1` with\n`expressions` = `[ message.id, message.count ]`.\";s:4:\"type\";s:6:\"string\";}s:11:\"stackFrames\";O:8:\"stdClass\":3:{s:11:\"description\";s:98:\"The
  stack at breakpoint time, where stack_frames[0] represents the most\nrecently entered
  function.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/StackFrame\";}s:4:\"type\";s:5:\"array\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:497:\"Breakpoint
  status.\n\nThe status includes an error flag and a human readable message.\nThis
  field is usually unset. The message can be either\ninformational or an error message.
  Regardless, clients should always\ndisplay the text message back to the user.\n\nError
  status indicates complete failure of the breakpoint.\n\nExample (non-final state):
  `Still loading symbols...`\n\nExamples (final state):\n\n*   `Invalid line number`
  referring to location\n*   `Field f not found in class C` referring to condition\";}s:9:\"userEmail\";O:8:\"stdClass\":2:{s:11:\"description\";s:55:\"E-mail
  address of the user that created this breakpoint\";s:4:\"type\";s:6:\"string\";}s:13:\"variableTable\";O:8:\"stdClass\":3:{s:11:\"description\";s:681:\"The
  `variable_table` exists to aid with computation, memory and network\ntraffic optimization.
  \ It enables storing a variable once and reference\nit from multiple variables,
  including variables stored in the\n`variable_table` itself.\nFor example, the same
  `this` object, which may appear at many levels of\nthe stack, can have all of its
  data stored once in this table.  The\nstack frame variables then would hold only
  a reference to it.\n\nThe variable `var_table_index` field is an index into this
  repeated field.\nThe stored objects are nameless and get their name from the referencing\nvariable.
  The effective variable is a merge of the referencing variable\nand the referenced
  variable.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Variable\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:22:\"CloudRepoSourceContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:116:\"A
  CloudRepoSourceContext denotes a particular revision in a cloud\nrepo (a repo hosted
  by the Google Cloud Platform).\";s:10:\"properties\";O:8:\"stdClass\":4:{s:12:\"aliasContext\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/AliasContext\";s:11:\"description\";s:39:\"An
  alias, which may be a branch or tag.\";}s:9:\"aliasName\";O:8:\"stdClass\":2:{s:11:\"description\";s:41:\"The
  name of an alias (branch, tag, etc.).\";s:4:\"type\";s:6:\"string\";}s:6:\"repoId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/RepoId\";s:11:\"description\";s:19:\"The
  ID of the repo.\";}s:10:\"revisionId\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"A
  revision ID.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:16:\"CloudWorkspaceId\";O:8:\"stdClass\":3:{s:11:\"description\";s:178:\"A
  CloudWorkspaceId is a unique identifier for a cloud workspace.\nA cloud workspace
  is a place associated with a repo where modified files\ncan be stored before they
  are committed.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:132:\"The
  unique name of the workspace within the repo.  This is the name\nchosen by the client
  in the Source API's CreateWorkspace method.\";s:4:\"type\";s:6:\"string\";}s:6:\"repoId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/RepoId\";s:11:\"description\";s:44:\"The
  ID of the repo containing the workspace.\";}}s:4:\"type\";s:6:\"object\";}s:27:\"CloudWorkspaceSourceContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:75:\"A
  CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"snapshotId\";O:8:\"stdClass\":2:{s:11:\"description\";s:80:\"The
  ID of the snapshot.\nAn empty snapshot_id refers to the most recent snapshot.\";s:4:\"type\";s:6:\"string\";}s:11:\"workspaceId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/CloudWorkspaceId\";s:11:\"description\";s:24:\"The
  ID of the workspace.\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Debuggee\";O:8:\"stdClass\":3:{s:11:\"description\";s:350:\"Represents
  the debugged application. The application may include one or more\nreplicated processes
  executing the same code. Each of these processes is\nattached with a debugger agent,
  carrying out the debugging commands.\nAgents attached to the same debuggee identify
  themselves as such by using\nexactly the same Debuggee message value when registering.\";s:10:\"properties\";O:8:\"stdClass\":11:{s:12:\"agentVersion\";O:8:\"stdClass\":2:{s:11:\"description\";s:114:\"Version
  ID of the agent.\nSchema: `domain/language-platform/vmajor.minor` (for example\n`google.com/java-gcp/v1.1`).\";s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:141:\"Human
  readable description of the debuggee.\nIncluding a human-readable project name,
  environment name and version\ninformation is recommended.\";s:4:\"type\";s:6:\"string\";}s:17:\"extSourceContexts\";O:8:\"stdClass\":3:{s:11:\"description\";s:94:\"References
  to the locations and revisions of the source code used in the\ndeployed application.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:35:\"#/definitions/ExtendedSourceContext\";}s:4:\"type\";s:5:\"array\";}s:2:\"id\";O:8:\"stdClass\":2:{s:11:\"description\";s:71:\"Unique
  identifier for the debuggee generated by the controller service.\";s:4:\"type\";s:6:\"string\";}s:10:\"isDisabled\";O:8:\"stdClass\":2:{s:11:\"description\";s:94:\"If
  set to `true`, indicates that the agent should disable itself and\ndetach from the
  debuggee.\";s:4:\"type\";s:7:\"boolean\";}s:10:\"isInactive\";O:8:\"stdClass\":2:{s:11:\"description\";s:146:\"If
  set to `true`, indicates that Controller service does not detect any\nactivity from
  the debuggee agents and the application is possibly stopped.\";s:4:\"type\";s:7:\"boolean\";}s:6:\"labels\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:89:\"A
  set of custom debuggee properties, populated by the agent, to be\ndisplayed to the
  user.\";s:4:\"type\";s:6:\"object\";}s:7:\"project\";O:8:\"stdClass\":2:{s:11:\"description\";s:115:\"Project
  the debuggee is associated with.\nUse project number or id when registering a Google
  Cloud Platform project.\";s:4:\"type\";s:6:\"string\";}s:14:\"sourceContexts\";O:8:\"stdClass\":3:{s:11:\"description\";s:94:\"References
  to the locations and revisions of the source code used in the\ndeployed application.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/SourceContext\";}s:4:\"type\";s:5:\"array\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:174:\"Human
  readable message to be displayed to the user about this debuggee.\nAbsence of this
  field indicates no status. The message can be either\ninformational or an error
  status.\";}s:10:\"uniquifier\";O:8:\"stdClass\":2:{s:11:\"description\";s:403:\"Uniquifier
  to further distiguish the application.\nIt is possible that different applications
  might have identical values in\nthe debuggee message, thus, incorrectly identified
  as a single application\nby the Controller service. This field adds salt to further
  distiguish the\napplication. Agents should consider seeding this field with value
  that\nidentifies the code, binary, configuration and environment.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Empty\";O:8:\"stdClass\":3:{s:11:\"description\";s:359:\"A
  generic empty message that you can re-use to avoid defining duplicated\nempty messages
  in your APIs. A typical example is to use it as the request\nor the response type
  of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty)
  returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is
  empty JSON object `{}`.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:21:\"ExtendedSourceContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:100:\"An
  ExtendedSourceContext is a SourceContext combined with additional\ndetails describing
  the context.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"context\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/SourceContext\";s:11:\"description\";s:19:\"Any
  source context.\";}s:6:\"labels\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:34:\"Labels
  with user defined metadata.\";s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:13:\"FormatMessage\";O:8:\"stdClass\":3:{s:11:\"description\";s:37:\"Represents
  a message with parameters.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"format\";O:8:\"stdClass\":2:{s:11:\"description\";s:320:\"Format
  template for the message. The `format` uses placeholders `$0`,\n`$1`, etc. to reference
  parameters. `$$` can be used to denote the `$`\ncharacter.\n\nExamples:\n\n*   `Failed
  to load '$0' which helps debug $1 the first time it\n    is loaded.  Again, $0 is
  very important.`\n*   `Please pay $$10 to use $0 instead of $1.`\";s:4:\"type\";s:6:\"string\";}s:10:\"parameters\";O:8:\"stdClass\":3:{s:11:\"description\";s:52:\"Optional
  parameters to be embedded into the message.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:19:\"GerritSourceContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:46:\"A
  SourceContext referring to a Gerrit project.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:12:\"aliasContext\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/AliasContext\";s:11:\"description\";s:39:\"An
  alias, which may be a branch or tag.\";}s:9:\"aliasName\";O:8:\"stdClass\":2:{s:11:\"description\";s:41:\"The
  name of an alias (branch, tag, etc.).\";s:4:\"type\";s:6:\"string\";}s:13:\"gerritProject\";O:8:\"stdClass\":2:{s:11:\"description\";s:147:\"The
  full project name within the host. Projects may be nested, so\n\"project/subproject\"
  is a valid project name.\nThe \"repo name\" is hostURI/project.\";s:4:\"type\";s:6:\"string\";}s:7:\"hostUri\";O:8:\"stdClass\":2:{s:11:\"description\";s:37:\"The
  URI of a running Gerrit instance.\";s:4:\"type\";s:6:\"string\";}s:10:\"revisionId\";O:8:\"stdClass\":2:{s:11:\"description\";s:23:\"A
  revision (commit) ID.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"GetBreakpointResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:44:\"Response
  for getting breakpoint information.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"breakpoint\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Breakpoint\";s:11:\"description\";s:83:\"Complete
  breakpoint state.\nThe fields `id` and `location` are guaranteed to be set.\";}}s:4:\"type\";s:6:\"object\";}s:16:\"GitSourceContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:95:\"A
  GitSourceContext denotes a particular revision in a third party Git\nrepository
  (e.g. GitHub).\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"revisionId\";O:8:\"stdClass\":2:{s:11:\"description\";s:26:\"Git
  commit hash.\nrequired.\";s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"Git
  repository URL.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:29:\"ListActiveBreakpointsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Response
  for listing active breakpoints.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"breakpoints\";O:8:\"stdClass\":3:{s:11:\"description\";s:107:\"List
  of all active breakpoints.\nThe fields `id` and `location` are guaranteed to be
  set on each breakpoint.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/Breakpoint\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextWaitToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:96:\"A
  token that can be used in the next method call to block until\nthe list of breakpoints
  changes.\";s:4:\"type\";s:6:\"string\";}s:11:\"waitExpired\";O:8:\"stdClass\":2:{s:11:\"description\";s:192:\"If
  set to `true`, indicates that there is no change to the\nlist of active breakpoints
  and the server-selected timeout has expired.\nThe `breakpoints` field would be empty
  and should be ignored.\";s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:23:\"ListBreakpointsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:33:\"Response
  for listing breakpoints.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"breakpoints\";O:8:\"stdClass\":3:{s:11:\"description\";s:247:\"List
  of breakpoints matching the request.\nThe fields `id` and `location` are guaranteed
  to be set on each breakpoint.\nThe fields: `stack_frames`, `evaluated_expressions`
  and `variable_table`\nare cleared on each breakpoint regardless of its status.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/Breakpoint\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextWaitToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:142:\"A
  wait token that can be used in the next call to `list` (REST) or\n`ListBreakpoints`
  (RPC) to block until the list of breakpoints has changes.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"ListDebuggeesResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"Response
  for listing debuggees.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"debuggees\";O:8:\"stdClass\":3:{s:11:\"description\";s:218:\"List
  of debuggees accessible to the calling user.\nThe fields `debuggee.id` and `description`
  are guaranteed to be set.\nThe `description` field is a human readable field provided
  by agents and\ncan be displayed to users.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Debuggee\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:13:\"ProjectRepoId\";O:8:\"stdClass\":3:{s:11:\"description\";s:115:\"Selects
  a repo using a Google Cloud Platform project ID\n(e.g. winged-cargo-31) and a repo
  name within that project.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"projectId\";O:8:\"stdClass\":2:{s:11:\"description\";s:22:\"The
  ID of the project.\";s:4:\"type\";s:6:\"string\";}s:8:\"repoName\";O:8:\"stdClass\":2:{s:11:\"description\";s:55:\"The
  name of the repo. Leave empty for the default repo.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:23:\"RegisterDebuggeeRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"Request
  to register a debuggee.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"debuggee\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Debuggee\";s:11:\"description\";s:132:\"Debuggee
  information to register.\nThe fields `project`, `uniquifier`, `description` and
  `agent_version`\nof the debuggee must be set.\";}}s:4:\"type\";s:6:\"object\";}s:24:\"RegisterDebuggeeResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:36:\"Response
  for registering a debuggee.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"debuggee\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Debuggee\";s:11:\"description\";s:304:\"Debuggee
  resource.\nThe field `id` is guranteed to be set (in addition to the echoed fields).\nIf
  the field `is_disabled` is set to `true`, the agent should disable\nitself by removing
  all breakpoints and detaching from the application.\nIt should however continue
  to poll `RegisterDebuggee` until reenabled.\";}}s:4:\"type\";s:6:\"object\";}s:6:\"RepoId\";O:8:\"stdClass\":3:{s:11:\"description\";s:37:\"A
  unique identifier for a cloud repo.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:13:\"projectRepoId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/ProjectRepoId\";s:11:\"description\";s:46:\"A
  combination of a project ID and a repo name.\";}s:3:\"uid\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"A
  server-assigned, globally unique identifier.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"SetBreakpointResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:34:\"Response
  for setting a breakpoint.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"breakpoint\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Breakpoint\";s:11:\"description\";s:95:\"Breakpoint
  resource.\nThe field `id` is guaranteed to be set (in addition to the echoed fileds).\";}}s:4:\"type\";s:6:\"object\";}s:13:\"SourceContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:145:\"A
  SourceContext is a reference to a tree of files. A SourceContext together\nwith
  a path point to a unique revision of a single file or directory.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"cloudRepo\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:36:\"#/definitions/CloudRepoSourceContext\";s:11:\"description\";s:56:\"A
  SourceContext referring to a revision in a cloud repo.\";}s:14:\"cloudWorkspace\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:41:\"#/definitions/CloudWorkspaceSourceContext\";s:11:\"description\";s:61:\"A
  SourceContext referring to a snapshot in a cloud workspace.\";}s:6:\"gerrit\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/GerritSourceContext\";s:11:\"description\";s:46:\"A
  SourceContext referring to a Gerrit project.\";}s:3:\"git\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/GitSourceContext\";s:11:\"description\";s:68:\"A
  SourceContext referring to any third party Git repo (e.g. GitHub).\";}}s:4:\"type\";s:6:\"object\";}s:14:\"SourceLocation\";O:8:\"stdClass\":3:{s:11:\"description\";s:41:\"Represents
  a location in the source code.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"line\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"Line
  inside the file. The first line in the file has the value `1`.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"path\";O:8:\"stdClass\":2:{s:11:\"description\";s:71:\"Path
  to the source file within the source context of the target binary.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:10:\"StackFrame\";O:8:\"stdClass\":3:{s:11:\"description\";s:33:\"Represents
  a stack frame context.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"arguments\";O:8:\"stdClass\":3:{s:11:\"description\";s:101:\"Set
  of arguments passed to this function.\nNote that this might not be populated for
  all stack frames.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Variable\";}s:4:\"type\";s:5:\"array\";}s:8:\"function\";O:8:\"stdClass\":2:{s:11:\"description\";s:41:\"Demangled
  function name at the call site.\";s:4:\"type\";s:6:\"string\";}s:6:\"locals\";O:8:\"stdClass\":3:{s:11:\"description\";s:111:\"Set
  of local variables at the stack frame location.\nNote that this might not be populated
  for all stack frames.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Variable\";}s:4:\"type\";s:5:\"array\";}s:8:\"location\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/SourceLocation\";s:11:\"description\";s:33:\"Source
  location of the call site.\";}}s:4:\"type\";s:6:\"object\";}s:13:\"StatusMessage\";O:8:\"stdClass\":3:{s:11:\"description\";s:302:\"Represents
  a contextual status message.\nThe message can indicate an error or informational
  status, and refer to\nspecific parts of the containing object.\nFor example, the
  `Breakpoint.status` field can indicate an error referring\nto the `BREAKPOINT_SOURCE_LOCATION`
  with the message `Location not found`.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/FormatMessage\";s:11:\"description\";s:20:\"Status
  message text.\";}s:7:\"isError\";O:8:\"stdClass\":2:{s:11:\"description\";s:49:\"Distinguishes
  errors from informational messages.\";s:4:\"type\";s:7:\"boolean\";}s:8:\"refersTo\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"Reference
  to which the message applies.\";s:4:\"enum\";a:7:{i:0;s:11:\"UNSPECIFIED\";i:1;s:26:\"BREAKPOINT_SOURCE_LOCATION\";i:2;s:20:\"BREAKPOINT_CONDITION\";i:3;s:21:\"BREAKPOINT_EXPRESSION\";i:4;s:14:\"BREAKPOINT_AGE\";i:5;s:13:\"VARIABLE_NAME\";i:6;s:14:\"VARIABLE_VALUE\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:29:\"UpdateActiveBreakpointRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"Request
  to update an active breakpoint.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"breakpoint\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/Breakpoint\";s:11:\"description\";s:130:\"Updated
  breakpoint information.\nThe field `id` must be set.\nThe agent must echo all Breakpoint
  specification fields in the update.\";}}s:4:\"type\";s:6:\"object\";}s:30:\"UpdateActiveBreakpointResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:94:\"Response
  for updating an active breakpoint.\nThe message is defined to allow future extensions.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:8:\"Variable\";O:8:\"stdClass\":3:{s:11:\"description\";s:3004:\"Represents
  a variable or an argument possibly of a compound object type.\nNote how the following
  variables are represented:\n\n1) A simple variable:\n\n    int x = 5\n\n    { name:
  \"x\", value: \"5\", type: \"int\" }  // Captured variable\n\n2) A compound object:\n\n
  \   struct T {\n        int m1;\n        int m2;\n    };\n    T x = { 3, 7 };\n\n
  \   {  // Captured variable\n        name: \"x\",\n        type: \"T\",\n        members
  { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\",
  value: \"7\", type: \"int\" }\n    }\n\n3) A pointer where the pointee was captured:\n\n
  \   T x = { 3, 7 };\n    T* p = &x;\n\n    {   // Captured variable\n        name:
  \"p\",\n        type: \"T*\",\n        value: \"0x00500500\",\n        members {
  name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value:
  \"7\", type: \"int\" }\n    }\n\n4) A pointer where the pointee was not captured:\n\n
  \   T* p = new T;\n\n    {   // Captured variable\n        name: \"p\",\n        type:
  \"T*\",\n        value: \"0x00400400\"\n        status { is_error: true, description
  { format: \"unavailable\" } }\n    }\n\nThe status should describe the reason for
  the missing value,\nsuch as `<optimized out>`, `<inaccessible>`, `<pointers limit
  reached>`.\n\nNote that a null pointer should not have members.\n\n5) An unnamed
  value:\n\n    int* p = new int(7);\n\n    {   // Captured variable\n        name:
  \"p\",\n        value: \"0x00500500\",\n        type: \"int*\",\n        members
  { value: \"7\", type: \"int\" } }\n\n6) An unnamed pointer where the pointee was
  not captured:\n\n    int* p = new int(7);\n    int** pp = &p;\n\n    {  // Captured
  variable\n        name: \"pp\",\n        value: \"0x00500500\",\n        type: \"int**\",\n
  \       members {\n            value: \"0x00400400\",\n            type: \"int*\"\n
  \           status {\n                is_error: true,\n                description:
  { format: \"unavailable\" } }\n            }\n        }\n    }\n\nTo optimize computation,
  memory and network traffic, variables that\nrepeat in the output multiple times
  can be stored once in a shared\nvariable table and be referenced using the `var_table_index`
  field.  The\nvariables stored in the shared table are nameless and are essentially\na
  partition of the complete variable. To reconstruct the complete\nvariable, merge
  the referencing variable with the referenced variable.\n\nWhen using the shared
  variable table, the following variables:\n\n    T x = { 3, 7 };\n    T* p = &x;\n
  \   T& r = x;\n\n    { name: \"x\", var_table_index: 3, type: \"T\" }  // Captured
  variables\n    { name: \"p\", value \"0x00500500\", type=\"T*\", var_table_index:
  3 }\n    { name: \"r\", type=\"T&\", var_table_index: 3 }\n\n    {  // Shared variable
  table entry #3:\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n
  \       members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\nNote that
  the pointer address is stored with the referencing variable\nand not with the referenced
  variable. This allows the referenced variable\nto be shared between pointers and
  references.\n\nThe type field is optional. The debugger agent may or may not support
  it.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:7:\"members\";O:8:\"stdClass\":3:{s:11:\"description\";s:48:\"Members
  contained or pointed to by the variable.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Variable\";}s:4:\"type\";s:5:\"array\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:29:\"Name
  of the variable, if any.\";s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/StatusMessage\";s:11:\"description\";s:754:\"Status
  associated with the variable. This field will usually stay\nunset. A status of a
  single variable only applies to that variable or\nexpression. The rest of breakpoint
  data still remains valid. Variables\nmight be reported in error state even when
  breakpoint is not in final\nstate.\n\nThe message may refer to variable name with
  `refers_to` set to\n`VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.\nIn
  either case variable value and members will be unset.\n\nExample of error message
  applied to name: `Invalid expression syntax`.\n\nExample of information message
  applied to value: `Not captured`.\n\nExamples of error message applied to value:\n\n*
  \  `Malformed string`,\n*   `Field f not found in class C`\n*   `Null pointer dereference`\";}s:4:\"type\";O:8:\"stdClass\":2:{s:11:\"description\";s:243:\"Variable
  type (e.g. `MyClass`). If the variable is split with\n`var_table_index`, `type`
  goes next to `value`. The interpretation of\na type is agent specific. It is recommended
  to include the dynamic type\nrather than a static type of an object.\";s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":2:{s:11:\"description\";s:29:\"Simple
  value of the variable.\";s:4:\"type\";s:6:\"string\";}s:13:\"varTableIndex\";O:8:\"stdClass\":3:{s:11:\"description\";s:199:\"Reference
  to a variable in the shared variable table. More than\none variable can reference
  the same variable in the table. The\n`var_table_index` field is an index into `variable_table`
  in Breakpoint.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}}"
...
