---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":15:{s:7:\"contact\";O:8:\"stdClass\":4:{s:5:\"email\";s:23:\"mike.ralphson@gmail.com\";s:4:\"name\";s:13:\"Mike
  Ralphson\";s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:9:\"x-twitter\";s:12:\"PermittedSoc\";}s:11:\"description\";s:799:\"Amazon
  Lex provides both build and runtime endpoints. Each endpoint provides a set of operations
  (API). Your conversational bot uses the runtime API to understand user utterances
  (user input text or voice). For example, suppose a user says \"I want pizza\", your
  bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes
  that the user request is for the OrderPizza intent (one of the intents defined in
  the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit
  required information (slot values, such as pizza size and crust type), and then
  performs fulfillment activity (that you configured when you created the bot). You
  use the build-time API to create and manage your Amazon Lex bot. For a list of build-time
  operations, see the build-time API, . \";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:18:\"Apache
  2.0 License\";s:3:\"url\";s:31:\"http://www.apache.org/licenses/\";}s:14:\"termsOfService\";s:37:\"https://aws.amazon.com/service-terms/\";s:5:\"title\";s:26:\"Amazon
  Lex Runtime Service\";s:7:\"version\";s:10:\"2016-11-28\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:79:\"https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\";}s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"cloud\";}s:6:\"x-logo\";O:8:\"stdClass\":2:{s:15:\"backgroundColor\";s:7:\"#FFFFFF\";s:3:\"url\";s:81:\"https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:11:\"contentType\";s:16:\"application/json\";s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:7:\"version\";s:5:\"1.0.0\";}s:3:\"url\";s:95:\"https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex-2016-11-28.normal.json\";s:17:\"x-apisguru-direct\";b:1;}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:13:\"amazonaws.com\";s:9:\"x-release\";s:2:\"v4\";s:13:\"x-serviceName\";s:11:\"runtime.lex\";s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:21:\"amazonaws_runtime_lex\";s:4:\"type\";s:7:\"openapi\";}}"
host: runtime.lex.amazonaws.com
basePath: /
paths: ~
produces:
- application/json
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":39:{s:6:\"Accept\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"AttributesString\";O:8:\"stdClass\":2:{s:6:\"format\";s:8:\"password\";s:4:\"type\";s:6:\"string\";}s:19:\"BadGatewayException\";O:8:\"stdClass\":3:{s:11:\"description\";s:143:\"Either
  the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly,
  AWS Lambda) failed with an internal service error.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:19:\"BadRequestException\";O:8:\"stdClass\":3:{s:11:\"description\";s:147:\"
  Request validation failed, there is no usable message in the context, or the bot
  build failed, is still in progress, or contains unbuilt changes. \";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:10:\"BlobStream\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"BotAlias\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"BotName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"Button\";O:8:\"stdClass\":4:{s:11:\"description\";s:79:\"Represents
  an option to be shown on the client platform (Facebook, Slack, etc.)\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"text\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:40:\"#/definitions/ButtonTextStringWithLength\";s:11:\"description\";s:47:\"Text
  that is visible to the user on the button.\";}s:5:\"value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:41:\"#/definitions/ButtonValueStringWithLength\";s:11:\"description\";s:174:\"The
  value sent to Amazon Lex when a user chooses the button. For example, consider button
  text \"NYC.\" When the user chooses the button, the value sent can be \"New York
  City.\"\";}}s:8:\"required\";a:2:{i:0;s:4:\"text\";i:1;s:5:\"value\";}s:4:\"type\";s:6:\"object\";}s:26:\"ButtonTextStringWithLength\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:15;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:27:\"ButtonValueStringWithLength\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:1000;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:17:\"ConflictException\";O:8:\"stdClass\":3:{s:11:\"description\";s:74:\"
  Two clients are using the same AWS account, Amazon Lex bot, and user ID. \";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:11:\"ContentType\";O:8:\"stdClass\":2:{s:4:\"enum\";a:1:{i:0;s:38:\"application/vnd.amazonaws.card.generic\";}s:4:\"type\";s:6:\"string\";}s:25:\"DependencyFailedException\";O:8:\"stdClass\":3:{s:11:\"description\";s:420:\"<p>
  One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
  For example, </p> <ul> <li> <p>If Amazon Lex does not have sufficient permissions
  to call a Lambda function.</p> </li> <li> <p>If a Lambda function takes longer than
  30 seconds to execute.</p> </li> <li> <p>If a fulfillment Lambda function returns
  a <code>Delegate</code> dialog action without removing any slot values.</p> </li>
  </ul>\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:11:\"DialogState\";O:8:\"stdClass\":2:{s:4:\"enum\";a:6:{i:0;s:12:\"ElicitIntent\";i:1;s:13:\"ConfirmIntent\";i:2;s:10:\"ElicitSlot\";i:3;s:9:\"Fulfilled\";i:4;s:19:\"ReadyForFulfillment\";i:5;s:6:\"Failed\";}s:4:\"type\";s:6:\"string\";}s:12:\"ErrorMessage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"GenericAttachment\";O:8:\"stdClass\":3:{s:11:\"description\";s:115:\"Represents
  an option rendered to the user when a prompt is shown. It could be an image, a button,
  a link, or text. \";s:10:\"properties\";O:8:\"stdClass\":5:{s:17:\"attachmentLinkUrl\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StringUrlWithLength\";s:11:\"description\";s:46:\"The
  URL of an attachment to the response card.\";}s:7:\"buttons\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/listOfButtons\";s:11:\"description\";s:40:\"The
  list of options to show to the user.\";}s:8:\"imageUrl\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/StringUrlWithLength\";s:11:\"description\";s:50:\"The
  URL of an image that is displayed to the user.\";}s:8:\"subTitle\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/StringWithLength\";s:11:\"description\";s:35:\"The
  subtitle shown below the title.\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/StringWithLength\";s:11:\"description\";s:24:\"The
  title of the option.\";}}s:4:\"type\";s:6:\"object\";}s:15:\"HttpContentType\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"IntentName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"InternalFailureException\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"Internal
  service error. Retry the call.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:22:\"LimitExceededException\";O:8:\"stdClass\":3:{s:11:\"description\";s:17:\"Exceeded
  a limit.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:21:\"LoopDetectedException\";O:8:\"stdClass\":3:{s:11:\"description\";s:27:\"This
  exception is not used.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:17:\"MessageFormatType\";O:8:\"stdClass\":2:{s:4:\"enum\";a:4:{i:0;s:9:\"PlainText\";i:1;s:13:\"CustomPayload\";i:2;s:4:\"SSML\";i:3;s:9:\"Composite\";}s:4:\"type\";s:6:\"string\";}s:22:\"NotAcceptableException\";O:8:\"stdClass\":3:{s:11:\"description\";s:61:\"The
  accept header in the request does not have a valid value.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:17:\"NotFoundException\";O:8:\"stdClass\":3:{s:11:\"description\";s:87:\"The
  resource (such as the Amazon Lex bot or an alias) that is referred to is not found.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:18:\"PostContentRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"inputStream\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/BlobStream\";s:11:\"description\";s:357:\"<p>
  User input in PCM or Opus audio format or text format as described in the <code>Content-Type</code>
  HTTP header. </p> <p>You can stream audio data to Amazon Lex or you can create a
  local buffer that captures all of the audio data before sending. In general, you
  get better performance if you stream audio data rather than buffering the data locally.</p>\";}}s:8:\"required\";a:1:{i:0;s:11:\"inputStream\";}s:4:\"type\";s:6:\"object\";}s:19:\"PostContentResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"audioStream\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/BlobStream\";s:11:\"description\";s:533:\"The
  prompt (or statement) to convey to the user. This is based on the bot configuration
  and context. For example, if Amazon Lex did not understand the user intent, it sends
  the <code>clarificationPrompt</code> configured for the bot. If the intent requires
  confirmation before taking the fulfillment action, it sends the <code>confirmationPrompt</code>.
  Another example: Suppose that the Lambda function successfully fulfilled the intent,
  and sent a message to convey to the user. Then Amazon Lex sends that message in
  the response. \";}}s:4:\"type\";s:6:\"object\";}s:15:\"PostTextRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"inputText\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Text\";s:11:\"description\";s:65:\"The
  text that the user entered (Amazon Lex interprets this text).\";}s:17:\"requestAttributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/StringMap\";s:11:\"description\";s:408:\"<p>Request-specific
  information passed between Amazon Lex and a client application.</p> <p>The namespace
  <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request
  attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information,
  see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting
  Request Attributes</a>.</p>\";}s:17:\"sessionAttributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/StringMap\";s:11:\"description\";s:254:\"<p>Application-specific
  information passed between Amazon Lex and a client application.</p> <p>For more
  information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting
  Session Attributes</a>.</p>\";}}s:8:\"required\";a:1:{i:0;s:9:\"inputText\";}s:4:\"type\";s:6:\"object\";}s:16:\"PostTextResponse\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":8:{s:11:\"dialogState\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/DialogState\";s:11:\"description\";s:2079:\"<p>
  Identifies the current state of the user interaction. Amazon Lex returns one of
  the following values as <code>dialogState</code>. The client can optionally use
  this information to customize the user interface. </p> <ul> <li> <p> <code>ElicitIntent</code>
  - Amazon Lex wants to elicit user intent. </p> <p>For example, a user might utter
  an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer the user intent
  from this utterance, it will return this dialogState.</p> </li> <li> <p> <code>ConfirmIntent</code>
  - Amazon Lex is expecting a \"yes\" or \"no\" response. </p> <p> For example, Amazon
  Lex wants user confirmation before fulfilling an intent. </p> <p>Instead of a simple
  \"yes\" or \"no,\" a user might respond with additional information. For example,
  \"yes, but make it thick crust pizza\" or \"no, I want to order a drink\". Amazon
  Lex can process such additional information (in these examples, update the crust
  type slot value, or change intent from OrderPizza to OrderDrink).</p> </li> <li>
  <p> <code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the current
  intent. </p> <p>For example, suppose that in the response Amazon Lex sends this
  message: \"What size pizza would you like?\". A user might reply with the slot value
  (e.g., \"medium\"). The user might also provide additional information in the response
  (e.g., \"medium thick crust pizza\"). Amazon Lex can process such additional information
  appropriately. </p> </li> <li> <p> <code>Fulfilled</code> - Conveys that the Lambda
  function configured for the intent has successfully fulfilled the intent. </p> </li>
  <li> <p> <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
  the intent. </p> </li> <li> <p> <code>Failed</code> - Conveys that the conversation
  with the user failed. </p> <p> This can happen for various reasons including that
  the user did not provide an appropriate response to prompts from the service (you
  can configure how many times Amazon Lex can prompt a user for specific information),
  or the Lambda function failed to fulfill the intent. </p> </li> </ul>\";}s:10:\"intentName\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/IntentName\";s:11:\"description\";s:52:\"The
  current user intent that Amazon Lex is aware of.\";}s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Text\";s:11:\"description\";s:989:\"<p>The
  message to convey to the user. The message can come from the bot's configuration
  or from a Lambda function.</p> <p>If the intent is not configured with a Lambda
  function, or if the Lambda function returned <code>Delegate</code> as the <code>dialogAction.type</code>
  its response, Amazon Lex decides on the next course of action and selects an appropriate
  message from the bot's configuration based on the current interaction context. For
  example, if Amazon Lex isn't able to understand user input, it uses a clarification
  prompt message.</p> <p>When you create an intent you can assign messages to groups.
  When messages are assigned to groups Amazon Lex returns one message from each group
  in the response. The message field is an escaped JSON string containing the messages.
  For more information about the structure of the JSON string returned, see <a>msg-prompts-formats</a>.</p>
  <p>If the Lambda function returns a message, Amazon Lex passes it to the client
  in its response.</p>\";}s:13:\"messageFormat\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/MessageFormatType\";s:11:\"description\";s:565:\"<p>The
  format of the response message. One of the following values:</p> <ul> <li> <p> <code>PlainText</code>
  - The message contains plain UTF-8 text.</p> </li> <li> <p> <code>CustomPayload</code>
  - The message is a custom format defined by the Lambda function.</p> </li> <li>
  <p> <code>SSML</code> - The message contains text formatted for voice output.</p>
  </li> <li> <p> <code>Composite</code> - The message contains an escaped JSON object
  containing one or more messages from the groups that messages were assigned to when
  the intent was created.</p> </li> </ul>\";}s:12:\"responseCard\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/ResponseCard\";s:11:\"description\";s:235:\"Represents
  the options that the user has to respond to the current prompt. Response Card can
  come from the bot configuration (in the Amazon Lex console, choose the settings
  button next to a slot) or from a code hook (Lambda function). \";}s:17:\"sessionAttributes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/StringMap\";s:11:\"description\";s:79:\"A
  map of key-value pairs representing the session-specific context information.\";}s:12:\"slotToElicit\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:138:\"If
  the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name
  of the slot for which Amazon Lex is eliciting a value. \";}s:5:\"slots\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/StringMap\";s:11:\"description\";s:759:\"<p>
  The intent slots that Amazon Lex detected from the user input in the conversation.
  </p> <p>Amazon Lex creates a resolution list containing likely values for a slot.
  The value that it returns is determined by the <code>valueSelectionStrategy</code>
  selected when the slot type was created or updated. If <code>valueSelectionStrategy</code>
  is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
  if the user value is similar to the slot values. If <code>valueSelectionStrategy</code>
  is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the
  resolution list or, if there is no resolution list, null. If you don't specify a
  <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>\";}}s:4:\"type\";s:6:\"object\";}s:23:\"RequestTimeoutException\";O:8:\"stdClass\":3:{s:11:\"description\";s:29:\"The
  input speech is too long.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:12:\"ResponseCard\";O:8:\"stdClass\":3:{s:11:\"description\";s:297:\"If
  you configure a response card when creating your bots, Amazon Lex substitutes the
  session attributes and slot values that are available, and then returns it. The
  response card can also come from a Lambda function ( <code>dialogCodeHook</code>
  and <code>fulfillmentActivity</code> on an intent).\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"contentType\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ContentType\";s:11:\"description\";s:33:\"The
  content type of the response.\";}s:18:\"genericAttachments\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/genericAttachmentList\";s:11:\"description\";s:52:\"An
  array of attachment objects representing options.\";}s:7:\"version\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:40:\"The
  version of the response card format.\";}}s:4:\"type\";s:6:\"object\";}s:6:\"String\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"StringMap\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"key\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:19:\"StringUrlWithLength\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:2048;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:16:\"StringWithLength\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:80;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:4:\"Text\";O:8:\"stdClass\":4:{s:6:\"format\";s:8:\"password\";s:9:\"maxLength\";i:1024;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:29:\"UnsupportedMediaTypeException\";O:8:\"stdClass\":3:{s:11:\"description\";s:77:\"The
  Content-Type header (<code>PostContent</code> API) has an invalid value. \";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/String\";}}s:4:\"type\";s:6:\"object\";}s:6:\"UserId\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:100;s:9:\"minLength\";i:2;s:7:\"pattern\";s:16:\"[0-9a-zA-Z._:-]+\";s:4:\"type\";s:6:\"string\";}s:21:\"genericAttachmentList\";O:8:\"stdClass\":4:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/GenericAttachment\";}s:8:\"maxItems\";i:10;s:8:\"minItems\";i:0;s:4:\"type\";s:5:\"array\";}s:13:\"listOfButtons\";O:8:\"stdClass\":4:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Button\";}s:8:\"maxItems\";i:5;s:8:\"minItems\";i:0;s:4:\"type\";s:5:\"array\";}}"
...
