swagger: "2.0"
x-collection-name: Predix
x-complete: 1
info:
  title: Data Services
  version: 1.0.0
host: time-series-service-doc.grc-apps.svc.ice.ge.com
basePath: /
schemes:
- http
produces:
- application/json
consumes:
- application/json
paths:
  /v1/aggregations:
    get:
      summary: Get all available aggregations
      description: |-
        Return all supported aggregations.Response JSON (Status 200){
          "results": [
            {
              "name": "max",
              "type": "Maximum",
              "description": "Returns the maximum value data point for the time range"
            },
            {
              "name": "trendmode",
              "type": "Trend Mode",
              "description": "Returns the maximum and minimum value data point for the time range"
            },
            {
              "name": "count",
              "type": "Count",
              "description": "Returns the number of data points"
            },
            {
              "name": "scale",
              "type": "Scale",
              "description": "Scales each data point by a factor"
            },
            {
              "name": "interpolate",
              "type": "Interpolate",
              "description": "Does linear interpolation for the chosen window"
            },
            {
              "name": "sum",
              "type": "Sum",
              "description": "Adds the data points together"
            },
            {
              "name": "diff",
              "type": "Difference",
              "description": "Returns the difference between successive data points"
            },
            {
              "name": "gaps",
              "type": "Gaps",
              "description": "Marks gaps in data according to sampling rate with a null data point"
            },
            {
              "name": "sampler",
              "type": "Sampler",
              "description": "Returns the sampling rate of change for the data points"
            },
            {
              "name": "div",
              "type": "Divide",
              "description": "Divides each data point by a divisor"
            },
            {
              "name": "min",
              "type": "Minimum",
              "description": "Returns the minimum value data point for the time range"
            },
            {
              "name": "avg",
              "type": "Average",
              "description": "Returns the average of the data point set"
            },
            {
              "name": "least_squares",
              "type": "Least Squares",
              "description": "Returns a best fit line through the data points using the least squares algorithm"
            },
            {
              "name": "percentile",
              "type": "Percentile",
              "description": "Returns the percentile of the data range"
            },
            {
              "name": "dev",
              "type": "Standard Deviation",
              "description": "Returns the standard deviation of the time series"
            },
            {
              "name": "rate",
              "type": "Rate",
              "description": "Returns the rate of change for the data points"
            }
          ]
        }
      operationId: getAggregationNames
      x-api-path-slug: v1aggregations-get
      parameters:
      - in: header
        name: Authorization
      - in: header
        name: Content-Type
      - in: header
        name: Predix-Zone-Id
      responses:
        200:
          description: Successful response
      tags:
      - Available
      - Aggregations
  /v1/datapoints:
    get:
      summary: Query Datapoints
      description: "Both the GET and POST methods can be used to query time series
        data. Use the query API with the GET HTTP method by passing the query JSON
        as a URL query parameter. The advantage of using the GET method is that requests
        and responses can be cached in proxy servers and browsers.  In cases where
        the query JSON is very long and exceeds query parameter length (for some browsers),
        use POST as a convenience method to query the time series API. POST requests
        have no restrictions on data length, however, requests are never cached. The
        Time Series service API is designed this way to support complex, nested time
        series queries on one or more tags and their attributes, with start and end
        times, along with aggregations and filters.Response JSON (Status 200)\n{\n\t\"tags\":
        [{\n\t\t\"name\": \"ALT_SENSOR\",\n\t\t\"results\": [{\n\t\t\t\"filters\":
        {\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"test\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"measurements\":
        {\n\t\t\t\t\t\"condition\": \"le\",\n\t\t\t\t\t\"values\": [\n\t\t\t\t\t\t36\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"qualities\":
        {\n\t\t\t\t\t\"values\": [\n\t\t\t\t\t\t\"3\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"attributes\":
        {\n\t\t\t\t\"host\": [\"test\"]\n\t\t\t},\n\t\t\t\"values\": [\n\t\t\t\t[1449709894000,
        5, 3],\n\t\t\t\t[1449709895000, 7, 3]\n\t\t\t]\n\t\t}],\n\t\t\"stats\": {\n\t\t\t\"rawCount\":
        2\n\t\t}\n\t}]\n}"
      operationId: query
      x-api-path-slug: v1datapoints-get
      parameters:
      - in: header
        name: Authorization
      - in: header
        name: Content-Type
      - in: header
        name: Predix-Zone-Id
      - in: query
        name: query
        description: Valid JSON string
      responses:
        200:
          description: Successful response
      tags:
      - Query
      - Datapoints
    post:
      summary: Query Datapoints
      description: "Both the GET and POST methods can be used to query time series
        data. Use the query API with the GET HTTP method by passing the query JSON
        as a URL query parameter. The advantage of using the GET method is that requests
        and responses can be cached in proxy servers and browsers.  In cases where
        the query JSON is very long and exceeds query parameter length (for some browsers),
        use POST as a convenience method to query the time series API. POST requests
        have no restrictions on data length, however, requests are never cached. The
        Time Series service API is designed this way to support complex, nested time
        series queries on one or more tags and their attributes, with start and end
        times, along with aggregations and filters.  Following is a sample request
        message: Request JSON{\n\t\"start\": \"24h-ago\",\n\t\"end\": \"12h-ago\",\n\t\"tags\":
        [{\n\t\t\"name\": \"ALT_SENSOR\",\n\t\t\"limit\": 1000,\n\t\t\"order\": \"desc\",\n\t\t\"suppressGroupByType\":
        true|false,\n\t\t\"aggregations\": [{\n\t\t\t\"type\": \"avg\",\n\t\t\t\"interval\":
        \"1h\"\n\t\t}],\n\t\t\"filters\": {\n\t\t\t\"attributes\": {\n\t\t\t\t\"host\":
        [\n\t\t\t\t\t\"test\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"measurements\": {\n\t\t\t\t\"condition\":
        \"le\",\n\t\t\t\t\"values\": [\n\t\t\t\t\t\"36\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"qualities\":
        {\n\t\t\t\t\"values\": [\n\t\t\t\t\t\"3\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"groups\":
        [{\n\t\t\t\"name\": \"attribute\",\n\t\t\t\"attributes\": [\n\t\t\t\t\"host\",
        \"subtenant\"\n\t\t\t]\n\t\t}]\n\t}]\n}\nResponse JSON (Status 200){\n\t\"tags\":
        [{\n\t\t\"name\": \"ALT_SENSOR\",\n\t\t\"results\": [{\n\t\t\t\"filters\":
        {\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"test\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"measurements\":
        {\n\t\t\t\t\t\"condition\": \"le\",\n\t\t\t\t\t\"values\": [\n\t\t\t\t\t\t36\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"qualities\":
        {\n\t\t\t\t\t\"values\": [\n\t\t\t\t\t\t\"3\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"attributes\":
        {\n\t\t\t\t\"host\": [\"test\"]\n\t\t\t},\n\t\t\t\"values\": [\n\t\t\t\t[1449709894000,
        5, 3],\n\t\t\t\t[1449709895000, 7, 3]\n\t\t\t]\n\t\t}],\n\t\t\"stats\": {\n\t\t\t\"rawCount\":
        2\n\t\t}\n\t}]\n}"
      operationId: get
      x-api-path-slug: v1datapoints-post
      parameters:
      - in: header
        name: Authorization
      - in: header
        name: Content-Type
      - in: header
        name: Predix-Zone-Id
      - in: body
        name: Query Request JSON
        description: Query Request (JSON)
        schema:
          $ref: '#/definitions/holder'
      responses:
        200:
          description: Successful response
      tags:
      - Query
      - Datapoints
  /v1/datapoints/latest:
    get:
      summary: Query for Current Value
      description: "This API helps to query time series data for the latest values.Response
        JSON (Status 200){\n\t\"tags\": [{\n\t\t\"name\": \"tagName1\",\n\t\t\"results\":
        [{\n\t\t\t\"values\": [\n\t\t\t\t[1449709895000, 7, 3]\n\t\t\t]\n\t\t}],\n\t\t\"stats\":
        {\n\t\t\t\"rawCount\": 1\n\t\t}\n\t}, {\n\t\t\"name\": \"tagName2\",\n\t\t\"results\":
        [{\n\t\t\t\"values\": [\n\t\t\t\t[1449709896000, 8, 3]\n\t\t\t]\n\t\t}],\n\t\t\"stats\":
        {\n\t\t\t\"rawCount\": 1\n\t\t}\n\t}]\n}"
      operationId: queryCurrent
      x-api-path-slug: v1datapointslatest-get
      parameters:
      - in: header
        name: Authorization
      - in: header
        name: Content-Type
      - in: header
        name: Predix-Zone-Id
      - in: query
        name: suppressGroupByType
        description: Flag to suppress the grouping of results by type
      - in: query
        name: tags
        description: 'List of tags Eg: tag1,tag2'
      responses:
        200:
          description: Successful response
      tags:
      - QueryCurrent
      - Value
    post:
      summary: Query for Current Value
      description: "This API helps to query for timeseries for the latest values for
        the given tags. The POST API also provides a way to specify a time window
        or filter options and retrieves the latest value that satisfies it.Request
        JSON{\n\t\"tags\": [{\n\t\t\"name\": \"ALT_SENSOR\",\n\t\t\"suppressGroupByType\":
        true|false,\n\t\t\"filters\": {\n\t\t\t\"attributes\": {\n\t\t\t\t\"host\":
        [\n\t\t\t\t\t\"test\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"measurements\": {\n\t\t\t\t\"condition\":
        \"le\",\n\t\t\t\t\"values\": [\n\t\t\t\t\t\"36\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"qualities\":
        {\n\t\t\t\t\"values\": [\n\t\t\t\t\t\"3\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}]\n}Response
        JSON (Status 200){\n\t\"tags\": [{\n\t\t\"name\": \"ALT_SENSOR\",\n\t\t\"results\":
        [{\n\t\t\t\"filters\": {\n\t\t\t\t\"attributes\": {\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"test\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"measurements\":
        {\n\t\t\t\t\t\"condition\": \"le\",\n\t\t\t\t\t\"values\": [\n\t\t\t\t\t\t36\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"qualities\":
        {\n\t\t\t\t\t\"values\": [\n\t\t\t\t\t\t\"3\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"attributes\":
        {\n\t\t\t\t\"host\": [\"test\"]\n\t\t\t},\n\t\t\t\"values\": [\n\t\t\t\t[1449709895000,
        7, 3]\n\t\t\t]\n\t\t}],\n\t\t\"stats\": {\n\t\t\t\"rawCount\": 1\n\t\t}\n\t}]\n}"
      operationId: queryCurrentPost
      x-api-path-slug: v1datapointslatest-post
      parameters:
      - in: header
        name: Authorization
      - in: header
        name: Content-Type
      - in: header
        name: Predix-Zone-Id
      - in: body
        name: Query Request JSON
        description: Query Request (JSON)
        schema:
          $ref: '#/definitions/holder'
      responses:
        200:
          description: Successful response
      tags:
      - QueryCurrent
      - Value
  /v1/tags:
    get:
      summary: Get all tags
      description: "Return all the ingested tag names.Response JSON (Status 200){\n\t\"results\":
        [\n\t\t\"ALT_SENSOR\",\n\t\t\"tagName1\",\n\t\t\"tagName2\"\n\t]\n}"
      operationId: getMetricNames
      x-api-path-slug: v1tags-get
      parameters:
      - in: header
        name: Authorization
      - in: header
        name: Content-Type
      - in: header
        name: Predix-Zone-Id
      responses:
        200:
          description: Successful response
      tags:
      - Tags