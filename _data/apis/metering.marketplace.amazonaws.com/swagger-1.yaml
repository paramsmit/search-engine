---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":14:{s:7:\"contact\";O:8:\"stdClass\":4:{s:5:\"email\";s:23:\"mike.ralphson@gmail.com\";s:4:\"name\";s:13:\"Mike
  Ralphson\";s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:9:\"x-twitter\";s:12:\"PermittedSoc\";}s:11:\"description\";s:2190:\"<fullname>AWS
  Marketplace Metering Service</fullname> <p>This reference provides descriptions
  of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers
  can use this API to submit usage data for custom usage dimensions.</p> <p> <b>Submitting
  Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i>- Submits the metering
  record for a Marketplace product. MeterUsage is called from an EC2 instance.</p>
  </li> <li> <p> <i>BatchMeterUsage</i>- Submits the metering record for a set of
  customers. BatchMeterUsage is called from a software-as-a-service (SaaS) application.</p>
  </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i>-
  Called by a SaaS application during the registration process. When a buyer visits
  your website during the registration process, the buyer submits a Registration Token
  through the browser. The Registration Token is resolved through this API to obtain
  a CustomerIdentifier and Product Code.</p> </li> </ul> <p> <b>Entitlement and Metering
  for Paid Container Products</b> </p> <ul> <li> <p> Paid container software products
  sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service
  and call the RegisterUsage operation for software entitlement and metering. Calling
  RegisterUsage from containers running outside of Amazon Elastic Container Service
  (Amazon ECR) isn't supported. Free and BYOL products for ECS aren't required to
  call RegisterUsage, but you can do so if you want to receive usage data in your
  seller reports. For more information on using the RegisterUsage operation, see <a
  href=\"https://docs.aws.amazon.com/latest/userguide/entitlement-and-metering-for-paid-products.html\">Container-Based
  Products</a>. </p> </li> </ul> <p>BatchMeterUsage API calls are captured by AWS
  CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that
  you sent are accurate by searching for records with the eventName of BatchMeterUsage.
  You can also use CloudTrail to audit records over time. For more information, see
  the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS
  CloudTrail User Guide</a> </i>.</p>\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:18:\"Apache
  2.0 License\";s:3:\"url\";s:31:\"http://www.apache.org/licenses/\";}s:14:\"termsOfService\";s:37:\"https://aws.amazon.com/service-terms/\";s:5:\"title\";s:23:\"AWSMarketplace
  Metering\";s:7:\"version\";s:10:\"2016-01-14\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:79:\"https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\";}s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"cloud\";}s:6:\"x-logo\";O:8:\"stdClass\":2:{s:15:\"backgroundColor\";s:7:\"#FFFFFF\";s:3:\"url\";s:81:\"https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:11:\"contentType\";s:16:\"application/json\";s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:7:\"version\";s:5:\"1.0.0\";}s:3:\"url\";s:103:\"https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/meteringmarketplace-2016-01-14.normal.json\";s:17:\"x-apisguru-direct\";b:1;}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:13:\"amazonaws.com\";s:9:\"x-release\";s:2:\"v4\";s:13:\"x-serviceName\";s:19:\"meteringmarketplace\";}"
host: metering.marketplace.amazonaws.com
basePath: /
paths:
  /:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>BatchMeterUsage is called from a SaaS application listed on
        the AWS Marketplace to post metering records for a set of customers.</p> <p>For
        identical requests, the API is idempotent; requests can be retried with the
        same records or a subset of the input records.</p> <p>Every request to BatchMeterUsage
        is for one product. If you need to meter usage for multiple products, you
        must make multiple calls to BatchMeterUsage.</p> <p>BatchMeterUsage can process
        up to 25 UsageRecords at a time.</p>
      operationId: BatchMeterUsage
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/BatchMeterUsageRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/BatchMeterUsageResult'
        480:
          description: InternalServiceErrorException
          schema:
            $ref: '#/definitions/InternalServiceErrorException'
        481:
          description: InvalidProductCodeException
          schema:
            $ref: '#/definitions/InvalidProductCodeException'
        482:
          description: InvalidUsageDimensionException
          schema:
            $ref: '#/definitions/InvalidUsageDimensionException'
        483:
          description: InvalidCustomerIdentifierException
          schema:
            $ref: '#/definitions/InvalidCustomerIdentifierException'
        484:
          description: TimestampOutOfBoundsException
          schema:
            $ref: '#/definitions/TimestampOutOfBoundsException'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: DisabledApiException
          schema:
            $ref: '#/definitions/DisabledApiException'
  /#MeterUsage:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>API to emit metering records. For identical requests, the API
        is idempotent. It simply returns the metering record ID.</p> <p>MeterUsage
        is authenticated on the buyer's AWS account, generally when running from an
        EC2 instance on the AWS Marketplace.</p>
      operationId: MeterUsage
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/MeterUsageRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/MeterUsageResult'
        480:
          description: InternalServiceErrorException
          schema:
            $ref: '#/definitions/InternalServiceErrorException'
        481:
          description: InvalidProductCodeException
          schema:
            $ref: '#/definitions/InvalidProductCodeException'
        482:
          description: InvalidUsageDimensionException
          schema:
            $ref: '#/definitions/InvalidUsageDimensionException'
        483:
          description: InvalidEndpointRegionException
          schema:
            $ref: '#/definitions/InvalidEndpointRegionException'
        484:
          description: TimestampOutOfBoundsException
          schema:
            $ref: '#/definitions/TimestampOutOfBoundsException'
        485:
          description: DuplicateRequestException
          schema:
            $ref: '#/definitions/DuplicateRequestException'
        486:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
  /#RegisterUsage:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Paid container software products sold through AWS Marketplace
        must integrate with the AWS Marketplace Metering Service and call the RegisterUsage
        operation for software entitlement and metering. Calling RegisterUsage from
        containers running outside of ECS is not currently supported. Free and BYOL
        products for ECS aren''t required to call RegisterUsage, but you may choose
        to do so if you would like to receive usage data in your seller reports. The
        sections below explain the behavior of RegisterUsage. RegisterUsage performs
        two primary functions: metering and entitlement.</p> <ul> <li> <p> <i>Entitlement</i>:
        RegisterUsage allows you to verify that the customer running your paid software
        is subscribed to your product on AWS Marketplace, enabling you to guard against
        unauthorized use. Your container image that integrates with RegisterUsage
        is only required to guard against unauthorized use at container startup, as
        such a CustomerNotSubscribedException/PlatformNotSupportedException will only
        be thrown on the initial call to RegisterUsage. Subsequent calls from the
        same Amazon ECS task instance (e.g. task-id) will not throw a CustomerNotSubscribedException,
        even if the customer unsubscribes while the Amazon ECS task is still running.</p>
        </li> <li> <p> <i>Metering</i>: RegisterUsage meters software use per ECS
        task, per hour, with usage prorated to the second. A minimum of 1 minute of
        usage applies to tasks that are short lived. For example, if a customer has
        a 10 node ECS cluster and creates an ECS service configured as a Daemon Set,
        then ECS will launch a task on all 10 cluster nodes and the customer will
        be charged: (10 * hourly_rate). Metering for software use is automatically
        handled by the AWS Marketplace Metering Control Plane -- your software is
        not required to perform any metering specific actions, other than call RegisterUsage
        once for metering of software use to commence. The AWS Marketplace Metering
        Control Plane will also continue to bill customers for running ECS tasks,
        regardless of the customers subscription state, removing the need for your
        software to perform entitlement checks at runtime.</p> </li> </ul>'
      operationId: RegisterUsage
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/RegisterUsageRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/RegisterUsageResult'
        480:
          description: InvalidProductCodeException
          schema:
            $ref: '#/definitions/InvalidProductCodeException'
        481:
          description: InvalidRegionException
          schema:
            $ref: '#/definitions/InvalidRegionException'
        482:
          description: InvalidPublicKeyVersionException
          schema:
            $ref: '#/definitions/InvalidPublicKeyVersionException'
        483:
          description: PlatformNotSupportedException
          schema:
            $ref: '#/definitions/PlatformNotSupportedException'
        484:
          description: CustomerNotEntitledException
          schema:
            $ref: '#/definitions/CustomerNotEntitledException'
        485:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        486:
          description: InternalServiceErrorException
          schema:
            $ref: '#/definitions/InternalServiceErrorException'
        487:
          description: DisabledApiException
          schema:
            $ref: '#/definitions/DisabledApiException'
  /#ResolveCustomer:
    parameters:
    - $ref: '#/parameters/Action'
    - $ref: '#/parameters/Version'
    - $ref: '#/parameters/X-Amz-Content-Sha256'
    - $ref: '#/parameters/X-Amz-Date'
    - $ref: '#/parameters/X-Amz-Algorithm'
    - $ref: '#/parameters/X-Amz-Credential'
    - $ref: '#/parameters/X-Amz-Security-Token'
    - $ref: '#/parameters/X-Amz-Signature'
    - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: ResolveCustomer is called by a SaaS application during the registration
        process. When a buyer visits your website during the registration process,
        the buyer submits a registration token through their browser. The registration
        token is resolved through this API to obtain a CustomerIdentifier and product
        code.
      operationId: ResolveCustomer
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ResolveCustomerRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ResolveCustomerResult'
        480:
          description: InvalidTokenException
          schema:
            $ref: '#/definitions/InvalidTokenException'
        481:
          description: ExpiredTokenException
          schema:
            $ref: '#/definitions/ExpiredTokenException'
        482:
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        483:
          description: InternalServiceErrorException
          schema:
            $ref: '#/definitions/InternalServiceErrorException'
        484:
          description: DisabledApiException
          schema:
            $ref: '#/definitions/DisabledApiException'
produces:
- application/json
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":38:{s:22:\"BatchMeterUsageRequest\";O:8:\"stdClass\":4:{s:11:\"description\";s:107:\"A
  BatchMeterUsageRequest contains UsageRecords, which indicate quantities of usage
  within your application.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"ProductCode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ProductCode\";s:11:\"description\";s:163:\"Product
  code is used to uniquely identify a product in AWS Marketplace. The product code
  should be the same as the one used during the publishing of a new product.\";}s:12:\"UsageRecords\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/UsageRecordList\";s:11:\"description\";s:91:\"The
  set of UsageRecords to submit. BatchMeterUsage accepts up to 25 UsageRecords at
  a time.\";}}s:8:\"required\";a:2:{i:0;s:12:\"UsageRecords\";i:1;s:11:\"ProductCode\";}s:4:\"type\";s:6:\"object\";}s:21:\"BatchMeterUsageResult\";O:8:\"stdClass\":3:{s:11:\"description\";s:111:\"Contains
  the UsageRecords processed by BatchMeterUsage and any records that have failed due
  to transient error.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"Results\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:35:\"#/definitions/UsageRecordResultList\";s:11:\"description\";s:142:\"Contains
  all UsageRecords processed by BatchMeterUsage. These records were either honored
  by AWS Marketplace Metering Service or were invalid.\";}s:18:\"UnprocessedRecords\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/UsageRecordList\";s:11:\"description\";s:228:\"Contains
  all UsageRecords that were not processed by BatchMeterUsage. This is a list of UsageRecords.
  You can retry the failed request by making another BatchMeterUsage call with this
  list as input in the BatchMeterUsageRequest.\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Boolean\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:18:\"CustomerIdentifier\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:255;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:28:\"CustomerNotEntitledException\";O:8:\"stdClass\":0:{}s:20:\"DisabledApiException\";O:8:\"stdClass\":0:{}s:25:\"DuplicateRequestException\";O:8:\"stdClass\":0:{}s:21:\"ExpiredTokenException\";O:8:\"stdClass\":0:{}s:29:\"InternalServiceErrorException\";O:8:\"stdClass\":0:{}s:34:\"InvalidCustomerIdentifierException\";O:8:\"stdClass\":0:{}s:30:\"InvalidEndpointRegionException\";O:8:\"stdClass\":0:{}s:27:\"InvalidProductCodeException\";O:8:\"stdClass\":0:{}s:32:\"InvalidPublicKeyVersionException\";O:8:\"stdClass\":0:{}s:22:\"InvalidRegionException\";O:8:\"stdClass\":0:{}s:21:\"InvalidTokenException\";O:8:\"stdClass\":0:{}s:30:\"InvalidUsageDimensionException\";O:8:\"stdClass\":0:{}s:17:\"MeterUsageRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"DryRun\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Boolean\";s:11:\"description\";s:206:\"Checks
  whether you have the permissions required for the action, but does not make the
  request. If you have the permissions, the request returns DryRunOperation; otherwise,
  it returns UnauthorizedException.\";}s:11:\"ProductCode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ProductCode\";s:11:\"description\";s:163:\"Product
  code is used to uniquely identify a product in AWS Marketplace. The product code
  should be the same as the one used during the publishing of a new product.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:111:\"Timestamp
  of the hour, recorded in UTC. The seconds and milliseconds portions of the timestamp
  will be ignored.\";}s:14:\"UsageDimension\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/UsageDimension\";s:11:\"description\";s:87:\"It
  will be one of the fcp dimension name provided during the publishing of the product.\";}s:13:\"UsageQuantity\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/UsageQuantity\";s:11:\"description\";s:31:\"Consumption
  value for the hour.\";}}s:8:\"required\";a:5:{i:0;s:11:\"ProductCode\";i:1;s:9:\"Timestamp\";i:2;s:14:\"UsageDimension\";i:3;s:13:\"UsageQuantity\";i:4;s:6:\"DryRun\";}s:4:\"type\";s:6:\"object\";}s:16:\"MeterUsageResult\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:16:\"MeteringRecordId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:19:\"Metering
  record id.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"NonEmptyString\";O:8:\"stdClass\":2:{s:7:\"pattern\";s:3:\"\\S+\";s:4:\"type\";s:6:\"string\";}s:5:\"Nonce\";O:8:\"stdClass\":2:{s:9:\"maxLength\";i:255;s:4:\"type\";s:6:\"string\";}s:29:\"PlatformNotSupportedException\";O:8:\"stdClass\":0:{}s:11:\"ProductCode\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:255;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:20:\"RegisterUsageRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"Nonce\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Nonce\";s:11:\"description\";s:115:\"(Optional)
  To scope down the registration to a specific running software instance and guard
  against replay attacks.\";}s:11:\"ProductCode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ProductCode\";s:11:\"description\";s:163:\"Product
  code is used to uniquely identify a product in AWS Marketplace. The product code
  should be the same as the one used during the publishing of a new product.\";}s:16:\"PublicKeyVersion\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/VersionInteger\";s:11:\"description\";s:46:\"Public
  Key Version provided by AWS Marketplace\";}}s:8:\"required\";a:2:{i:0;s:11:\"ProductCode\";i:1;s:16:\"PublicKeyVersion\";}s:4:\"type\";s:6:\"object\";}s:19:\"RegisterUsageResult\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:26:\"PublicKeyRotationTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:60:\"(Optional)
  Only included when public key version has expired\";}s:9:\"Signature\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/NonEmptyString\";s:11:\"description\";s:9:\"JWT
  Token\";}}s:4:\"type\";s:6:\"object\";}s:22:\"ResolveCustomerRequest\";O:8:\"stdClass\":4:{s:11:\"description\";s:48:\"Contains
  input to the ResolveCustomer operation.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:17:\"RegistrationToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/NonEmptyString\";s:11:\"description\";s:209:\"When
  a buyer visits your website during the registration process, the buyer submits a
  registration token through the browser. The registration token is resolved to obtain
  a CustomerIdentifier and product code.\";}}s:8:\"required\";a:1:{i:0;s:17:\"RegistrationToken\";}s:4:\"type\";s:6:\"object\";}s:21:\"ResolveCustomerResult\";O:8:\"stdClass\":3:{s:11:\"description\";s:94:\"The
  result of the ResolveCustomer operation. Contains the CustomerIdentifier and product
  code.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:18:\"CustomerIdentifier\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/CustomerIdentifier\";s:11:\"description\";s:161:\"The
  CustomerIdentifier is used to identify an individual customer in your application.
  Calls to BatchMeterUsage require CustomerIdentifiers for each UsageRecord.\";}s:11:\"ProductCode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ProductCode\";s:11:\"description\";s:160:\"The
  product code is returned to confirm that the buyer is registering for your product.
  Subsequent BatchMeterUsage calls should be made using this product code.\";}}s:4:\"type\";s:6:\"object\";}s:6:\"String\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:19:\"ThrottlingException\";O:8:\"stdClass\":0:{}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:29:\"TimestampOutOfBoundsException\";O:8:\"stdClass\":0:{}s:14:\"UsageDimension\";O:8:\"stdClass\":3:{s:9:\"maxLength\";i:255;s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:13:\"UsageQuantity\";O:8:\"stdClass\":3:{s:7:\"maximum\";i:1000000;s:7:\"minimum\";i:0;s:4:\"type\";s:7:\"integer\";}s:11:\"UsageRecord\";O:8:\"stdClass\":4:{s:11:\"description\";s:210:\"<p>A
  UsageRecord indicates a quantity of usage for a given product, customer, dimension
  and time.</p> <p>Multiple requests with the same UsageRecords as input will be deduplicated
  to prevent double charges.</p>\";s:10:\"properties\";O:8:\"stdClass\":4:{s:18:\"CustomerIdentifier\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/CustomerIdentifier\";s:11:\"description\";s:128:\"The
  CustomerIdentifier is obtained through the ResolveCustomer operation and represents
  an individual buyer in your application.\";}s:9:\"Dimension\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/UsageDimension\";s:11:\"description\";s:163:\"During
  the process of registering a product on AWS Marketplace, up to eight dimensions
  are specified. These represent different units of value in your application.\";}s:8:\"Quantity\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/UsageQuantity\";s:11:\"description\";s:80:\"The
  quantity of usage consumed by the customer for the given dimension and time.\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:190:\"<p>Timestamp
  of the hour, recorded in UTC. The seconds and milliseconds portions of the timestamp
  will be ignored.</p> <p>Your application can meter usage for up to one hour in the
  past.</p>\";}}s:8:\"required\";a:4:{i:0;s:9:\"Timestamp\";i:1;s:18:\"CustomerIdentifier\";i:2;s:9:\"Dimension\";i:3;s:8:\"Quantity\";}s:4:\"type\";s:6:\"object\";}s:15:\"UsageRecordList\";O:8:\"stdClass\":4:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/UsageRecord\";}s:8:\"maxItems\";i:25;s:8:\"minItems\";i:0;s:4:\"type\";s:5:\"array\";}s:17:\"UsageRecordResult\";O:8:\"stdClass\":3:{s:11:\"description\";s:93:\"A
  UsageRecordResult indicates the status of a given UsageRecord processed by BatchMeterUsage.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"MeteringRecordId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:68:\"The
  MeteringRecordId is a unique identifier for this metering event.\";}s:6:\"Status\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/UsageRecordResultStatus\";s:11:\"description\";s:673:\"<p>The
  UsageRecordResult Status indicates the status of an individual UsageRecord processed
  by BatchMeterUsage.</p> <ul> <li> <p> <i>Success</i>- The UsageRecord was accepted
  and honored by BatchMeterUsage.</p> </li> <li> <p> <i>CustomerNotSubscribed</i>-
  The CustomerIdentifier specified is not subscribed to your product. The UsageRecord
  was not honored. Future UsageRecords for this customer will fail until the customer
  subscribes to your product.</p> </li> <li> <p> <i>DuplicateRecord</i>- Indicates
  that the UsageRecord was invalid and not honored. A previously metered UsageRecord
  had the same customer, dimension, and time, but a different quantity.</p> </li>
  </ul>\";}s:11:\"UsageRecord\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/UsageRecord\";s:11:\"description\";s:61:\"The
  UsageRecord that was part of the BatchMeterUsage request.\";}}s:4:\"type\";s:6:\"object\";}s:21:\"UsageRecordResultList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/UsageRecordResult\";}s:4:\"type\";s:5:\"array\";}s:23:\"UsageRecordResultStatus\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:7:\"Success\";i:1;s:21:\"CustomerNotSubscribed\";i:2;s:15:\"DuplicateRecord\";}s:4:\"type\";s:6:\"string\";}s:14:\"VersionInteger\";O:8:\"stdClass\":2:{s:7:\"minimum\";i:1;s:4:\"type\";s:7:\"integer\";}}"
...
