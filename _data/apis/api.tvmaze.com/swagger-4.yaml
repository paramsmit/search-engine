---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":1:{s:3:\"url\";s:21:\"http://www.tvmaze.com\";}s:11:\"description\";s:474:\"Access
  to the user API is only possible for users with a [premium](http://www.tvmaze.com/premium)
  account. A user can only access their own user data.\n\nAuthentication uses HTTP
  Basic. Use the TVmaze username as authentication username, and the TVmaze API key
  as authentication password. Your API key can be found on your [dashboard](http://www.tvmaze.com/dashboard).
  To try out these API calls from this page, click the \"Authorize\" button on top
  and input your credentials.\n\";s:5:\"title\";s:11:\"TVmaze user\";s:7:\"version\";s:3:\"1.0\";s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"media\";}s:6:\"x-logo\";O:8:\"stdClass\":2:{s:15:\"backgroundColor\";s:7:\"#FFFFFF\";s:3:\"url\";s:110:\"https://api.apis.guru/v2/cache/logo/https_pbs.twimg.com_profile_images_515600283242463232_-APY1VAo_400x400.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":3:{s:6:\"format\";s:7:\"swagger\";s:3:\"url\";s:39:\"http://static.tvmaze.com/apidoc/v1.yaml\";s:7:\"version\";s:3:\"2.0\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:10:\"tvmaze.com\";s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"tvmaze\";s:4:\"type\";s:7:\"openapi\";}}"
host: api.tvmaze.com
basePath: /v1
paths:
  /user/episodes:
    get:
      parameters:
      - description: Only return episodes from this specific show
        in: query
        name: show_id
        required: false
        type: integer
      responses:
        200:
          description: An array of marked episodes
          schema:
            items:
              $ref: '#/definitions/MarkedEpisode'
            type: array
      summary: List the marked episodes
      tags:
      - marked episodes
      operationId: user.episodes.get
  /user/episodes/{episode_id}:
    delete:
      responses:
        200:
          description: the episode is now unmarked
        404:
          description: this episode was not marked
      summary: Unmark an episode
      tags:
      - marked episodes
      operationId: user.episodes.episode_id.delete
    get:
      responses:
        200:
          description: The marked episode
          schema:
            $ref: '#/definitions/MarkedEpisode'
        404:
          description: This episode is not marked
      summary: Check if an episode is marked
      tags:
      - marked episodes
      operationId: user.episodes.episode_id.get
    parameters:
    - in: path
      name: episode_id
      required: true
      type: integer
    put:
      description: Set `marked_at` to `NULL` or leave it out to use the current time.
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/MarkedEpisode'
      responses:
        200:
          description: this episode is now marked
          schema:
            $ref: '#/definitions/MarkedEpisode'
        404:
          description: this episode does not exist
        422:
          description: invalid input data
      summary: Mark an episode
      tags:
      - marked episodes
      operationId: user.episodes.episode_id.put
  /user/follows/networks:
    get:
      parameters:
      - description: Embed full network info
        enum:
        - network
        in: query
        name: embed
        required: false
        type: string
      responses:
        200:
          description: An array of followed networks
          schema:
            items:
              $ref: '#/definitions/NetworkFollow'
            type: array
      summary: List the followed networks
      tags:
      - followed networks
      operationId: user.follows.networks.get
  /user/follows/networks/{network_id}:
    delete:
      responses:
        200:
          description: the network is now unfollowed
        404:
          description: this network was not followed
      summary: Unfollow a network
      tags:
      - followed networks
      operationId: user.follows.networks.network_id.delete
    get:
      responses:
        200:
          description: The followed network
          schema:
            $ref: '#/definitions/NetworkFollow'
        404:
          description: this network is not followed
      summary: Check if a network is followed
      tags:
      - followed networks
      operationId: user.follows.networks.network_id.get
    parameters:
    - in: path
      name: network_id
      required: true
      type: integer
    put:
      responses:
        200:
          description: this network is now followed
          schema:
            $ref: '#/definitions/NetworkFollow'
        404:
          description: this network does not exist
      summary: Follow a network
      tags:
      - followed networks
      operationId: user.follows.networks.network_id.put
  /user/follows/people:
    get:
      parameters:
      - description: Embed full person info
        enum:
        - person
        in: query
        name: embed
        required: false
        type: string
      responses:
        200:
          description: An array of followed people
          schema:
            items:
              $ref: '#/definitions/PersonFollow'
            type: array
      summary: List the followed people
      tags:
      - followed people
      operationId: user.follows.people.get
  /user/follows/people/{person_id}:
    delete:
      responses:
        200:
          description: the person is now unfollowed
        404:
          description: this person was not followed
      summary: Unfollow a person
      tags:
      - followed people
      operationId: user.follows.people.person_id.delete
    get:
      responses:
        200:
          description: The followed person
          schema:
            $ref: '#/definitions/PersonFollow'
        404:
          description: this person is not followed
      summary: Check if a person is followed
      tags:
      - followed people
      operationId: user.follows.people.person_id.get
    parameters:
    - in: path
      name: person_id
      required: true
      type: integer
    put:
      responses:
        200:
          description: this person is now followed
          schema:
            $ref: '#/definitions/PersonFollow'
        404:
          description: this person does not exist
      summary: Follow a person
      tags:
      - followed people
      operationId: user.follows.people.person_id.put
  /user/follows/shows:
    get:
      parameters:
      - description: Embed full show info
        enum:
        - show
        in: query
        name: embed
        required: false
        type: string
      responses:
        200:
          description: An array of followed shows
          schema:
            items:
              $ref: '#/definitions/ShowFollow'
            type: array
      summary: List the followed shows
      tags:
      - followed shows
      operationId: user.follows.shows.get
  /user/follows/shows/{show_id}:
    delete:
      responses:
        200:
          description: The show is now unfollowed
        404:
          description: This show was not followed
      summary: Unfollow a show
      tags:
      - followed shows
      operationId: user.follows.shows.show_id.delete
    get:
      responses:
        200:
          description: The followed show
          schema:
            $ref: '#/definitions/ShowFollow'
        404:
          description: This show is not followed
      summary: Check if a show is followed
      tags:
      - followed shows
      operationId: user.follows.shows.show_id.get
    parameters:
    - in: path
      name: show_id
      required: true
      type: integer
    put:
      responses:
        200:
          description: This show is now followed
          schema:
            $ref: '#/definitions/ShowFollow'
        404:
          description: This show does not exist
      summary: Follow a show
      tags:
      - followed shows
      operationId: user.follows.shows.show_id.put
  /user/follows/webchannels:
    get:
      parameters:
      - description: Embed full webchannel info
        enum:
        - webchannel
        in: query
        name: embed
        required: false
        type: string
      responses:
        200:
          description: An array of followed webchannels
          schema:
            items:
              $ref: '#/definitions/WebchannelFollow'
            type: array
      summary: List the followed webchannels
      tags:
      - followed webchannels
      operationId: user.follows.webchannels.get
  /user/follows/webchannels/{webchannel_id}:
    delete:
      responses:
        200:
          description: the webchannel is now unfollowed
        404:
          description: this webchannel was not followed
      summary: Unfollow a webchannel
      tags:
      - followed webchannels
      operationId: user.follows.webchannels.webchannel_id.delete
    get:
      responses:
        200:
          description: The followed webchannel
          schema:
            $ref: '#/definitions/WebchannelFollow'
        404:
          description: this webchannel is not followed
      summary: Check if a webchannel is followed
      tags:
      - followed webchannels
      operationId: user.follows.webchannels.webchannel_id.get
    parameters:
    - in: path
      name: webchannel_id
      required: true
      type: integer
    put:
      responses:
        200:
          description: this webchannel is now followed
          schema:
            $ref: '#/definitions/WebchannelFollow'
        404:
          description: this webchannel does not exist
      summary: Follow a webchannel
      tags:
      - followed webchannels
      operationId: user.follows.webchannels.webchannel_id.put
  /user/votes/episodes:
    get:
      responses:
        200:
          description: An array of episode votes
          schema:
            items:
              $ref: '#/definitions/EpisodeVote'
            type: array
      summary: List the episodes voted for
      tags:
      - voted episodes
      operationId: user.votes.episodes.get
  /user/votes/episodes/{episode_id}:
    delete:
      responses:
        200:
          description: The episode vote is now removed
        404:
          description: This episode was not voted for
      summary: Remove an episode vote
      tags:
      - voted episodes
      operationId: user.votes.episodes.episode_id.delete
    get:
      responses:
        200:
          description: The episode vote
          schema:
            $ref: '#/definitions/EpisodeVote'
        404:
          description: This episode is not voted for
      summary: Check if an episode is voted for
      tags:
      - voted episodes
      operationId: user.votes.episodes.episode_id.get
    parameters:
    - in: path
      name: episode_id
      required: true
      type: integer
    put:
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/EpisodeVote'
      responses:
        200:
          description: This episode is now voted for
          schema:
            $ref: '#/definitions/EpisodeVote'
        404:
          description: This episode does not exist
      summary: Vote for an episode
      tags:
      - voted episodes
      operationId: user.votes.episodes.episode_id.put
  /user/votes/shows:
    get:
      parameters:
      - description: Embed full show info
        enum:
        - show
        in: query
        name: embed
        required: false
        type: string
      responses:
        200:
          description: An array of show votes
          schema:
            items:
              $ref: '#/definitions/ShowVote'
            type: array
      summary: List the shows voted for
      tags:
      - voted shows
      operationId: user.votes.shows.get
  /user/votes/shows/{show_id}:
    delete:
      responses:
        200:
          description: The show vote is now removed
        404:
          description: This show was not voted for
      summary: Remove a show vote
      tags:
      - voted shows
      operationId: user.votes.shows.show_id.delete
    get:
      responses:
        200:
          description: The show vote
          schema:
            $ref: '#/definitions/ShowVote'
        404:
          description: This show is not voted for
      summary: Check if a show is voted for
      tags:
      - voted shows
      operationId: user.votes.shows.show_id.get
    parameters:
    - in: path
      name: show_id
      required: true
      type: integer
    put:
      description: Set `voted_at` to `NULL` or leave it out to use the current time.
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ShowVote'
      responses:
        200:
          description: This show is now voted for
          schema:
            $ref: '#/definitions/ShowVote'
        404:
          description: This show does not exist
      summary: Vote for a show
      tags:
      - voted shows
      operationId: user.votes.shows.show_id.put
produces:
- application/json
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":11:{s:11:\"EpisodeVote\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"episode_id\";O:8:\"stdClass\":2:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:4:\"vote\";O:8:\"stdClass\":4:{s:11:\"description\";s:15:\"The
  vote number\";s:7:\"maximum\";i:10;s:7:\"minimum\";i:1;s:4:\"type\";s:7:\"integer\";}s:8:\"voted_at\";O:8:\"stdClass\":3:{s:11:\"description\";s:55:\"Epoch
  timestamp for when the user voted for the episode\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:13:\"MarkedEpisode\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"episode_id\";O:8:\"stdClass\":2:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:9:\"marked_at\";O:8:\"stdClass\":2:{s:11:\"description\";s:72:\"Epoch
  timestamp for when the user watched the episode, or 0 for unknown.\";s:4:\"type\";s:7:\"integer\";}s:4:\"type\";O:8:\"stdClass\":3:{s:11:\"description\";s:44:\"0
  for watched, 1 for acquired, 2 for skipped\";s:4:\"enum\";a:3:{i:0;i:0;i:1;i:1;i:2;i:2;}s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Network\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:13:\"NetworkFollow\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"_embedded\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"network\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Network\";}}s:4:\"type\";s:6:\"object\";}s:10:\"network_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Person\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:12:\"PersonFollow\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"_embedded\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"person\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Person\";}}s:4:\"type\";s:6:\"object\";}s:9:\"person_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Show\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:10:\"ShowFollow\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"_embedded\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"show\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Show\";}}s:4:\"type\";s:6:\"object\";}s:7:\"show_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:8:\"ShowVote\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"show_id\";O:8:\"stdClass\":2:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:4:\"vote\";O:8:\"stdClass\":4:{s:11:\"description\";s:15:\"The
  vote number\";s:7:\"maximum\";i:10;s:7:\"minimum\";i:1;s:4:\"type\";s:7:\"integer\";}s:8:\"voted_at\";O:8:\"stdClass\":3:{s:11:\"description\";s:55:\"Epoch
  timestamp for when the user voted for the episode\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:10:\"Webchannel\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:16:\"WebchannelFollow\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"_embedded\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"webchannel\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/Webchannel\";}}s:4:\"type\";s:6:\"object\";}s:13:\"webchannel_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}}"
...
