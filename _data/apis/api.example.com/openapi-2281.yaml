---
openapi: 3.0.1
info: !php/object "O:8:\"stdClass\":4:{s:5:\"title\";s:15:\"WaniKani API v2\";s:7:\"version\";s:5:\"2.0.0\";s:11:\"description\";s:4365:\"#
  Purpose \n* Update the API to meet the needs of both the company and our users.\n*
  Optimize the API to return only what is necessary.\n* Set the API up for easier
  versioning, allowing for more frequent updates while maintaining older versions
  for reliability.\n\n# Disclaimer\nExpect breaking changes until the framework has
  been solidified. Keep in mind this is an alpha!\nThere may be more endpoints to
  come and the structure of API results can be changed dramatically before we release
  the 2.0 version.\n\n# Authentication\nV1 API keys will not work with V2. API tokens
  for V2 can be found on [account settings](https://www.wanikani.com/settings/account).\n\nOne
  major change from V1 is how the API credentials are passed. The token must now be
  passed in the `Authorization` request header.\n\n# Rate limiter\nWe\u2019ve raised
  the limit to 60 RPM / 10 RPS for both versions of the API. It was at 40 RPM before.\n\n#
  Versioning\nWe have tentative plans on our approach to versioning. We will release
  versions designated by timestamps in the ISO format YYYYMMDD.\nThis will be passed
  into the request headers. If no version is specified, the API will default to 2.0.\nYes,
  we\u2019re ripping off Stripe\u2019s scheme, but mainly because their API is awesome
  and their versions are easy to work with.\n\n# Documentation\nWe plan on redoing
  the documentation into something more accessible when V2 gets closer to finalization,\ncomplete
  with timestamp changelogs (to match versioning).\n\n# Collection Size and Pagination\nWe
  limit the number of resources returned for all the collections to 500 to keep things
  speedy.\nThe exception is `/reviews` and `/subjects` which are set to 1000. To help
  with paging through results,\nwe provide a couple pieces of information on collections:\n\n*
  The `total_count` field. This contains the total count of all resources available.\n*
  The `pages.next_url` and `pages.previous_url` fields. These return a url if the
  previous or next pages exist. Else they return `null`. Protip: the first page has
  no previous page, and the last page has no next page.\n* The `pages.per_page` field
  tells you the maximum number of results we\u2019ll deliver at once for this collection.
  This is currently a universal `1000`, as mentioned before, but if a particular resource
  returns a different number per page, it will be specified in this field.\n\nWe use
  a cursor-based pagination scheme, with the id of a resource acting as the cursor.\nYou
  can get the previous page of results by sending us the page_before_id parameter,
  with the value being the ID you want to look before.\nSimilar logic applies for
  the next page: send us the page_after_id parameter with with the ID you want to
  look after.\nIf you specify a cursor outside range of IDs for the collection, we\u2019ll
  return an empty result set.\n\nSince it\u2019s slightly ambiguous, here\u2019s a
  simple example:\n\nLet\u2019s say you have four resources, with IDs of `1, 2, 3,
  4`. If you make a call to `/v2/subjects/?page_after_id=2`,\nwe\u2019d send you data
  containing records `3` and `4`. If you make a call to `/v2/subjects/?page_before_id=3`,\nwe'd
  send you data containing records `1` and `2`. If you make a call to `/v2/subjects/?page_after_id=5`,\nwe\u2019d
  send back an empty result set.\n\n# Filters\nCollection endpoints have optional
  filter options to query for specific results. The filters are passed in as URL parameters\n(that
  whole GET thing) in the usual `?parameter=value&other_parameter=value` format.\n\nPluralized
  filters, for example `subject_ids` can take it multiple values in the form of a
  comma-delimited string.\n\nExample for a single member `subject_ids` request:\n>
  `...?subject_ids=8`\n\nExample for a multiple member `subject_ids` request:\n> `...?subject_ids=8,16,64`\n#
  Time\nTimestamps are formatted in ISO8601 to microsecond precision.\n\n# Handling
  of User Resets\nWhen the user resets, all subjectable (`assignment`, `review_statistic`,
  and `study_material`) records above the user\u2019s new level\nwill be have their
  attributes set to the defaults and the updated_at timestamp will be touched.\nThis
  is different than the old flow where the records were deleted, where the consumer
  of the API is unable to determine when records are deleted.\nUser resets can be
  inferred from the `/level_progressions` endpoint; check the `abandoned_at` attribute
  and the next\n`level_progression` object in the sequence ordered by `created_at`
  ascending.\n\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:8:\"WaniKani\";s:3:\"url\";s:32:\"https://www.wanikani.com/contact\";s:5:\"email\";s:18:\"hello@wanikani.com\";}}"
paths: []
...
