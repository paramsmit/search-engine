---
openapi: 3.0.1
info: !php/object "O:8:\"stdClass\":3:{s:5:\"title\";s:12:\"Wisetack API\";s:7:\"version\";s:5:\"1.1.1\";s:11:\"description\";s:2094:\"##
  Introduction\nWith Wisetack customers can pay over time for a purchase, and a business
  gets paid upfront. The Wisetack APIs enable seamless integration of consumer financing
  options\nwithin another system serving businesses and their customers. Here's a
  brief overview of the APIs:\n\n* **Transactions** initiates a transaction between
  a specific business and a customer.\nThe Transaction resource also allows tracking
  and updating the flow of the transaction through authorization and settlement.\n\n*
  **PaymentLink** allows a specific type of transaction that starts from an HTML link
  embedded in an invoice or payment flow. This\nlink will initiate a transaction that
  is session specific for that invoice.\n\n* **Merchants** allows enabling merchants
  to offer financing as a payment option, listing existing merchants based on\ndate
  and status filters, getting information on a merchant, and removing merchants from
  the system.\n\n* **Users** Each merchant can have multiple users for the Wisetack
  system. The Users resource allows adding and managing users and their roles and
  priveleges in the system.\n\n## Authentication\nWisetack uses HTTP Basic Authentication
  with both an application token and a secret key. When you initially create\na Wisetack
  account, you'll be given an application token and a secret key for both the production
  system\nand a test system.  You'll be able to distinguish between the two keys easily
  by their prefix. Production keys\nstart with ws_prod_ and the test system keys are
  prefixed by ws_test_.\nIf you use one of our language SDK's you don't need to worry
  about the specifics of authentication but if you\nwant to build authentication in
  to your own RESTful calls, you simply add the keys to the header like this:\n\n1.
  Concatenate the application token and secret key separated by a colon.\n\n2. Base64
  encode the resulting string.\n\n3. Pass the result in the authorization header,
  prefixed with the word Basic.\n\nThis process will result in a header that looks
  something like this: \\\n**Authorization: Basic ZHBERDZ6NG9sT1NJN040Zk1Dc0FsS2pGYTdyZUJZaHU6b0ptM25pUVgxUGR5NRNDU=**\n\";}"
paths: []
...
