---
openapi: 3.0.1
info: !php/object "O:8:\"stdClass\":6:{s:5:\"title\";s:35:\"Introduction to Instana
  public APIs\";s:14:\"termsOfService\";s:37:\"https://www.instana.com/terms-of-use/\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:10:\"\xA9
  Instana\";s:3:\"url\";s:18:\"http://instana.com\";s:5:\"email\";s:19:\"support@instana.com\";}s:7:\"version\";s:9:\"1.150.338\";s:6:\"x-logo\";O:8:\"stdClass\":3:{s:3:\"url\";s:15:\"header-logo.svg\";s:15:\"backgroundColor\";s:7:\"#031F29\";s:7:\"altText\";s:12:\"instana
  logo\";}s:11:\"description\";s:7113:\"## Agent REST API\n### Event SDK REST Web
  Service\nUsing the Event SDK REST Web Service, it is possible to integrate custom
  health checks and other event sources into Instana. Each one running the Instana
  Agent can be used to feed in manual events. The agent has an endpoint which listens
  on `http://localhost:42699/com.instana.plugin.generic.event` and accepts the following
  JSON via a POST request:\n\n```json\n{\n    \"title\": <string>,\n    \"text\":
  <string>,\n    \"severity\": <integer> , -1, 5 or 10\n    \"timestamp\": <integer>,
  timestamp in milliseconds from epoch\n    \"duration\": <integer>, duration in milliseconds\n}\n```\n\n*Title*
  and *text* are used for display purposes.\n\n*Severity* is an optional integer of
  -1, 5 and 10. A value of -1 or EMPTY will generate a Change. A value of 5 will generate
  a *warning Issue*, and a value of 10 will generate a *critical Issue*.\n\nWhen absent,
  the event is treated as a change without severity. *Timestamp* is the timestamp
  of the event, but it is optional, in which case the current time is used. *Duration*
  can be used to mark a timespan for the event. It also is optional, in which case
  the event will be marked as \"instant\" rather than \"from-to.\"\n\nThe endpoint
  also accepts a batch of events, which then need to be given as an array:\n\n```json\n[\n
  \   {\n    // event as above\n    },\n    {\n    // event as above\n    }\n]\n```\n\n####
  Ruby Example\n\n```ruby\nduration = (Time.now.to_f * 1000).floor - deploy_start_time_in_ms\npayload
  = {}\npayload[:title] = 'Deployed MyApp'\npayload[:text] = 'pglombardo deployed
  MyApp@revision'\npayload[:duration] = duration\n\nuri = URI('http://localhost:42699/com.instana.plugin.generic.event')\nreq
  = Net::HTTP::Post.new(uri, 'Content-Type' => 'application/json')\nreq.body = payload.to_json\nNet::HTTP.start(uri.hostname,
  uri.port) do |http|\n    http.request(req)\nend\n```\n\n#### Curl Example\n\n```bash\ncurl
  -XPOST http://localhost:42699/com.instana.plugin.generic.event -H \"Content-Type:
  application/json\" -d '{\"title\":\"Custom API Events \", \"text\": \"Failure Redeploying
  Service Duration\", \"duration\": 5000, \"severity\": -1}'\n```\n\n#### PowerShell
  Example\n\nFor Powershell you can either use the standard Cmdlets `Invoke-WebRequest`
  or `Invoke-RestMethod`. The parameters to be provided are basically the same.\n\n```bash\nInvoke-RestMethod\n
  \   -Uri http://localhost:42699/com.instana.plugin.generic.event\n    -Method POST\n
  \   -Body '{\"title\":\"PowerShell Event \", \"text\": \"You used PowerShell to
  create this event!\", \"duration\": 5000, \"severity\": -1}'\n```\n\n```bash\nInvoke-WebRequest\n
  \   -Uri http://localhost:42699/com.instana.plugin.generic.event\n    -Method Post\n
  \   -Body '{\"title\":\"PowerShell Event \", \"text\": \"You used PowerShell to
  create this event!\", \"duration\": 5000, \"severity\": -1}'\n```\n## Backend REST
  API\nThe Instana API allows retrieval and configuration of key data points. Among
  others, this API enables automatic reaction and further analysis of identified incidents
  as well as reporting capabilities.\n\nThe API documentation referes to two crucial
  parameters that you need to know about before reading further:\nbase: This is the
  base URL of a tenant unit, e.g. `https://test-example.instana.io`. This is the same
  URL that is used to access the Instana user interface.\napiToken: Requests against
  the Instana API require valid API tokens. An initial API token can be generated
  via the Instana user interface. Any additional API tokens can be generated via the
  API itself.\n\n### Example\nHere is an Example to use the REST API with Curl. First
  lets get all the available metrics with possible aggregations with a GET call.\n\n```bash\ncurl
  --request GET \\\n  --url https://test-instana.instana.io/api/application-monitoring/catalog/metrics
  \\\n  --header 'authorization: apiToken xxxxxxxxxxxxxxxx'\n```\n\nNext we can get
  every call grouped by the endpoint name that has an error count greater then zero.
  As a metric we could get the mean error rate for example.\n\n```bash\ncurl --request
  POST \\\n  --url https://test-instana.instana.io/api/application-monitoring/analyze/call-groups
  \\\n  --header 'authorization: apiToken xxxxxxxxxxxxxxxx' \\\n  --header 'content-type:
  application/json' \\\n  --data '{\n  \"group\":{\n      \"groupbyTag\":\"endpoint.name\"\n
  \ },\n  \"tagFilters\":[\n  \t{\n  \t\t\"name\":\"call.error.count\",\n  \t\t\"value\":\"0\",\n
  \ \t\t\"operator\":\"GREATER_THAN\"\n  \t}\n  ],\n  \"metrics\":[\n  \t{\n  \t\t\"metric\":\"errors\",\n
  \ \t\t\"aggregation\":\"MEAN\"\n  \t}\n  ]\n  }'\n```\n\n\n### Rate Limiting\nA
  rate limit is applied to API usage. Up to 5,000 calls per hour can be made. How
  many remaining calls can be made and when this call limit resets, can inspected
  via three headers that are part of the responses of the API server.\n\n**X-RateLimit-Limit:**
  Shows the maximum number of calls that may be executed per hour.\n\n**X-RateLimit-Remaining:**
  How many calls may still be executed within the current hour.\n\n**X-RateLimit-Reset:**
  Time when the remaining calls will be reset to the limit. For compatibility reasons
  with other rate limited APIs, this date is not the date in milliseconds, but instead
  in seconds since 1970-01-01T00:00:00+00:00.\n\n## Generating REST API clients\n\nThe
  API is specified using the [OpenAPI v3](https://github.com/OAI/OpenAPI-Specification)
  (previously known as Swagger) format. You can download the current specification
  at our [GitHub API documentation](https://instana.github.io/openapi/openapi.yaml).\n\nOpenAPI
  tries to solve the issue of ever-evolving APIs and clients lagging behind. To generate
  a client library for your language, you can use the [OpenAPI client generators](https://github.com/OpenAPITools/openapi-generator).\n\nTo
  generate a client library for Go to interact with our backend, you can use the following
  script (you need a JDK and `wget`):\n\n```bash\n# Download the generator to your
  current working directory:\nwget http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/3.2.3/openapi-generator-cli-3.2.3.jar
  -O openapi-generator-cli.jar\n\n# generate a client library that you can vendor
  into your repository\njava -jar openapi-generator-cli.jar generate -i https://instana.github.io/openapi/openapi.yaml
  -g go \\\n    -o pkg/instana/openapi \\\n    --skip-validate-spec\n\n# (optional)
  format the Go code according to the Go code standard\ngofmt -s -w pkg/instana/openapi\n```\n\nThe
  generated clients contain comprehensive READMEs. To use the client from the example
  above, you can start right away:\n\n```go\nimport instana \"./pkg/instana/openapi\"\n\n//
  readTags will read all available application monitoring tags along with their type
  and category\nfunc readTags() {\n\tconfiguration := instana.NewConfiguration()\n\tconfiguration.Host
  = \"tenant-unit.instana.io\"\n\tconfiguration.BasePath = \"https://tenant-unit.instana.io\"\n\n\tclient
  := instana.NewAPIClient(configuration)\n\tauth := context.WithValue(context.Background(),
  instana.ContextAPIKey, instana.APIKey{\n\t\tKey:    apiKey,\n\t\tPrefix: \"apiToken\",\n\t})\n\n\ttags,
  _, err := client.ApplicationCatalogApi.GetTagsForApplication(auth)\n\tif err !=
  nil {\n\t\tfmt.Fatalf(\"Error calling the API, aborting.\")\n\t}\n\n\tfor _, tag
  := range tags {\n\t\tfmt.Printf(\"%s (%s): %s\\n\", tag.Category, tag.Type, tag.Name)\n\t}\n}\n```\n\";}"
paths: []
...
