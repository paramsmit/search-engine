---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:5:\"title\";s:8:\"API v0.1\";s:7:\"version\";s:4:\"v0.1\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:9:\"Mapotempo\";s:5:\"email\";s:18:\"tech@mapotempo.com\";s:3:\"url\";s:38:\"https://github.com/Mapotempo/fleet-api\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:35:\"GNU
  Affero General Public License 3\";s:3:\"url\";s:68:\"https://raw.githubusercontent.com/Mapotempo/fleet-api/master/LICENSE\";}s:11:\"description\";s:2508:\"\n##
  Overview\nThe purpose of this API is to be an interface to Couchbase/SyncGateway
  and ease communication with mobile.\n\n## Model\nModel is structured around three
  majors concepts: Company, User and Mission.\n* `Company`: main object for all other
  elements, all models must have a reference to a company. The Company has many users,
  each user has his own `api_key` to make API call. To create or mutate a company,
  an `admin` account must be used with its own API key.\n\n* `User`: user can make
  API call (through an API key) or connect to a mobile device.\n  * Each `user` has
  a `current location` which tracks mobile location. The location s updated only by
  the mobile.\n  * All users from a company, share common settings through `user settings`
  model.\n  * For mobile be able to update theses models (through SyncGateway), user
  must have declared roles. The default roles are: mission.updating, mission.deleting,
  mission_action.creating, mission_action.updating, mission_action.deleting, user_settings.creating,
  user_settings.updating, user_current_location.creating, user_current_location.updating,
  user_track.creating, user_track.updating.\n\n* `Mission`: describe the mission that
  the user must realize.\n  * Each `Mission` have an associated `mission status type`
  which describe its current state.\n  * To switch to another status, a `mission status
  action` is used to declare the links between statuses.\n  * Finally, to keep mission
  status history, each `mission` has many `mission status`.\n  * Due to the SyncGateway
  process, a `mission placeholder` is created or updated each time a mission is saved
  to keep mobile in a correct sync state. This model must not be called directly.\n\nIn
  order to know the next status available, a default workflow is defined when creating
  a company. It follows this pattern:\n* `To do` => `In progress`\n* `To do` => `Uncompleted`\n\n*
  `In progress` => `To do`\n* `In progress` => `Completed`\n* `In progress` => `Uncompleted`\n\n*
  `Uncompleted` => `To do`\n\n## Technical access\n### Swagger descriptor\nThis REST
  API is described with Swagger. The Swagger descriptor defines the request end-points,
  the parameters and the return values. The API can be addressed by HTTP request or
  with a generated client using the Swagger descriptor.\n### API key\nAll access to
  the API are subject to an `api_key` parameter in order to authenticate the user.
  This parameter must be sent in header with the following form: `\"Token token=user_api_key\"`\n###
  Return\nThe API supports one return format: `json`.\n\";}"
basePath: /api/0.1
paths:
  /admin/companies/{id}:
    get:
      summary: Get a company
      tags:
      - Admin
      operationId: getCompanies
      description: Return a specific companiy (admin account required)
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      responses:
        200:
          description: all companies
        401:
          description: bad token
  /admin/companies:
    get:
      summary: Get all companies
      tags:
      - Admin
      operationId: getCompanies
      description: Return all companies (admin account required)
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: all companies
        401:
          description: bad token
    post:
      summary: Creates a company
      tags:
      - Admin
      operationId: createCompanies
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: company
        in: body
        schema:
          $ref: '#/definitions/company'
      responses:
        200:
          description: company created with admin user
        422:
          description: invalid request
        401:
          description: bad token
  /companies/{company_id}:
    get:
      summary: Get the user company
      tags:
      - Companies
      operationId: getCompanies
      description: Return the current logged user company's
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: company_id
        in: path
        type: string
        required: true
      responses:
        200:
          description: company
        401:
          description: bad token
  /mission_action_types:
    get:
      summary: Retrieves all mission status actions for a user
      tags:
      - Mission Status Actions
      operationId: getMissionActionTypes
      description: Retrieves all mission status actions for a user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: query
        type: string
        required: true
      responses:
        200:
          description: user mission status actions found
        404:
          description: user not found
        401:
          description: bad token
    post:
      summary: Creates a mission status action for a user
      tags:
      - Mission Status Actions
      operationId: createMissionActionType
      description: Creates a mission status action for a user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: query
        type: string
        required: true
      - name: mission_action_type
        in: body
        schema:
          type: object
          properties:
            label:
              type: string
            group:
              type: string
            previous_mission_status_type_id:
              type: string
            next_mission_status_type_id:
              type: string
          required:
          - label
          - previous_mission_status_type_id
          - next_mission_status_type_id
      responses:
        200:
          description: user mission status action created
        422:
          description: invalid request
        401:
          description: bad token
  /mission_action_types/{id}:
    put:
      summary: Updates a mission status action for a user
      tags:
      - Mission Status Actions
      operationId: updateMissionActionType
      description: Updates a mission status action for a user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: sync_user
        in: query
        type: string
        required: true
      - name: mission_action_type
        in: body
        schema:
          type: object
          properties:
            label:
              type: string
            group:
              type: string
            previous_mission_status_type_id:
              type: string
            next_mission_status_type_id:
              type: string
      responses:
        200:
          description: user mission status action updated
        422:
          description: invalid request
        401:
          description: bad token
    delete:
      summary: Deletes a mission status type for a user
      tags:
      - Mission Status Actions
      operationId: deleteMissionActionType
      description: Deletes a mission status type for a user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: sync_user
        in: query
        type: string
        required: true
      responses:
        200:
          description: user mission status type deleted
        401:
          description: bad token
  /mission_status_types:
    get:
      summary: Retrieves all mission status types for a user
      tags:
      - Mission Status Types
      operationId: getMissionStatusTypes
      description: Retrieves all mission status types for a user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: query
        type: string
        required: true
      responses:
        200:
          description: user mission status types found
        404:
          description: user not found
        401:
          description: bad token
    post:
      summary: Creates a mission status type for a user
      tags:
      - Mission Status Types
      operationId: createMissionStatusType
      description: Creates a mission status type for a user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: query
        type: string
        required: true
      - name: mission_status_type
        in: body
        schema:
          type: object
          properties:
            label:
              type: string
            color:
              type: string
          required:
          - label
      responses:
        200:
          description: user mission status type created
        422:
          description: invalid request
        401:
          description: bad token
  /mission_status_types/{id}:
    put:
      summary: Updates a mission status type for a user
      tags:
      - Mission Status Types
      operationId: updateMissionStatusType
      description: Updates a mission status type for a user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: sync_user
        in: query
        type: string
        required: true
      - name: mission_status_type
        in: body
        schema:
          type: object
          properties:
            label:
              type: string
            color:
              type: string
      responses:
        200:
          description: user mission status type updated
        422:
          description: invalid request
        401:
          description: bad token
    delete:
      summary: Deletes a mission status type for a user
      tags:
      - Mission Status Types
      operationId: deleteMissionStatusType
      description: Deletes a mission status type for a user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: sync_user
        in: query
        type: string
        required: true
      responses:
        200:
          description: user mission status type deleted
        401:
          description: bad token
  /missions:
    get:
      summary: Get all missions
      tags:
      - Missions
      operationId: getMissions
      description: Retrieves all missions from the company of the current user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: user_id
        in: query
        type: string
        required: false
      responses:
        200:
          description: all missions for a user
        401:
          description: bad token
    post:
      summary: Creates a mission for a user
      tags:
      - Missions
      operationId: createUserMission
      description: Creates a mission for the current user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: mission
        in: body
        schema:
          $ref: '#/definitions/mission_required'
      responses:
        200:
          description: user mission created
        404:
          description: without user_id
        422:
          description: invalid request
        401:
          description: bad token
    delete:
      summary: Deletes a list of missions for a user
      tags:
      - Missions
      operationId: destroyUserMissions
      description: Deletes a set of missions for the current user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: user_id
        in: query
        type: string
        required: true
      - name: ids
        in: query
        type: array
        items:
          type: string
        required: false
      - name: start_date
        in: query
        type: string
        required: false
      - name: end_date
        in: query
        type: string
        required: false
      responses:
        204:
          description: user missions deleted
        401:
          description: bad token
  /missions/{id}:
    put:
      summary: Updates a mission of a user
      tags:
      - Missions
      operationId: updateUserMission
      description: Updates a mission belonging to the current user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: mission
        in: body
        schema:
          $ref: '#/definitions/mission'
      responses:
        200:
          description: user mission updated
        422:
          description: invalid request
        401:
          description: bad token
    delete:
      summary: Deletes a mission
      tags:
      - Missions
      operationId: deleteUserMission
      description: Deletes a mission belonging to the current user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      responses:
        200:
          description: user mission deleted
        401:
          description: bad token
  /reportings.json:
    get:
      summary: Get all mission information
      tags:
      - Reporting
      operationId: getReporting
      description: Retrieves all reporting missions informations to CSV format
      security:
      - apiKey: []
      produces:
      - application/csv
      parameters:
      - name: user_id
        in: query
        type: string
        required: false
      - name: with_actions
        in: query
        type: boolean
        required: false
      - name: from
        in: query
        type: string
        required: false
      - name: to
        in: query
        type: string
        required: false
      - name: route_ids
        in: query
        type: array
        required: false
      responses:
        200:
          description: Mission with MissionAction
        204:
          description: reporting missions without result
        404:
          description: reporting missions filter by user_id of other company
        401:
          description: bad token
  /reportings.csv:
    get:
      summary: Get all mission information
      tags:
      - Reporting
      operationId: getReporting
      description: Retrieves all reporting missions informations to CSV format
      security:
      - apiKey: []
      produces:
      - application/csv
      parameters:
      - name: user_id
        in: query
        type: string
        required: false
      - name: with_actions
        in: query
        type: boolean
        required: false
      - name: from
        in: query
        type: string
        required: false
      - name: to
        in: query
        type: string
        required: false
      - name: route_ids
        in: query
        type: array
        required: false
      responses:
        200:
          description: reporting missions filter by user_id
        204:
          description: reporting missions without result
        404:
          description: reporting missions filter by user_id of other company
        401:
          description: bad token
  /routes:
    get:
      summary: Get all routes
      tags:
      - Routes
      operationId: getRoutes
      description: Retrieves all routes from the company of the current user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: user_id
        in: query
        type: string
        required: false
      - name: with_missions
        in: query
        type: boolean
        required: false
      - name: from
        in: query
        type: string
        required: false
      - name: to
        in: query
        type: string
        required: false
      responses:
        200:
          description: all routes with date filter to
        401:
          description: bad token
    post:
      summary: Creates a route for a user
      tags:
      - Routes
      operationId: createUserRoute
      description: Creates a route for the current user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: route
        in: body
        schema:
          $ref: '#/definitions/route_required'
      - name: with_missions
        in: query
        type: boolean
        required: false
      responses:
        200:
          description: user route created with mission can't steal mission from another
            company
        404:
          description: without user_id
        422:
          description: invalid request - nil date
        401:
          description: bad token
  /routes/{id}:
    put:
      summary: Updates a mission of a user
      tags:
      - Routes
      operationId: updateUserRoute
      description: Updates a route belonging to the current user
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: route
        in: body
        schema:
          $ref: '#/definitions/route_required'
      - name: delete_missions
        in: query
        type: boolean
        required: false
      - name: with_missions
        in: query
        type: boolean
        required: false
      responses:
        200:
          description: user route update with multiple missions update or create
        422:
          description: invalid request
        401:
          description: bad token
  /user_current_locations:
    get:
      summary: Get all current locations
      tags:
      - Current Locations
      operationId: getUserCurrentLocations
      description: Retrieves all current locations of users from the company of the
        current user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: all current locations
        401:
          description: bad token
  /users:
    get:
      summary: Get all users
      tags:
      - Users
      operationId: getUsers
      description: Retrieves all users from the company of the current user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: with_vehicle
        in: query
        type: boolean
        required: false
      responses:
        200:
          description: all users
        401:
          description: bad token
    post:
      summary: Creates a user
      tags:
      - Users
      operationId: createUser
      description: Create a new user in the current company
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: user
        in: body
        schema:
          $ref: '#/definitions/user_required'
      responses:
        200:
          description: user created
        422:
          description: invalid request
        401:
          description: bad token
  /users/{sync_user}:
    get:
      summary: Retrieves a user
      tags:
      - Users
      operationId: getUser
      description: Retrieves a user in the current company
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: path
        type: string
        required: true
      responses:
        200:
          description: user found
        404:
          description: user not found
        401:
          description: bad token
    put:
      summary: Updates a user
      tags:
      - Users
      operationId: updateUser
      description: Updates a user in the current company
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: path
        type: string
        required: true
      - name: user
        in: body
        schema:
          $ref: '#/definitions/user_required'
      responses:
        200:
          description: user updated
        422:
          description: invalid request
        401:
          description: bad token
    delete:
      summary: Deletes a user
      tags:
      - Users
      operationId: deleteUser
      description: Deletes a user in the current company
      security:
      - apiKey: []
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: path
        type: string
        required: true
      responses:
        200:
          description: user deleted
        401:
          description: bad token
  /users/{sync_user}/current_location:
    get:
      summary: Retrieves the current location of a user
      tags:
      - Users
      operationId: getUserUserCurrentLocation
      description: Retrieves the current location of the current user
      security:
      - apiKey: []
      produces:
      - application/json
      - application/xml
      parameters:
      - name: sync_user
        in: path
        type: string
        required: true
      responses:
        200:
          description: user current location found
        404:
          description: user current location not found
        401:
          description: bad token
definitions: !php/object "O:8:\"stdClass\":10:{s:7:\"company\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"location\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"lat\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"lon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:7:\"address\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:4:\"city\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"country\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"detail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"postalcode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"state\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"street\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"time_windows\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"start\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"end\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:13:\"user_required\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"roles\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"required\";a:3:{i:0;s:9:\"sync_user\";i:1;s:5:\"email\";i:2;s:8:\"password\";}}s:4:\"user\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"roles\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:16:\"mission_required\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":12:{s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"route_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"date\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/location\";}s:7:\"comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"reference\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"duration\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/address\";}s:12:\"time_windows\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/time_windows\";}s:12:\"mission_type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:4:{i:0;s:7:\"mission\";i:1;s:4:\"stop\";i:2;s:5:\"start\";i:3;s:5:\"pause\";}}}s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:4:\"date\";i:2;s:8:\"location\";}}s:7:\"mission\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":10:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"date\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/location\";}s:7:\"comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"reference\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"duration\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/address\";}s:12:\"time_windows\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/time_windows\";}s:12:\"mission_type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:4:{i:0;s:7:\"mission\";i:1;s:4:\"stop\";i:2;s:5:\"start\";i:3;s:5:\"pause\";}}}}s:21:\"mission_bulk_required\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":11:{s:12:\"external_ref\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"date\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/location\";}s:7:\"comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"reference\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"duration\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/address\";}s:12:\"time_windows\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/time_windows\";}s:12:\"mission_type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:4:{i:0;s:7:\"mission\";i:1;s:4:\"stop\";i:2;s:5:\"start\";i:3;s:5:\"pause\";}}}s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:4:\"date\";i:2;s:8:\"location\";}}s:14:\"route_required\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"date\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"external_ref\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"missions\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:35:\"#/definitions/mission_bulk_required\";}}}}}"
...
