---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:5:\"title\";s:27:\"Coppia.co API Documentation\";s:11:\"description\";s:41:\"API
  Documentation for Coppia.co API calls\";s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:18:\"Coppia
  API Support\";s:3:\"url\";s:21:\"www.coppia.co/support\";s:5:\"email\";s:14:\"eric@coppia.co\";}s:7:\"version\";s:5:\"1.0.0\";}"
basePath: /
paths:
  /api/v1/ideas/:
    get:
      tags:
      - Ideas
      description: Returns a list of idea object
      operationId: GetIdeas
      produces:
      - application/json
      responses:
        200:
          description: Success response when returning a list of ideas
          schema:
            $ref: '#/definitions/idea'
    post:
      tags:
      - Ideas
      description: Creates a new idea object
      operationId: CreateIdea
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: title
        in: body
        description: Title for the Idea
        required: true
        type: string
      - name: goal
        in: body
        description: Goal for the Idea
        required: true
        type: string
      - name: status
        in: body
        description: Status for the Idea
        required: true
        type: string
      - name: create_user
        in: body
        description: id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response When creating a new idea object
          schema:
            $ref: '#/definitions/create_idea'
  /api/v1/ideas/{idea_id}:
    get:
      tags:
      - Ideas
      description: Returns a single idea object
      operationId: GetIdeaById
      produces:
      - application/json
      parameters:
      - name: idea_id
        in: path
        description: id of the Idea to return from the database
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response when returning a single idea object
          schema:
            $ref: '#/definitions/idea'
    put:
      tags:
      - Ideas
      description: Returns a success message for the updated idea object
      operationId: UpdateIdeaById
      produces:
      - application/json
      parameters:
      - name: idea_id
        in: path
        description: id of the Idea to update
        required: true
        type: integer
        format: int32
      - name: title
        in: body
        description: Title for the Idea
        required: true
        type: string
      - name: goal
        in: body
        description: Goal for the Idea
        required: true
        type: string
      - name: status
        in: body
        description: Status for the Idea
        required: true
        type: string
      - name: update_user
        in: body
        description: id for the logged in user
        required: true
        optional: false
        type: integer
        format: int32
      responses:
        200:
          description: Success response when calling to update an Idea
          schema:
            $ref: '#/definitions/update_idea'
    delete:
      tags:
      - Ideas
      description: Deletes an idea object from the database. This will also remove
        the idea_snippet association as well (if any)
      operationId: delete
      produces:
      - application/json
      parameters:
      - name: idea_id
        in: path
        description: id of the Idea to delete
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response for the delete operation
          schema:
            $ref: '#/definitions/delete_idea'
  /api/v1/ideas/idea_snippet/{idea_id}:
    get:
      tags:
      - Ideas
      description: Returns an array of snippets associated to the Idea
      operationId: GetIdeaSnippetsByIdeaId
      produces:
      - application/json
      parameters:
      - name: idea_id
        in: path
        description: id of the Idea
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response when returning an array of snippets
          schema:
            $ref: '#/definitions/snippet'
  /api/v1/ideas/idea_snippet/:
    post:
      tags:
      - Ideas
      description: Creates a new idea_snippet association
      operationId: create
      produces:
      - application/json
      parameters:
      - name: idea_id
        in: body
        description: id for the idea to associate
        required: true
        type: integer
        format: int32
      - name: snippet_id
        in: body
        description: id for the snippet to associate
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: When creating a new idea_snippet association, the id for the
            newly created idea_snippet will be returned
          schema:
            $ref: '#/definitions/create_idea_snippet'
  /api/v1/interviews/:
    get:
      tags:
      - Interviews
      description: Return list of Interviews
      operationId: find
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Interview object returned in list
          schema:
            $ref: '#/definitions/interview'
    post:
      tags:
      - Interviews
      description: Creates a new Inteview
      operationId: create
      produces:
      - application/json
      parameters:
      - name: title
        in: body
        description: Title for the Interview
        required: true
        type: string
      - name: notes
        in: body
        description: Notes for the Interview
        required: true
        type: string
      - name: create_user
        in: body
        description: User Id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: When creating a new interview, the id for the newly created
            Interview will be returned
          schema:
            $ref: '#/definitions/create_interview'
  /api/v1/interviews/{interview_id}:
    get:
      tags:
      - Interviews
      description: Returns a single Interview object
      operationId: findById
      produces:
      - application/json
      parameters:
      - name: interview_id
        in: path
        description: id for the Interview user wants to get
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Returns single Interview object
          schema:
            $ref: '#/definitions/interview'
    put:
      tags:
      - Interviews
      description: Returns a success message with count of interviews updates
      operationId: updateById
      produces:
      - application/json
      parameters:
      - name: interview_id
        in: path
        description: id for the Interview to update
        required: true
        type: integer
        format: int32
      - name: title
        in: body
        description: title for the Interview
        required: true
        type: string
      - name: notes
        in: body
        description: notes for the Interview
        required: true
        type: string
      - name: update_user
        in: body
        description: id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response when calling to update an Interview
          schema:
            $ref: '#/definitions/update_interview'
    delete:
      tags:
      - Interviews
      description: Deletes an interview from the database
      operationId: delete
      produces:
      - application/json
      parameters:
      - name: interview_id
        in: path
        description: interview_id for the Interview to be deleted from the database.
          This will remove the association in the inteview_customer table as well
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response for the deleted Interview
          schema:
            $ref: '#/definitions/delete_interview'
  /api/v1/interviews/interview_customer/{interview_id}:
    get:
      tags:
      - Interviews
      description: Returns a single Customer object
      operationId: findCustomerByInterviewId
      produces:
      - application/json
      parameters:
      - name: interview_id
        in: path
        description: id for the Interview associated to the customer
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Returns single Customer object
          schema:
            $ref: '#/definitions/customer'
  /api/v1/interviews/interview_customer/:
    post:
      tags:
      - Interviews
      description: Creates a new interview_customer association
      operationId: create
      produces:
      - application/json
      parameters:
      - name: interview_id
        in: body
        description: id for the interview to associate
        required: true
        type: integer
        format: int32
      - name: customer_id
        in: body
        description: id for the customer to associate
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: When creating a new interview_customer association, the id
            for the newly created intervew_customer will be returned
          schema:
            $ref: '#/definitions/create_interview_customer'
  /api/v1/customers/:
    get:
      tags:
      - Customers
      description: Return list of Customers
      operationId: GetCustomers
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Customer object returned in list
          schema:
            $ref: '#/definitions/customer'
    post:
      tags:
      - Customers
      description: Creates a new Customer
      operationId: CreateCustomer
      produces:
      - application/json
      parameters:
      - name: first_name
        in: body
        description: First Name of the Customer
        required: true
        type: string
      - name: last_name
        in: body
        description: Last Name of the Customer
        required: true
        type: string
      - name: email
        in: body
        description: Email Address of the Customer
        required: true
        type: string
      - name: image_link
        in: body
        description: Image/Avatar url of the Customer
        required: true
        type: string
      - name: title
        in: body
        description: Title/Position of the Customer
        required: false
        type: string
      - name: company_name
        in: body
        description: Company of the Customer
        required: true
        type: string
      - name: create_user
        in: body
        description: User Id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: When creating a new customer, the id for the newly created
            Customer will be returned
          schema:
            $ref: '#/definitions/create_customer'
  /api/v1/customers/{customer_id}:
    get:
      tags:
      - Customers
      description: Returns a single Customer object
      operationId: GetCustomerById
      produces:
      - application/json
      parameters:
      - name: customer_id
        in: path
        description: id of the Customer to return
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Returns single Customer object
          schema:
            $ref: '#/definitions/customer'
    put:
      tags:
      - Customers
      description: Returns a success message with count of customer updates
      operationId: UpdateCustomerById
      produces:
      - application/json
      parameters:
      - name: customer_id
        in: path
        description: id for the customer to update
        required: true
        type: integer
        format: int32
      - name: first_name
        in: body
        description: First Name of the Customer
        required: true
        type: string
      - name: last_name
        in: body
        description: Last Name of the Customer
        required: true
        type: string
      - name: email
        in: body
        description: Email Address of the Customer
        required: true
        type: string
      - name: image_link
        in: body
        description: Image/Avatar url of the Customer
        required: true
        type: string
      - name: update_user
        in: body
        description: id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response when calling to update a Customer
          schema:
            $ref: '#/definitions/update_customer'
    delete:
      tags:
      - Customers
      description: Deletes a customer from the database
      operationId: DeleteCustomer
      produces:
      - application/json
      parameters:
      - name: customer_id
        in: path
        description: customer_id of the Customer to be deleted from the database.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response for the deleted Customer
          schema:
            $ref: '#/definitions/delete_customer'
  /api/v1/snippets/:
    get:
      tags:
      - Snippets
      description: Return list of Snippets
      operationId: GetSnippets
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Snippet object returned in list
          schema:
            $ref: '#/definitions/snippet'
    post:
      tags:
      - Snippets
      description: Creates a new Snippet
      operationId: CreateSnippet
      produces:
      - application/json
      parameters:
      - name: text
        in: body
        description: Text of the Snippet
        required: true
        type: string
      - name: interview_id
        in: body
        description: interview_id for the Snippet
        required: true
        type: integer
        format: int32
      - name: create_user
        in: body
        description: User Id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: When creating a new snippet, the id for the newly created snippet
            will be returned
          schema:
            $ref: '#/definitions/create_snippet'
  /api/v1/snippets/{snippet_id}:
    get:
      tags:
      - Snippets
      description: Returns a single Snippet object
      operationId: GetSnippetById
      produces:
      - application/json
      parameters:
      - name: snippet_id
        in: path
        description: id of the Snippet to return
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Returns single Snippet object
          schema:
            $ref: '#/definitions/snippet'
    put:
      tags:
      - Snippets
      description: Returns a success message with count of snippet updates
      operationId: UpdateSnippetById
      produces:
      - application/json
      parameters:
      - name: snippet_id
        in: path
        description: id for the snippet to update
        required: true
        type: integer
        format: int32
      - name: text
        in: body
        description: Text of the Snippet
        required: true
        type: string
      - name: interview_id
        in: body
        description: interview_id for the Snippet
        required: true
        type: integer
        format: int32
      - name: update_user
        in: body
        description: id for the logged in user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response when calling to update a Snippet
          schema:
            $ref: '#/definitions/update_snippet'
    delete:
      tags:
      - Snippets
      description: Deletes a snippet from the database
      operationId: DeleteSnippet
      produces:
      - application/json
      parameters:
      - name: snippet_id
        in: path
        description: snippet_id of the Snippet to be deleted from the database.
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: Success response for the deleted Snippet
          schema:
            $ref: '#/definitions/delete_snippet'
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":19:{s:4:\"idea\";O:8:\"stdClass\":2:{s:8:\"required\";a:8:{i:0;s:2:\"id\";i:1;s:5:\"title\";i:2;s:4:\"goal\";i:3;s:6:\"status\";i:4;s:10:\"created_by\";i:5;s:16:\"created_datetime\";i:6;s:10:\"updated_by\";i:7;s:16:\"updated_datetime\";}s:10:\"properties\";O:8:\"stdClass\":10:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:2:\"12\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:58:\"Need
  to improve onboarding in order to increase activation\";}s:4:\"goal\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:40:\"Increase
  activation rate at least by 20%\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:8:\"UNTESTED\";}s:10:\"created_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:16:\"created_datetime\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"created_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}s:10:\"updated_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:16:\"updated_datetime\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"updated_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}}}s:11:\"create_idea\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"idea_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"2\";}}}s:11:\"update_idea\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"success\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"true\";}s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:42:\"(Rows
  matched: 1  Changed: 1  Warnings: 0)\";}}}s:11:\"delete_idea\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"success\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"true\";}s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:42:\"(Rows
  matched: 1  Changed: 1  Warnings: 0)\";}}}s:19:\"create_idea_snippet\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:15:\"idea_snippet_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"4\";}}}s:5:\"Error\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:15:\"403
  Bad Request\";}}}s:9:\"interview\";O:8:\"stdClass\":2:{s:8:\"required\";a:7:{i:0;s:2:\"id\";i:1;s:5:\"title\";i:2;s:5:\"notes\";i:3;s:11:\"create_user\";i:4;s:15:\"create_datetime\";i:5;s:11:\"update_user\";i:6;s:15:\"update_datetime\";}s:10:\"properties\";O:8:\"stdClass\":9:{s:12:\"interview_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"6\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:31:\"Reporting
  Discovery w/Charlotte\";}s:5:\"notes\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:394:\"Industrial
  distributor for padlocks. Padlocks are very custom items. Shackle lengths, master
  keys, a lot of customization that goes into ordering padlocks. Can you explain this
  keying to me? Using chat would help reduce the phone traffic. Those conversations
  are relatively quick. They have 5 people with the company. They all take turns answering
  calls and 3 people are on Pure Chat every day.\";}s:10:\"created_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:16:\"created_datetime\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"created_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}s:10:\"updated_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:16:\"updated_datetime\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"updated_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}}}s:16:\"create_interview\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"interview_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"3\";}}}s:16:\"update_interview\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"interview_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"8\";}}}s:16:\"delete_interview\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"interview_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"6\";}}}s:25:\"create_interview_customer\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:21:\"interview_customer_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:2:\"44\";}}}s:8:\"customer\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:2:\"id\";i:1;s:5:\"email\";}s:10:\"properties\";O:8:\"stdClass\":13:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"6\";}s:10:\"first_name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"Eric\";}s:9:\"last_name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:11:\"Hillenbrand\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"eric@coppia.co\";}s:10:\"image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:25:\"Product
  Marketing Manager\";}s:12:\"company_name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"Web
  PT\";}s:10:\"created_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:12:\"created_date\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"created_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}s:10:\"updated_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:16:\"updated_datetime\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"updated_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}}}s:15:\"create_customer\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"customer_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"3\";}}}s:15:\"update_customer\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"customer_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"8\";}}}s:15:\"delete_customer\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"customer_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"6\";}}}s:7:\"snippet\";O:8:\"stdClass\":2:{s:8:\"required\";a:7:{i:0;s:2:\"id\";i:1;s:4:\"text\";i:2;s:12:\"interview_id\";i:3;s:10:\"created_by\";i:4;s:12:\"created_date\";i:5;s:10:\"updated_by\";i:6;s:15:\"update_datetime\";}s:10:\"properties\";O:8:\"stdClass\":9:{s:2:\"id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"2\";}s:4:\"text\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:183:\"They
  are shifting their website to be more mobile friendly. They could see who was using
  mobile devices. They saw that they needed to make a shift to make the website mobile
  friendly.\";}s:12:\"interview_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"2\";}s:10:\"created_by\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:12:\"created_date\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"created_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}s:10:\"updated_by\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:16:\"Eric
  Hillenbrand\";}s:16:\"updated_datetime\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:7:\"example\";s:24:\"2016-10-17T23:10:23.000Z\";}s:18:\"updated_image_link\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:85:\"https://d1ts43dypk8bqh.cloudfront.net/v1/avatars/88a1184e-964b-495b-86fc-92c2867c5427\";}}}s:14:\"create_snippet\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"snippet_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"3\";}}}s:14:\"update_snippet\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"snippet_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"8\";}}}s:14:\"delete_snippet\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"snippet_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:7:\"example\";s:1:\"6\";}}}}"
...
