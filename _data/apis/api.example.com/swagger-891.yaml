---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:11:\"description\";s:36:\"This is API of
  movie booking service\";s:7:\"version\";s:5:\"0.1.0\";s:5:\"title\";s:17:\"Movie
  booking API\";}"
paths:
  /auth:
    post:
      tags:
      - auth
      summary: Auth user
      description: ""
      operationId: login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Object for auth
        required: true
        schema:
          $ref: '#/definitions/Auth'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
  /cinemas:
    get:
      tags:
      - cinema
      summary: Get all cinemas
      description: ""
      operationId: getCinemas
      consumes:
      - application/json
      responses:
        200:
          description: ok
    post:
      tags:
      - cinema
      summary: Create new cinema
      description: ""
      operationId: createCinema
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Cinema object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Cinema'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
      security:
      - bearer: []
  /cinemas/list:
    get:
      tags:
      - cinema
      summary: Finds Cinemas by pagination
      description: ""
      operationId: getCinemasByPagination
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        description: page number
        required: false
        type: string
        default: "1"
      - name: limit
        in: query
        description: limit of cinemas
        required: false
        type: string
        default: "3"
      - name: sort
        in: query
        description: order list of cinemas
        required: false
        type: array
        items:
          type: string
          enum:
          - ascs
          - desc
          default: asc
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Cinema'
  /cinemas/{id}:
    get:
      tags:
      - cinema
      summary: Find cinema by ID
      description: Returns a single cinema
      operationId: getCinemaById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of cinema to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Cinema'
        400:
          description: Invalid ID supplied
        404:
          description: Cinema not found
    delete:
      tags:
      - cinema
      summary: Deletes a cinema
      description: ""
      operationId: removeCinema
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Cinema id to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Cinema not found
      security:
      - bearer: []
  /cinemas/{id}/halls:
    get:
      tags:
      - cinema
      summary: Find halls by  cinema ID
      description: Returns array of halls
      operationId: getCinemaHalls
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of cinema to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Hall'
        400:
          description: Invalid ID supplied
        404:
          description: Cinema not found
  /cinemas/{id}/movies/{from}:
    get:
      tags:
      - cinema
      summary: Find all Movies in cinema by concrete date
      description: Returns array of showTimes and movies
      operationId: getCinemaMoviesByDate
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of cinema to return
        required: true
        type: string
      - name: from
        in: path
        description: Query date in {YYYY-MM-DD} format
        required: true
        type: date
        default: "2017-07-04"
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Hall'
        400:
          description: Invalid ID supplied
        404:
          description: Cinema not found
  /cinemas/{id}/movies/:
    get:
      tags:
      - cinema
      summary: Find all Movies in cinema between dates
      description: Returns array of showTimes and movies
      operationId: getCinemaMoviesBetweenDates
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of cinema to return
        required: true
        type: string
      - name: from
        in: query
        description: ""
        required: false
        type: string
        default: "1"
      - name: to
        in: query
        description: ""
        required: false
        type: string
        default: "1"
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Hall'
        400:
          description: Invalid ID supplied
        404:
          description: Cinema not found
  /halls:
    get:
      tags:
      - hall
      summary: Get all halls
      description: ""
      operationId: getHalls
      consumes:
      - application/json
      responses:
        200:
          description: ok
  /halls/list:
    get:
      tags:
      - hall
      summary: Finds Halls by pagination
      description: ""
      operationId: getHallsByPagination
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        description: page number
        required: false
        type: string
        default: "1"
      - name: limit
        in: query
        description: limit of cinemas
        required: false
        type: string
        default: "3"
      - name: sort
        in: query
        description: order list of halls
        required: false
        type: array
        items:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Hall'
  /halls/{id}:
    get:
      tags:
      - hall
      summary: Find hall by ID
      description: Returns a single hall
      operationId: getHallById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of hall to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Hall'
        400:
          description: Invalid ID supplied
        404:
          description: Hall not found
    post:
      tags:
      - hall
      summary: Create new hall by cinema
      description: ""
      operationId: createHallByCinema
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of cinema to return
        required: true
        type: string
      - in: body
        name: body
        description: Hall object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Hall'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
  /halls/{id}/cinema:
    get:
      tags:
      - hall
      summary: Get cinema by hall
      description: ""
      operationId: getHallCinema
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of hall to return
        required: true
        type: string
      responses:
        200:
          description: ok
  /movies:
    get:
      tags:
      - movie
      summary: Get movies
      description: ""
      operationId: getMovies
      produces:
      - application/json
      responses:
        200:
          description: ok
    post:
      tags:
      - movie
      summary: Create new movie
      description: ""
      operationId: createMovie
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Movie object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Movie'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
      security:
      - bearer: []
  /movies/list:
    get:
      tags:
      - movie
      summary: Finds Movies by pagination
      description: ""
      operationId: getMoviesByPagination
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        description: page number
        required: false
        type: string
        default: "1"
      - name: limit
        in: query
        description: limit of movies
        required: false
        type: string
        default: "3"
      - name: sort
        in: query
        description: order list of movies
        required: false
        type: array
        items:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Movie'
  /movies/{id}:
    get:
      tags:
      - movie
      summary: Find movie by ID
      description: Returns a single movie
      operationId: getMovieById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of movie to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Movie'
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
    put:
      tags:
      - movie
      summary: Update movie by id
      description: ""
      operationId: updateMovie
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Movie object that needs to be updated
        required: true
        schema:
          $ref: '#/definitions/Movie'
      responses:
        200:
          description: Ok
        404:
          description: Not found
      security:
      - bearer: []
    delete:
      tags:
      - movie
      summary: Deletes a movie
      description: ""
      operationId: removeMovie
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Movie id to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
      security:
      - bearer: []
  /movies/{id}/showtimes:
    get:
      tags:
      - movie
      summary: Find showtimes by movie ID
      description: Returns array of showTimes
      operationId: getMovieShowTimes
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of movie to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Movie'
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
  /showtimes:
    get:
      tags:
      - showtime
      summary: Get all showtimes
      description: ""
      operationId: getShowTimes
      consumes:
      - application/json
      responses:
        200:
          description: ok
  /showtimes/list:
    get:
      tags:
      - showtime
      summary: Finds Showtimes by pagination
      description: ""
      operationId: getShowTimesByPagination
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        description: page number
        required: false
        type: string
        default: "1"
      - name: limit
        in: query
        description: limit of showtimes
        required: false
        type: string
        default: "3"
      - name: sort
        in: query
        description: order list of showtimes
        required: false
        type: array
        items:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Cinema'
  /showtimes/{id}:
    get:
      tags:
      - showtime
      summary: Find showtime by ID
      description: Returns a single showtime
      operationId: getShowTimeById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of showtime to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Movie'
        400:
          description: Invalid ID supplied
        404:
          description: ShowTime not found
    post:
      tags:
      - showtime
      summary: Create new showtime according to movie
      description: ""
      operationId: createShowTime
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of hall to create showtime
        required: true
        type: string
      - in: body
        name: body
        description: ShowTime object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/ShowTimeToCreate'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
      security:
      - bearer: []
  /users:
    get:
      tags:
      - manager
      summary: Get all users
      description: ""
      operationId: getUsers
      consumes:
      - application/json
      responses:
        200:
          description: ok
      security:
      - bearer: []
    post:
      tags:
      - user
      summary: Create new user
      description: ""
      operationId: createUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: User object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
  /users/search:
    get:
      tags:
      - manager
      summary: search users by query
      description: ""
      operationId: searchUsers
      consumes:
      - application/json
      parameters:
      - name: text
        in: query
        description: search text
        required: true
        type: string
        default: "1"
      responses:
        200:
          description: ok
      security:
      - bearer: []
  /users/list:
    get:
      tags:
      - manager
      summary: Finds users by pagination
      description: ""
      operationId: getUsersByPagination
      produces:
      - application/json
      parameters:
      - name: page
        in: query
        description: page number
        required: false
        type: string
        default: "1"
      - name: limit
        in: query
        description: limit of users
        required: false
        type: string
        default: "3"
      - name: sort
        in: query
        description: order list of users
        required: false
        type: array
        items:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Cinema'
      security:
      - bearer: []
  /users/{id}:
    get:
      tags:
      - manager
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of user to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      security:
      - bearer: []
    put:
      tags:
      - user
      summary: Update user
      description: ""
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of user to update
        required: true
        type: string
      - in: body
        name: body
        description: User object that needs to be updated
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Ok
        405:
          description: Validation exception
        400:
          description: Bad request
        404:
          description: User not found
    delete:
      tags:
      - manager
      summary: Deletes a user
      description: ""
      operationId: removeUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: User id to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      security:
      - bearer: []
  /users/invite:
    get:
      tags:
      - manager
      summary: Invite new manager
      description: ""
      operationId: inviteManager
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: email
        in: query
        description: invite user email
        required: true
        type: string
        default: user@gmail.com
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
      security:
      - bearer: []
  /users/notify:
    post:
      tags:
      - manager
      summary: Notify message for users
      description: ""
      operationId: notifyUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: object for send SMS
        required: true
        schema:
          $ref: '#/definitions/SMS'
      responses:
        200:
          description: OK
        405:
          description: Validation exception
        400:
          description: Bad request
      security:
      - bearer: []
  /users/manager:
    post:
      tags:
      - manager
      summary: Create new manager
      description: ""
      operationId: createManager
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: code
        in: query
        description: invite code
        required: true
        type: number
      - in: body
        name: body
        description: create new manager
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: Created
        405:
          description: Validation exception
        400:
          description: Bad request
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":9:{s:4:\"Auth\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"user@gmail.com\";}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"user\";}}}s:6:\"Cinema\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"title\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:10:\"New
  cinema\";}s:7:\"address\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"Simple
  address\";}}}s:4:\"Hall\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"title\";i:1;s:6:\"places\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:8:\"New
  Hall\";}s:6:\"places\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"example\";i:40;}}}s:5:\"Movie\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"title\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:13:\"Jurassic
  Park\";}s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"fantastic
  film\";}s:8:\"director\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"Steven
  Spielberg\";}s:12:\"timeDuration\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"example\";s:5:\"15000\";}}}s:8:\"ShowTime\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"start\";O:8:\"stdClass\":2:{s:4:\"type\";s:4:\"date\";s:7:\"example\";s:10:\"2017-07-04\";}}}s:16:\"ShowTimeToCreate\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"start\";O:8:\"stdClass\":2:{s:4:\"type\";s:4:\"date\";s:7:\"example\";s:24:\"2017-07-07T09:12:07.015Z\";}s:7:\"movieId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:24:\"595b5cf0ebd87e67c227444c\";}}}s:4:\"User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"firstName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"John\";}s:8:\"lastName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:5:\"Smith\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"user@gmail.com\";}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:8:\"password\";s:7:\"example\";s:4:\"user\";}s:11:\"phoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:9:\"+38012345\";}}}s:6:\"Invite\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"user@gmail.com\";}}}s:3:\"SMS\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"body\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"some
  sms message\";}s:2:\"to\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:13:\"+380661136305\";}s:4:\"from\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:16:\"+1
  415-903-7536 \";}}}}"
...
