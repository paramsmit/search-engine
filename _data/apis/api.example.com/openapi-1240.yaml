---
openapi: 3.0.0
info: !php/object "O:8:\"stdClass\":4:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:49:\"Seans-TypeScript-NodeJS-CRUD-REST-API-Boilerplate\";s:11:\"description\";s:107:\"A
  minimal and easy to follow example of what you need to create a CRUD style API in
  NodeJs using TypeScript\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"MIT\";s:3:\"url\";s:35:\"https://opensource.org/licenses/MIT\";}}"
paths:
  /cats:
    get:
      tags:
      - Cats
      summary: Get all cats in system
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Cats'
    post:
      tags:
      - Cats
      summary: Create a new cat in system
      requestBody:
        description: Cat Object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Cat'
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/id'
        400:
          description: Failed. Bad post data.
  /cats/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: ID of the cat that we want to match
      type: string
    get:
      tags:
      - Cats
      summary: Get cat with given ID
      parameters:
      - in: path
        name: id
        required: true
        description: Cat with id
        schema:
          $ref: '#/definitions/id'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Cat'
        404:
          description: Failed. Cat not found.
    put:
      summary: Update cat with given ID
      tags:
      - Cats
      requestBody:
        description: Cat Object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Cat'
      parameters:
      - in: path
        name: id
        required: true
        description: Cat with new values of properties
        schema:
          $ref: '#/definitions/id'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Cat'
        400:
          description: Failed. Bad post data.
        404:
          description: Failed. Cat not found.
    delete:
      summary: Delete cat with given ID
      tags:
      - Cats
      parameters:
      - in: path
        name: id
        required: true
        description: Delete Cat with id
        schema:
          $ref: '#/definitions/id'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/id'
        404:
          description: Failed. Cat not found.
produces:
- application/json
definitions: !php/object "O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"uuid\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:3:\"Cat\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"genus\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"isHungry\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"lastFedDate\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"Cats\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"cats\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Cat\";}}}}}"
...
