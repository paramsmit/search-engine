---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:14:\"HUE Charts API\";s:7:\"version\";s:5:\"2.0.0\";}"
basePath: /api/charts
paths:
  /colors/{region}/{city}/{designer}/{year}/{season}/{category}:
    get:
      description: Returns colors list of 256-color groups with number of unique colors
        per group and the group usage percentage (considering multiple unique colors
        under a group). Results accumulate amount of unique colors usage per group.n>-
        Parameters 'region', 'city' are mutually exclussive (only one of the values
        can be passed). In case of passing all of them together, the priority of correspondent
        to the parameter place in the path.n>- BY DEFAULT - 4 TOP (!) colors returned
        (unless 'top' parameter mentioned). Results are ordered by value desc (TOP
        colors first).n>- HEX color schema expect to be returned lowercased.
      parameters:
      - $ref: '#/parameters/region'
      - $ref: '#/parameters/city'
      - $ref: '#/parameters/designer'
      - $ref: '#/parameters/year'
      - $ref: '#/parameters/season'
      - $ref: '#/parameters/category'
      - name: top
        in: query
        type: integer
        required: false
        default: 4
        minimum: 1
        maximum: 256
        description: Optional parameter in case if custom amount of returned colors
          needed. Otherwise, always 4 TOP (!) colors returned.
      responses:
        200:
          description: An array of STANDARDIZED OBJECTS.
          schema:
            $ref: '#/definitions/StandardDataResponse'
          examples:
            result:
            - value: 123
              name: '#ffaa55'
              percentage: 0.565400
            - value: 1250
              name: '#666666'
              percentage: 0.023300
            - value: 4
              name: '#1616ae'
              percentage: 0.000100
  /colorGroups/{region}/{city}/{designer}/{year}/{season}/{category}:
    get:
      description: Returns 14 predefined groups (base colors). Results accumulate
        amount of unique colors usage per group.n>- Parameters 'region', 'city' are
        mutually exclussive (only one of the values can be passed. In case of passing
        all of them together, the priority of correspondent to the parameter place
        in the path.n>- All 14 color groups must present independently on whether
        the colors of those groups exist for such criteria passed.n>- Resulting values
        also include color group title (representing color title, like 'White' or
        'Green') and also the group of the color (['achr', 'chr'] - 'Achromatic'/'Chromatic').
        No groups list expected to return.n>- HEX color schema expect to be returned
        lowercased.
      parameters:
      - $ref: '#/parameters/region'
      - $ref: '#/parameters/city'
      - $ref: '#/parameters/designer'
      - $ref: '#/parameters/year'
      - $ref: '#/parameters/season'
      - $ref: '#/parameters/category'
      responses:
        200:
          description: An array of STANDARDIZED OBJECTS.
          schema:
            $ref: '#/definitions/StandardDataResponse'
          examples:
            result:
            - value: 123
              name: '#ffffff'
              percentage: 0.565400
              title: White
              group: achr
            - value: 1250
              name: '#ff0055'
              percentage: 0.023300
              title: Red
              group: chr
            - value: 0
              name: '#000000'
              percentage: 0
              title: Black
              group: achr
  /uniqueColors/{region}/{city}/{designer}/{year}/{season}/{category}:
    get:
      description: Returns a list of unique colors.n>- Parameters 'region', 'city'
        are mutually exclussive (only one of the values can be passed. In case of
        passing all of them together, the priority of correspondent to the parameter
        place in the path.n>- Resulting values also include color group (one of 14)
        the color is referred to.n>- HEX color schema expect to be returned lowercased.
      parameters:
      - $ref: '#/parameters/region'
      - $ref: '#/parameters/city'
      - $ref: '#/parameters/designer'
      - $ref: '#/parameters/year'
      - $ref: '#/parameters/season'
      - $ref: '#/parameters/category'
      responses:
        200:
          description: An array of STANDARDIZED OBJECTS.
          schema:
            $ref: '#/definitions/StandardDataResponse'
          examples:
            result:
            - name: '#337373'
              group: '#ffee88'
            - name: '#020202'
              group: '#000000'
            - name: '#f3e6f2'
              group: '#ffffff'
  /cities/{color}/{region}/{year}/{season}:
    get:
      description: Returns cities list with number of unique colors per requested
        'color' parameter and the group (color group) usage percentage (the percentage
        of colors grouped by city within requested color group).n>- The cities list
        is ordered by region (asc) by title (asc).n>- The cities listed independently
        on whether are or not the colors in the group found.n>- HEX color schema expect
        to be returned lowercased.n>- 'name' field represents predefined unique code
        of the city.
      parameters:
      - name: color
        type: string
        in: path
        required: true
        description: HEX-based value ('XXXXXX' without hash).
      - $ref: '#/parameters/region'
      - $ref: '#/parameters/year'
      - $ref: '#/parameters/season'
      responses:
        200:
          description: An array of STANDARDIZED OBJECTS.
          schema:
            $ref: '#/definitions/StandardDataResponse'
          examples:
            result:
            - value: 123
              percentage: 0.565400
              name: london
              title: London
              group: europe
            - value: 0
              percentage: 0
              name: rio
              title: Rio de Janeiro
              group: samerica
  /designersWithTopColors/{region}/{city}/{year}/{season}?page&size:
    get:
      description: Returns designers list with top four colors (of 256-color schema)
        used per filtered conditions. The number of unique colors per 256-color schema
        group is requested for 'value' field of one of four TOP resulting groups.n>-
        The list is ordered by title (designer's last name).n>- 'name' field is not
        used. For the designer unique code is used url-encoded lowercased full name
        ('title' field).n>- 'title' field represents full name.
      parameters:
      - $ref: '#/parameters/region'
      - $ref: '#/parameters/city'
      - $ref: '#/parameters/year'
      - $ref: '#/parameters/season'
      - name: page
        in: query
        type: integer
        required: false
        default: 0
        minimum: 0
        description: Requested index of the page (when paging used). Paging is always
          expect to be used for performance efficiency.
      - name: pagesize
        in: query
        type: integer
        required: false
        default: 60
        minimum: 4
        maximum: 100
        description: Aamount of page size (when paging used).
      responses:
        200:
          description: An array of STANDARDIZED OBJECTS.
          schema:
            $ref: '#/definitions/StandardDataResponse'
          examples:
            result:
            - title: Ralph Lauren
              data:
              - value: 120
                name: '#fefefe'
              - value: 50
                name: '#aaaaaa'
              - value: 35
                name: '#563456'
              - value: 3
                name: '#000000'
            - title: Slava Zaytsev
              data:
              - value: 50
                name: '#fefefe'
              - value: 4
                name: '#aaaaaa'
              - value: 3
                name: '#563456'
              - value: 1
                name: '#000000'
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":3:{s:16:\"StandardResponse\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"result\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:33:\"Container
  for main data returned.\";}s:3:\"lib\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:87:\"A
  library with any additional data available. Can be empty if no special date returned.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:79:\"Is
  mostly \"success\" for 200 status response. Might contain \"warning\" sometimes.\";s:4:\"enum\";a:3:{i:0;s:7:\"success\";i:1;s:7:\"warning\";i:2;s:5:\"error\";}}s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:73:\"A
  message of error in case of \"error\" status. Or additional info for 200.\";}s:4:\"code\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:11:\"description\";s:39:\"Code
  error in case of \"error\" response.\";}}s:8:\"required\";a:2:{i:0;s:6:\"status\";i:1;s:6:\"result\";}}s:20:\"StandardDataResponse\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/StandardResponse\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"result\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/StandardValue\";}}}}}}s:13:\"StandardValue\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"value\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:26:\"A
  numeric value if exists.\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:177:\"Optional
  field for specific data. For instance if the returning item is a part of some library
  (like cities). (The city returned would provide its name value for further using).\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:51:\"Main
  value for representing titling of a data node.\";}s:10:\"percentage\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:5:\"float\";s:11:\"description\";s:62:\"Main
  value for representing of numeric percentage (not value!)\";}s:5:\"group\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:78:\"Optional
  field for specifying if the value belongs to any of groups defined in\";}}s:8:\"required\";a:1:{i:0;s:5:\"title\";}}}"
...
