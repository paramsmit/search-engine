---
openapi: 3.0.0
info: !php/object "O:8:\"stdClass\":4:{s:7:\"version\";s:5:\"0.1.8\";s:5:\"title\";s:14:\"TamTam
  Bot API\";s:7:\"license\";O:8:\"stdClass\":1:{s:4:\"name\";s:10:\"Apache 2.0\";}s:11:\"description\";s:7162:\"#
  About\nBot API allows bots to interact with TamTam. Methods are called by sending
  HTTPS requests to [botapi.tamtam.chat](https://botapi.tamtam.chat) domain.\nBots
  are third-party applications that use TamTam features. A bot can legitimately take
  part in a conversation. It can be achieved through HTTP requests to the TamTam Bot
  API.\n## Features\nTamTam bots of the current version are able to:\n- Communicate
  with users and respond to requests\n- Recommend users complete actions via programmed
  buttons\n- Request personal data from users (name, short reference, phone number)\nWe'll
  keep working on expanding bot capabilities in the future.\n## Examples\nBots can
  be used for the following purposes:\n- Providing support, answering frequently asked
  questions\n- Sending typical information\n- Voting\n- Likes/dislikes\n- Following
  external links\n- Forwarding a user to a chat/channel\n## @PrimeBot\nWe are beta
  testing bots in TamTam now. To become a beta tester, please, contact us on **[@support](https://tt.me/support)**
  or [team@tamtam.chat](mailto:team@tamtam.chat). We'll give you access to [PrimeBot](https://tt.me/primebot),
  all TamTam bots creator. It will help you choose a unique short name for a bot and
  fill in its full name and description. With PrimeBot you can create bots as well
  as edit and delete them and browse information on bots you have created.\n#### [PrimeBot](https://tt.me/primebot)
  commands:\n`/start` &mdash; start a dialog with a bot\n\n`/create` &mdash; create
  a bot, assign the unique short name to it (from 4 to 64 characters)\n\n`/set_name
  [name]` &mdash; assign a short or full name to the bot (up to 200 characters)\n\n`/set_description
  [description]` &mdash; enter the description for the bot profile (up to 400 characters)\n\n`/set_picture
  [URL]` &mdash; enter the URL of bot's picture\n\n`/delete [username]` &mdash; delete
  the bot\n\n`/list` &mdash; show the list of all bots\n\n`/get_token` &mdash; obtain
  a token for a bot\n\n`/revoke` &mdash; request a new token\n\n`/help` &mdash; help\n\n##
  HTTP verbs\n`GET` &mdash; getting resources, parameters are transmitted via URL\n\n`POST`
  &mdash; creation of resources (for example, sending new messages)\n\n`PUT` &mdash;
  editing resources\n\n`DELETE` &mdash; deleting resources\n\n`PATCH` &mdash; patching
  resources\n## HTTP response codes\n`200` &mdash; successful operation\n\n`400` &mdash;
  invalid request\n\n`401` &mdash; authentication error\n\n`404` &mdash; resource
  not found\n\n`405` &mdash; method not allowed\n\n`429` &mdash; the number of requests
  is exceeded\n\n`503` &mdash; service unavailable\n\n## Resources format\nFor content
  requests (PUT and POST) and responses, the API uses the JSON format.\nAll strings
  are UTF-8 encoded.\nDate/time fields are represented as the number of milliseconds
  that have elapsed since 00:00 January 1, 1970 in the long format. To get it, you
  can simply multiply the UNIX timestamp by 1000. All date/time fields have a UTC
  timezone.\n## Error responses\nIn case of an error, the API returns a response with
  the corresponding HTTP code and JSON with the following fields:\n\n\n`code` - the
  string with the error key \n\n`message` - a string describing the error </br>\n\nFor
  example:\n```bash\n> http https://botapi.tamtam.chat/chats?access_token={EXAMPLE_TOKEN}\nHTTP
  / 1.1 403 Forbidden\nCache-Control: no-cache\nConnection: Keep-Alive\nContent-Length:
  57\nContent-Type: application / json; charset = utf-8\nSet-Cookie: web_ui_lang =
  ru; Path = /; Domain = .tamtam.chat; Expires = 2019-03-24T11: 45: 36.500Z\n{\n   \"code\":
  \"verify.token\",\n   \"message\": \"Invalid access_token\"\n}\n```\n## Receiving
  Notifications\nTamTam Bot API supports 2 options of receiving notifications on new
  dialog events for bots:\n- Push notifications via WebHook. To receive data via WebHook,
  you'll have to [add subscription](https://dev.tamtam.chat/#operation/subscribe);\n-
  Notifications upon request via [long polling](#operation/getUpdates) API.\nAll data
  can be received via long polling **by default** after creating the bot,\n\nBoth
  methods **cannot** be used simultaneously.\nRefer to the response schema of [/updates](https://dev.tamtam.chat/#operation/getUpdates)
  method to check all available types of updates.\n## Message buttons\nYou can program
  buttons for users answering a bot.\nTamTam supports the following types of buttons:
  \n\n`callback` &mdash; sends a notification to a bot (via WebHook or long polling)
  \n\n`link` &mdash; makes a user to follow a link \n\n`request_contact` &mdash; requests
  the user permission to access contact information (phone number, short link, email)
  \n\nYou may also send a message with an [InlineKeyboard]() type attachment to start
  creating buttons. When the user presses a button, the bot receives the answer with
  filled callback field. It is recommended to edit that message so the user can receive
  updated buttons.\n# Versioning\nAPI models and interface may change over time. To
  make sure your bot will get the right info, we strongly recommend adding API version
  number to each request. You can add it as `v` parameter to each HTTP-request. For
  instance, `v=0.1.2`.\nTo specify the data model version you are getting through
  WebHook subscription, use the `version` property in the request body of the [subscribe](https://dev.tamtam.chat/#operation/subscribe)
  request.\n# Libraries\nWe have created [Java library](https://github.com/tamtam-chat/tamtam-bot-api)
  to make using API easier.\n# Changelog\n##### Version 0.1.7\n\n- It is now **required**
  to pass `marker` parameter in [/updates](#operation/getUpdates) requests, except
  initial \n- Added full `User` object to update types: bot_started, bot_added, bot_removed,
  user_added, user_removed, chat_title_changed\n- Added `size` and `filename` to [`FileAttachment`](https://github.com/tamtam-chat/tamtam-bot-api-schema/blob/master/schema.json#L1916)\n-
  Added [`token`](https://github.com/tamtam-chat/tamtam-bot-api-schema/blob/master/schema.json#L1957)
  property to video/audio/file attachments allows you to reuse attachments uploaded
  by another user\n\n##### Version 0.1.6\n- Added method to [edit bot info](#operation/editMyInfo)\n-
  Added statistics for messages in channel\n- `Message.sender` and `UserWithPhoto.avatar_url/full_avatar_url`
  removed from required properties\n\n##### Version 0.1.5\n- Added `id` property to
  media attachments (`VideoAttachment`, `AudioAttachment`) so you can reuse attachment
  from one message in another\n- Added ability to create *linked* message: replied
  or forwarded. See `link` in `NewMessageBody`\n- `intent` property marked as required
  only for `CallbackButton`\n\n##### Version 0.1.4\n\n- Added `user_ids` parameter
  to [get members](#operation/getMembers) in chat by id\n- `attachment` property of
  [send message](#operation/sendMessage) request body marked as deprecated\n\n#####
  Version 0.1.3\n- Added method to [delete](https://dev.tamtam.chat/#operation/deleteMessages)
  messages\n- Added ability to [get](https://dev.tamtam.chat/#operation/getMessages)
  particular messages by ID\n- Added `is_admin` flag to `ChatMember`\n- Added `message`
  property to `MessageCallbackUpdate`\n- Renamed property `message` to `body` for
  `Message` schema\n- Added reusable `token` to `PhotoAttachment`. It allows to attach
  the same photo more than once.\";}"
paths: []
...
