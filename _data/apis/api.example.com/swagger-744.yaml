---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:11:\"description\";s:42:\"REST API for ACME
  Notification application\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:21:\"ACME
  Notification API\";}"
basePath: /acme/api/notification/v1
paths:
  /accounts:
    get:
      tags:
      - account
      summary: Get all accounts
      description: Return all the accounts in the system
      operationId: getAccounts
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
        400:
          description: Invalid status value
  /account/{accountId}:
    get:
      tags:
      - account
      summary: Get account detail
      description: Return the account detail including the list of users. if the user
        rol include 'traveler' then the user will have a trips list. If the user rol
        include 'manager' then the user will have a managedUsers list.
      operationId: getAccountDetail
      produces:
      - application/json
      parameters:
      - name: accountId
        in: path
        description: ID of account that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/AccountDetail'
        400:
          description: Invalid ID supplied
        404:
          description: Account not found
  /countries:
    get:
      tags:
      - country
      summary: Get all countries
      description: Return all the countries in the system
      operationId: getCountries
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
        400:
          description: Invalid status value
  /content/{contentId}:
    get:
      tags:
      - content
      summary: Get content detail
      description: Return the content detail
      operationId: getContentDetail
      produces:
      - application/json
      parameters:
      - name: contentId
        in: path
        description: ID of content that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Content'
        400:
          description: Invalid ID supplied
        404:
          description: Account not found
  /content/country/{countryId}:
    get:
      tags:
      - content
      summary: Get content detail for a country
      description: Returns the complete data of the new content to be notified of
        a specific country from the date and time indicated
      operationId: getContentDetailByCountry
      produces:
      - application/json
      parameters:
      - name: countryId
        in: path
        description: ID of the country from which we want to obtain its content
        required: true
        type: integer
        format: int64
      - name: startDate
        in: query
        description: Date from we want to get the content
        required: true
        type: string
        format: date
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Content'
        400:
          description: Invalid ID supplied
        404:
          description: Account not found
  /audit:
    post:
      tags:
      - audit
      summary: Place a notification audit for a content and user
      description: ""
      operationId: placeAudit
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: record placed for register inform the notification has done
        required: true
        schema:
          $ref: '#/definitions/Audit'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Audit'
        400:
          description: Invalid Audit
  /audit/user/{userId}:
    get:
      tags:
      - audit
      summary: Get list of audit records for a user
      description: ""
      operationId: getAuditByUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: ID of user that to retrieve his audit records
        required: true
        type: integer
        format: int64
      - name: contentId
        in: query
        description: Content from we want to limit the audit records
        required: false
        type: string
        format: date
      - name: status
        in: query
        description: Status of the audit record
        required: false
        type: string
        enum:
        - pending
        - read
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Audit'
        400:
          description: Invalid user ID supplied
        404:
          description: Audit not found
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":8:{s:7:\"Account\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"company\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:13:\"AccountDetail\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"company\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"users\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/UserDetail\";}}}}s:4:\"User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"dateCreation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:11:\"User
  Status\";}}}s:10:\"UserDetail\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":11:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"dateCreation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:11:\"User
  Status\";}s:5:\"roles\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:8:\"traveler\";i:1;s:7:\"manager\";}}}s:5:\"trips\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Travel\";}}s:12:\"managedUsers\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}}}}s:7:\"Country\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:7:\"Content\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"dateCreation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:10:\"dateUpdate\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:7:\"country\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:5:\"Audit\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"dateCreation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:10:\"dateUpdate\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:7:\"content\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"user\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:7:\"pending\";i:1;s:4:\"read\";}}}}s:6:\"Travel\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"user\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"country\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:9:\"dateStart\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:7:\"dateEnd\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}}}}"
...
