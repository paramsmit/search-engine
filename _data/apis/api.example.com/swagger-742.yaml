---
swagger: !php/object "O:8:\"stdClass\":11:{s:7:\"swagger\";s:3:\"2.0\";s:7:\"schemes\";a:1:{i:0;s:5:\"https\";}s:4:\"host\";s:21:\"vision.googleapis.com\";s:8:\"basePath\";s:1:\"/\";s:4:\"info\";O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"Google\";s:3:\"url\";s:18:\"https://google.com\";}s:11:\"description\";s:187:\"Integrates
  Google Vision features, including image labeling, face, logo, and landmark detection,
  optical character recognition (OCR), and detection of explicit content, into applications.\";s:5:\"title\";s:19:\"Google
  Cloud Vision\";s:7:\"version\";s:2:\"v1\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:37:\"https://console.developers.google.com\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:116:\"https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\";}s:8:\"x-origin\";O:8:\"stdClass\":3:{s:6:\"format\";s:6:\"google\";s:3:\"url\";s:56:\"https://vision.googleapis.com/$discovery/rest?version=v1\";s:7:\"version\";s:2:\"v1\";}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:14:\"googleapis.com\";s:13:\"x-serviceName\";s:6:\"vision\";}s:12:\"externalDocs\";O:8:\"stdClass\":1:{s:3:\"url\";s:32:\"https://cloud.google.com/vision/\";}s:19:\"securityDefinitions\";O:8:\"stdClass\":1:{s:6:\"Oauth2\";O:8:\"stdClass\":5:{s:16:\"authorizationUrl\";s:41:\"https://accounts.google.com/o/oauth2/auth\";s:11:\"description\";s:24:\"Oauth
  2.0 authentication\";s:4:\"flow\";s:8:\"implicit\";s:6:\"scopes\";O:8:\"stdClass\":1:{s:46:\"https://www.googleapis.com/auth/cloud-platform\";s:63:\"View
  and manage your data across Google Cloud Platform services\";}s:4:\"type\";s:6:\"oauth2\";}}s:10:\"parameters\";O:8:\"stdClass\":13:{s:7:\"$.xgafv\";O:8:\"stdClass\":5:{s:11:\"description\";s:16:\"V1
  error format.\";s:4:\"enum\";a:2:{i:0;s:1:\"1\";i:1;s:1:\"2\";}s:2:\"in\";s:5:\"query\";s:4:\"name\";s:7:\"$.xgafv\";s:4:\"type\";s:6:\"string\";}s:12:\"access_token\";O:8:\"stdClass\":4:{s:11:\"description\";s:19:\"OAuth
  access token.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:12:\"access_token\";s:4:\"type\";s:6:\"string\";}s:3:\"alt\";O:8:\"stdClass\":6:{s:7:\"default\";s:4:\"json\";s:11:\"description\";s:25:\"Data
  format for response.\";s:4:\"enum\";a:3:{i:0;s:4:\"json\";i:1;s:5:\"media\";i:2;s:5:\"proto\";}s:2:\"in\";s:5:\"query\";s:4:\"name\";s:3:\"alt\";s:4:\"type\";s:6:\"string\";}s:12:\"bearer_token\";O:8:\"stdClass\":4:{s:11:\"description\";s:19:\"OAuth
  bearer token.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:12:\"bearer_token\";s:4:\"type\";s:6:\"string\";}s:8:\"callback\";O:8:\"stdClass\":4:{s:11:\"description\";s:5:\"JSONP\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:8:\"callback\";s:4:\"type\";s:6:\"string\";}s:6:\"fields\";O:8:\"stdClass\":4:{s:11:\"description\";s:66:\"Selector
  specifying which fields to include in a partial response.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:6:\"fields\";s:4:\"type\";s:6:\"string\";}s:3:\"key\";O:8:\"stdClass\":4:{s:11:\"description\";s:147:\"API
  key. Your API key identifies your project and provides you with API access, quota,
  and reports. Required unless you provide an OAuth 2.0 token.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:3:\"key\";s:4:\"type\";s:6:\"string\";}s:11:\"oauth_token\";O:8:\"stdClass\":4:{s:11:\"description\";s:37:\"OAuth
  2.0 token for the current user.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:11:\"oauth_token\";s:4:\"type\";s:6:\"string\";}s:2:\"pp\";O:8:\"stdClass\":5:{s:7:\"default\";b:1;s:11:\"description\";s:22:\"Pretty-print
  response.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:2:\"pp\";s:4:\"type\";s:7:\"boolean\";}s:11:\"prettyPrint\";O:8:\"stdClass\":5:{s:7:\"default\";b:1;s:11:\"description\";s:51:\"Returns
  response with indentations and line breaks.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:11:\"prettyPrint\";s:4:\"type\";s:7:\"boolean\";}s:9:\"quotaUser\";O:8:\"stdClass\":4:{s:11:\"description\";s:150:\"Available
  to use for quota purposes for server-side applications. Can be any arbitrary string
  assigned to a user, but should not exceed 40 characters.\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:9:\"quotaUser\";s:4:\"type\";s:6:\"string\";}s:10:\"uploadType\";O:8:\"stdClass\":4:{s:11:\"description\";s:61:\"Legacy
  upload protocol for media (e.g. \"media\", \"multipart\").\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:10:\"uploadType\";s:4:\"type\";s:6:\"string\";}s:15:\"upload_protocol\";O:8:\"stdClass\":4:{s:11:\"description\";s:52:\"Upload
  protocol for media (e.g. \"raw\", \"multipart\").\";s:2:\"in\";s:5:\"query\";s:4:\"name\";s:15:\"upload_protocol\";s:4:\"type\";s:6:\"string\";}}s:4:\"tags\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"name\";s:6:\"images\";}}s:5:\"paths\";O:8:\"stdClass\":1:{s:19:\"/v1/images:annotate\";O:8:\"stdClass\":2:{s:10:\"parameters\";a:13:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/parameters/access_token\";}i:1;O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/parameters/prettyPrint\";}i:2;O:8:\"stdClass\":1:{s:4:\"$ref\";s:16:\"#/parameters/key\";}i:3;O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/parameters/quotaUser\";}i:4;O:8:\"stdClass\":1:{s:4:\"$ref\";s:15:\"#/parameters/pp\";}i:5;O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/parameters/fields\";}i:6;O:8:\"stdClass\":1:{s:4:\"$ref\";s:16:\"#/parameters/alt\";}i:7;O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/parameters/$.xgafv\";}i:8;O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/parameters/callback\";}i:9;O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/parameters/oauth_token\";}i:10;O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/parameters/uploadType\";}i:11;O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/parameters/bearer_token\";}i:12;O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/parameters/upload_protocol\";}}s:4:\"post\";O:8:\"stdClass\":6:{s:11:\"description\";s:57:\"Run
  image detection and annotation for a batch of images.\";s:11:\"operationId\";s:22:\"vision.images.annotate\";s:10:\"parameters\";a:1:{i:0;O:8:\"stdClass\":3:{s:2:\"in\";s:4:\"body\";s:4:\"name\";s:4:\"body\";s:6:\"schema\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:40:\"#/definitions/BatchAnnotateImagesRequest\";}}}s:9:\"responses\";O:8:\"stdClass\":1:{s:3:\"200\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"Successful
  response\";s:6:\"schema\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:41:\"#/definitions/BatchAnnotateImagesResponse\";}}}s:8:\"security\";a:1:{i:0;O:8:\"stdClass\":1:{s:6:\"Oauth2\";a:1:{i:0;s:46:\"https://www.googleapis.com/auth/cloud-platform\";}}}s:4:\"tags\";a:1:{i:0;s:6:\"images\";}}}}s:11:\"definitions\";O:8:\"stdClass\":24:{s:20:\"AnnotateImageRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:110:\"Request
  for performing Google Cloud Vision API tasks over a user-provided\nimage, with user-requested
  features.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"features\";O:8:\"stdClass\":3:{s:11:\"description\";s:19:\"Requested
  features.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Feature\";}s:4:\"type\";s:5:\"array\";}s:5:\"image\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Image\";s:11:\"description\";s:26:\"The
  image to be processed.\";}s:12:\"imageContext\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/ImageContext\";s:11:\"description\";s:48:\"Additional
  context that may accompany the image.\";}}s:4:\"type\";s:6:\"object\";}s:21:\"AnnotateImageResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Response
  to an image annotation request.\";s:10:\"properties\";O:8:\"stdClass\":8:{s:5:\"error\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Status\";s:11:\"description\";s:149:\"If
  set, represents the error message for the operation.\nNote that filled-in image
  annotations are guaranteed to be\ncorrect, even when `error` is set.\";}s:15:\"faceAnnotations\";O:8:\"stdClass\":3:{s:11:\"description\";s:54:\"If
  present, face detection has completed successfully.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/FaceAnnotation\";}s:4:\"type\";s:5:\"array\";}s:25:\"imagePropertiesAnnotation\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:29:\"#/definitions/ImageProperties\";s:11:\"description\";s:57:\"If
  present, image properties were extracted successfully.\";}s:16:\"labelAnnotations\";O:8:\"stdClass\":3:{s:11:\"description\";s:55:\"If
  present, label detection has completed successfully.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/EntityAnnotation\";}s:4:\"type\";s:5:\"array\";}s:19:\"landmarkAnnotations\";O:8:\"stdClass\":3:{s:11:\"description\";s:58:\"If
  present, landmark detection has completed successfully.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/EntityAnnotation\";}s:4:\"type\";s:5:\"array\";}s:15:\"logoAnnotations\";O:8:\"stdClass\":3:{s:11:\"description\";s:54:\"If
  present, logo detection has completed successfully.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/EntityAnnotation\";}s:4:\"type\";s:5:\"array\";}s:20:\"safeSearchAnnotation\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/SafeSearchAnnotation\";s:11:\"description\";s:62:\"If
  present, safe-search annotation has completed successfully.\";}s:15:\"textAnnotations\";O:8:\"stdClass\":3:{s:11:\"description\";s:60:\"If
  present, text (OCR) detection has completed successfully.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/EntityAnnotation\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:26:\"BatchAnnotateImagesRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:74:\"Multiple
  image annotation requests are batched into a single service call.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"requests\";O:8:\"stdClass\":3:{s:11:\"description\";s:52:\"Individual
  image annotation requests for this batch.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/AnnotateImageRequest\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:27:\"BatchAnnotateImagesResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"Response
  to a batch image annotation request.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"responses\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"Individual
  responses to image annotation requests within the batch.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:35:\"#/definitions/AnnotateImageResponse\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:12:\"BoundingPoly\";O:8:\"stdClass\":3:{s:11:\"description\";s:53:\"A
  bounding polygon for the detected image annotation.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"vertices\";O:8:\"stdClass\":3:{s:11:\"description\";s:30:\"The
  bounding polygon vertices.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Vertex\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Color\";O:8:\"stdClass\":3:{s:11:\"description\";s:3701:\"Represents
  a color in the RGBA color space. This representation is designed\nfor simplicity
  of conversion to/from color representations in various\nlanguages over compactness;
  for example, the fields of this representation\ncan be trivially provided to the
  constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to
  UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little
  work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as
  well. Here are some examples:\n\nExample (Java):\n\n     import com.google.type.Color;\n\n
  \    // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float
  alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           :
  1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n
  \          protocolor.getBlue(),\n           alpha);\n     }\n\n     public static
  Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n
  \      float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n
  \      float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n
  \              .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green
  / denominator)\n               .setBlue(blue / denominator);\n       int alpha =
  color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n
  \                .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n
  \                .build());\n       }\n       return resultBuilder.build();\n     }\n
  \    // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color*
  protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor
  green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper
  = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper !=
  nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor
  colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color*
  toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if
  (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return
  nil;\n         }\n         Color* result = [Color alloc] init];\n         [result
  setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n
  \        if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n
  \        }\n         [result autorelease];\n         return result;\n    }\n    //
  ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color)
  {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green
  || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac
  * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac
  * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red,
  green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n
  \      var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams,
  ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red,
  green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n
  \     var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n
  \     var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n
  \        resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n
  \     return resultBuilder.join('');\n    };\n\n    // ...\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"alpha\";O:8:\"stdClass\":3:{s:11:\"description\";s:616:\"The
  fraction of this color that should be applied to the pixel. That is,\nthe final
  pixel color is defined by the equation:\n\n  pixel color = alpha * (this color)
  + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds
  to a solid color, whereas\na value of 0.0 corresponds to a completely transparent
  color. This\nuses a wrapper message rather than a simple float scalar so that it
  is\npossible to distinguish between a default value and the value being unset.\nIf
  omitted, this color object is to be rendered as a solid color\n(as if the alpha
  value had been explicitly given with a value of 1.0).\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:4:\"blue\";O:8:\"stdClass\":3:{s:11:\"description\";s:66:\"The
  amount of blue in the color as a value in the interval [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:5:\"green\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"The
  amount of green in the color as a value in the interval [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:3:\"red\";O:8:\"stdClass\":3:{s:11:\"description\";s:65:\"The
  amount of red in the color as a value in the interval [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:9:\"ColorInfo\";O:8:\"stdClass\":3:{s:11:\"description\";s:118:\"Color
  information consists of RGB channels, score, and the fraction of\nthe image that
  the color occupies in the image.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"color\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Color\";s:11:\"description\";s:28:\"RGB
  components of the color.\";}s:13:\"pixelFraction\";O:8:\"stdClass\":3:{s:11:\"description\";s:78:\"The
  fraction of pixels the color occupies in the image.\nValue in range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:5:\"score\";O:8:\"stdClass\":3:{s:11:\"description\";s:59:\"Image-specific
  score for this color. Value in range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:24:\"DominantColorsAnnotation\";O:8:\"stdClass\":3:{s:11:\"description\";s:54:\"Set
  of dominant colors and their corresponding scores.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"colors\";O:8:\"stdClass\":3:{s:11:\"description\";s:53:\"RGB
  color values with their score and pixel fraction.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/ColorInfo\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:16:\"EntityAnnotation\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Set
  of detected entity features.\";s:10:\"properties\";O:8:\"stdClass\":9:{s:12:\"boundingPoly\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/BoundingPoly\";s:11:\"description\";s:271:\"Image
  region to which this entity belongs. Currently not produced\nfor `LABEL_DETECTION`
  features. For `TEXT_DETECTION` (OCR), `boundingPoly`s\nare produced for the entire
  text detected in an image region, followed by\n`boundingPoly`s for each word within
  the detected text.\";}s:10:\"confidence\";O:8:\"stdClass\":3:{s:11:\"description\";s:216:\"The
  accuracy of the entity detection in an image.\nFor example, for an image in which
  the \"Eiffel Tower\" entity is detected,\nthis field represents the confidence that
  there is a tower in the query\nimage. Range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:63:\"Entity
  textual description, expressed in its `locale` language.\";s:4:\"type\";s:6:\"string\";}s:6:\"locale\";O:8:\"stdClass\":2:{s:11:\"description\";s:88:\"The
  language code for the locale in which the entity textual\n`description` is expressed.\";s:4:\"type\";s:6:\"string\";}s:9:\"locations\";O:8:\"stdClass\":3:{s:11:\"description\";s:313:\"The
  location information for the detected entity. Multiple\n`LocationInfo` elements
  can be present because one location may\nindicate the location of the scene in the
  image, and another location\nmay indicate the location of the place where the image
  was taken.\nLocation information is usually present for landmarks.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/LocationInfo\";}s:4:\"type\";s:5:\"array\";}s:3:\"mid\";O:8:\"stdClass\":2:{s:11:\"description\";s:131:\"Opaque
  entity ID. Some IDs may be available in\n[Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\";s:4:\"type\";s:6:\"string\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"description\";s:127:\"Some
  entities may have optional user-supplied `Property` (name/value)\nfields, such a
  score or string that qualifies the entity.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Property\";}s:4:\"type\";s:5:\"array\";}s:5:\"score\";O:8:\"stdClass\":3:{s:11:\"description\";s:42:\"Overall
  score of the result. Range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:10:\"topicality\";O:8:\"stdClass\":3:{s:11:\"description\";s:337:\"The
  relevancy of the ICA (Image Content Annotation) label to the\nimage. For example,
  the relevancy of \"tower\" is likely higher to an image\ncontaining the detected
  \"Eiffel Tower\" than to an image containing a\ndetected distant towering building,
  even though the confidence that\nthere is a tower in each image may be the same.
  Range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:14:\"FaceAnnotation\";O:8:\"stdClass\":3:{s:11:\"description\";s:64:\"A
  face annotation object contains the results of face detection.\";s:10:\"properties\";O:8:\"stdClass\":15:{s:15:\"angerLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:17:\"Anger
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:17:\"blurredLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:19:\"Blurred
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:12:\"boundingPoly\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/BoundingPoly\";s:11:\"description\";s:446:\"The
  bounding polygon around the face. The coordinates of the bounding box\nare in the
  original image's scale, as returned in `ImageParams`.\nThe bounding box is computed
  to \"frame\" the face in accordance with human\nexpectations. It is based on the
  landmarker results.\nNote that one or more x and/or y coordinates may not be generated
  in the\n`BoundingPoly` (the polygon will be unbounded) if only a partial face\nappears
  in the image to be annotated.\";}s:19:\"detectionConfidence\";O:8:\"stdClass\":3:{s:11:\"description\";s:35:\"Detection
  confidence. Range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:14:\"fdBoundingPoly\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/BoundingPoly\";s:11:\"description\";s:373:\"The
  `fd_bounding_poly` bounding polygon is tighter than the\n`boundingPoly`, and encloses
  only the skin part of the face. Typically, it\nis used to eliminate the face from
  any image analysis that detects the\n\"amount of skin\" visible in an image. It
  is not based on the\nlandmarker results, only on the initial face detection, hence\nthe
  <code>fd</code> (face detection) prefix.\";}s:18:\"headwearLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:20:\"Headwear
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:13:\"joyLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:15:\"Joy
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:21:\"landmarkingConfidence\";O:8:\"stdClass\":3:{s:11:\"description\";s:42:\"Face
  landmarking confidence. Range [0, 1].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:9:\"landmarks\";O:8:\"stdClass\":3:{s:11:\"description\";s:24:\"Detected
  face landmarks.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Landmark\";}s:4:\"type\";s:5:\"array\";}s:8:\"panAngle\";O:8:\"stdClass\":3:{s:11:\"description\";s:158:\"Yaw
  angle, which indicates the leftward/rightward angle that the face is\npointing relative
  to the vertical plane perpendicular to the image. Range\n[-180,180].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:9:\"rollAngle\";O:8:\"stdClass\":3:{s:11:\"description\";s:178:\"Roll
  angle, which indicates the amount of clockwise/anti-clockwise rotation\nof the face
  relative to the image vertical about the axis perpendicular to\nthe face. Range
  [-180,180].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:16:\"sorrowLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:18:\"Sorrow
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:18:\"surpriseLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:20:\"Surprise
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:9:\"tiltAngle\";O:8:\"stdClass\":3:{s:11:\"description\";s:142:\"Pitch
  angle, which indicates the upwards/downwards angle that the face is\npointing relative
  to the image's horizontal plane. Range [-180,180].\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:22:\"underExposedLikelihood\";O:8:\"stdClass\":3:{s:11:\"description\";s:25:\"Under-exposed
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Feature\";O:8:\"stdClass\":3:{s:11:\"description\";s:275:\"Users
  describe the type of Google Cloud Vision API tasks to perform over\nimages by using
  *Feature*s. Each Feature indicates a type of image\ndetection task to perform. Features
  encode the Cloud Vision API\nvertical to operate on and the number of top-scoring
  results to return.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"maxResults\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"Maximum
  number of results of this type.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"type\";O:8:\"stdClass\":3:{s:11:\"description\";s:17:\"The
  feature type.\";s:4:\"enum\";a:8:{i:0;s:16:\"TYPE_UNSPECIFIED\";i:1;s:14:\"FACE_DETECTION\";i:2;s:18:\"LANDMARK_DETECTION\";i:3;s:14:\"LOGO_DETECTION\";i:4;s:15:\"LABEL_DETECTION\";i:5;s:14:\"TEXT_DETECTION\";i:6;s:21:\"SAFE_SEARCH_DETECTION\";i:7;s:16:\"IMAGE_PROPERTIES\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Image\";O:8:\"stdClass\":3:{s:11:\"description\";s:59:\"Client
  image to perform Google Cloud Vision API tasks over.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"content\";O:8:\"stdClass\":3:{s:11:\"description\";s:170:\"Image
  content, represented as a stream of bytes.\nNote: as with all `bytes` fields, protobuffers
  use a pure binary\nrepresentation, whereas JSON representations use base64.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:6:\"source\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ImageSource\";s:11:\"description\";s:174:\"Google
  Cloud Storage image location. If both `content` and `source`\nare provided for an
  image, `content` takes precedence and is\nused to perform the image annotation request.\";}}s:4:\"type\";s:6:\"object\";}s:12:\"ImageContext\";O:8:\"stdClass\":3:{s:11:\"description\";s:49:\"Image
  context and/or feature-specific parameters.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:13:\"languageHints\";O:8:\"stdClass\":3:{s:11:\"description\";s:547:\"List
  of languages to use for TEXT_DETECTION. In most cases, an empty value\nyields the
  best results since it enables automatic language detection. For\nlanguages based
  on the Latin alphabet, setting `language_hints` is not\nneeded. In rare cases, when
  the language of the text in the image is known,\nsetting a hint will help get better
  results (although it will be a\nsignificant hindrance if the hint is wrong). Text
  detection returns an\nerror if one or more of the specified languages is not one
  of the\n[supported languages](/vision/docs/languages).\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"latLongRect\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/LatLongRect\";s:11:\"description\";s:60:\"lat/long
  rectangle that specifies the location of the image.\";}}s:4:\"type\";s:6:\"object\";}s:15:\"ImageProperties\";O:8:\"stdClass\":3:{s:11:\"description\";s:49:\"Stores
  image properties, such as dominant colors.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:14:\"dominantColors\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:38:\"#/definitions/DominantColorsAnnotation\";s:11:\"description\";s:51:\"If
  present, dominant colors completed successfully.\";}}s:4:\"type\";s:6:\"object\";}s:11:\"ImageSource\";O:8:\"stdClass\":3:{s:11:\"description\";s:60:\"External
  image source (Google Cloud Storage image location).\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"gcsImageUri\";O:8:\"stdClass\":2:{s:11:\"description\";s:265:\"Google
  Cloud Storage image URI, which must be in the following form:\n`gs://bucket_name/object_name`
  (for details, see\n[Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris)).\nNOTE:
  Cloud Storage object versioning is not supported.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Landmark\";O:8:\"stdClass\":3:{s:11:\"description\";s:242:\"A
  face-specific landmark (for example, a face feature).\nLandmark positions may fall
  outside the bounds of the image\nif the face is near one or more edges of the image.\nTherefore
  it is NOT guaranteed that `0 <= x < width` or\n`0 <= y < height`.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"position\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Position\";s:11:\"description\";s:23:\"Face
  landmark position.\";}s:4:\"type\";O:8:\"stdClass\":3:{s:11:\"description\";s:19:\"Face
  landmark type.\";s:4:\"enum\";a:35:{i:0;s:16:\"UNKNOWN_LANDMARK\";i:1;s:8:\"LEFT_EYE\";i:2;s:9:\"RIGHT_EYE\";i:3;s:20:\"LEFT_OF_LEFT_EYEBROW\";i:4;s:21:\"RIGHT_OF_LEFT_EYEBROW\";i:5;s:21:\"LEFT_OF_RIGHT_EYEBROW\";i:6;s:22:\"RIGHT_OF_RIGHT_EYEBROW\";i:7;s:21:\"MIDPOINT_BETWEEN_EYES\";i:8;s:8:\"NOSE_TIP\";i:9;s:9:\"UPPER_LIP\";i:10;s:9:\"LOWER_LIP\";i:11;s:10:\"MOUTH_LEFT\";i:12;s:11:\"MOUTH_RIGHT\";i:13;s:12:\"MOUTH_CENTER\";i:14;s:17:\"NOSE_BOTTOM_RIGHT\";i:15;s:16:\"NOSE_BOTTOM_LEFT\";i:16;s:18:\"NOSE_BOTTOM_CENTER\";i:17;s:21:\"LEFT_EYE_TOP_BOUNDARY\";i:18;s:21:\"LEFT_EYE_RIGHT_CORNER\";i:19;s:24:\"LEFT_EYE_BOTTOM_BOUNDARY\";i:20;s:20:\"LEFT_EYE_LEFT_CORNER\";i:21;s:22:\"RIGHT_EYE_TOP_BOUNDARY\";i:22;s:22:\"RIGHT_EYE_RIGHT_CORNER\";i:23;s:25:\"RIGHT_EYE_BOTTOM_BOUNDARY\";i:24;s:21:\"RIGHT_EYE_LEFT_CORNER\";i:25;s:27:\"LEFT_EYEBROW_UPPER_MIDPOINT\";i:26;s:28:\"RIGHT_EYEBROW_UPPER_MIDPOINT\";i:27;s:16:\"LEFT_EAR_TRAGION\";i:28;s:17:\"RIGHT_EAR_TRAGION\";i:29;s:14:\"LEFT_EYE_PUPIL\";i:30;s:15:\"RIGHT_EYE_PUPIL\";i:31;s:17:\"FOREHEAD_GLABELLA\";i:32;s:13:\"CHIN_GNATHION\";i:33;s:16:\"CHIN_LEFT_GONION\";i:34;s:17:\"CHIN_RIGHT_GONION\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"LatLng\";O:8:\"stdClass\":3:{s:11:\"description\";s:1826:\"An
  object representing a latitude/longitude pair. This is expressed as a pair\nof doubles
  representing degrees latitude and degrees longitude. Unless\nspecified otherwise,
  this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>.
  Values must be within normalized ranges.\n\nExample of normalization code in Python:\n\n
  \   def NormalizeLongitude(longitude):\n      \"\"\"Wraps decimal degrees longitude
  to [-180.0, 180.0].\"\"\"\n      q, r = divmod(longitude, 360.0)\n      if r > 180.0
  or (r == 180.0 and q <= -1.0):\n        return r - 360.0\n      return r\n\n    def
  NormalizeLatLng(latitude, longitude):\n      \"\"\"Wraps decimal degrees latitude
  and longitude to\n      [-90.0, 90.0] and [-180.0, 180.0], respectively.\"\"\"\n
  \     r = latitude % 360.0\n      if r <= 90.0:\n        return r, NormalizeLongitude(longitude)\n
  \     elif r >= 270.0:\n        return r - 360, NormalizeLongitude(longitude)\n
  \     else:\n        return 180 - r, NormalizeLongitude(longitude + 180.0)\n\n    assert
  180.0 == NormalizeLongitude(180.0)\n    assert -180.0 == NormalizeLongitude(-180.0)\n
  \   assert -179.0 == NormalizeLongitude(181.0)\n    assert (0.0, 0.0) == NormalizeLatLng(360.0,
  0.0)\n    assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)\n    assert (85.0, 180.0)
  == NormalizeLatLng(95.0, 0.0)\n    assert (-85.0, -170.0) == NormalizeLatLng(-95.0,
  10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)\n    assert (-90.0,
  -10.0) == NormalizeLatLng(-90.0, -10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(-180.0,
  10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)\n    assert (-90.0,
  10.0) == NormalizeLatLng(270.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(-270.0,
  10.0)\n\nThe code in logs/storage/validator/logs_validator_traits.cc treats this
  type\nas if it were annotated as ST_LOCATION.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"latitude\";O:8:\"stdClass\":3:{s:11:\"description\";s:64:\"The
  latitude in degrees. It must be in the range [-90.0, +90.0].\";s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"The
  longitude in degrees. It must be in the range [-180.0, +180.0].\";s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:11:\"LatLongRect\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"Rectangle
  determined by min and max `LatLng` pairs.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"maxLatLng\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/LatLng\";s:11:\"description\";s:18:\"Max
  lat/long pair.\";}s:9:\"minLatLng\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/LatLng\";s:11:\"description\";s:18:\"Min
  lat/long pair.\";}}s:4:\"type\";s:6:\"object\";}s:12:\"LocationInfo\";O:8:\"stdClass\":3:{s:11:\"description\";s:37:\"Detected
  entity location information.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"latLng\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/LatLng\";s:11:\"description\";s:30:\"lat/long
  location coordinates.\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Position\";O:8:\"stdClass\":3:{s:11:\"description\";s:195:\"A
  3D position in the image, used primarily for Face detection landmarks.\nA valid
  Position must have both x and y coordinates.\nThe position coordinates are in the
  same scale as the original image.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:1:\"x\";O:8:\"stdClass\":3:{s:11:\"description\";s:13:\"X
  coordinate.\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:1:\"y\";O:8:\"stdClass\":3:{s:11:\"description\";s:13:\"Y
  coordinate.\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:1:\"z\";O:8:\"stdClass\":3:{s:11:\"description\";s:24:\"Z
  coordinate (or depth).\";s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Property\";O:8:\"stdClass\":3:{s:11:\"description\";s:57:\"A
  `Property` consists of a user-supplied name/value pair.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:21:\"Name
  of the property.\";s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":2:{s:11:\"description\";s:22:\"Value
  of the property.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:20:\"SafeSearchAnnotation\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"adult\";O:8:\"stdClass\":3:{s:11:\"description\";s:54:\"Represents
  the adult content likelihood for the image.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:7:\"medical\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Likelihood
  that this is a medical image.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:5:\"spoof\";O:8:\"stdClass\":3:{s:11:\"description\";s:133:\"Spoof
  likelihood. The likelihood that an modification\nwas made to the image's canonical
  version to make it appear\nfunny or offensive.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}s:8:\"violence\";O:8:\"stdClass\":3:{s:11:\"description\";s:20:\"Violence
  likelihood.\";s:4:\"enum\";a:6:{i:0;s:7:\"UNKNOWN\";i:1;s:13:\"VERY_UNLIKELY\";i:2;s:8:\"UNLIKELY\";i:3;s:8:\"POSSIBLE\";i:4;s:6:\"LIKELY\";i:5;s:11:\"VERY_LIKELY\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Status\";O:8:\"stdClass\":3:{s:11:\"description\";s:2446:\"The
  `Status` type defines a logical error model that is suitable for different\nprogramming
  environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc).
  The error model is designed to be:\n\n- Simple to use and understand for most users\n-
  Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains
  three pieces of data: error code, error message,\nand error details. The error code
  should be an enum value of\ngoogle.rpc.Code, but it may accept additional error
  codes if needed.  The\nerror message should be a developer-facing English message
  that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror
  message is needed, put the localized message in the error details or\nlocalize it
  in the client. The optional error details may contain arbitrary\ninformation about
  the error. There is a predefined set of error detail types\nin the package `google.rpc`
  which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status`
  message is the logical representation of the error model, but it\nis not necessarily
  the actual wire format. When the `Status` message is\nexposed in different client
  libraries and different wire protocols, it can be\nmapped differently. For example,
  it will likely be mapped to some exceptions\nin Java, but more likely mapped to
  some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message
  can be used in a variety of\nenvironments, either with or without APIs, to provide
  a\nconsistent developer experience across different environments.\n\nExample uses
  of this error model include:\n\n- Partial errors. If a service needs to return partial
  errors to the client,\n    it may embed the `Status` in the normal response to indicate
  the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps.
  Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch
  operations. If a client uses batch request and batch response, the\n    `Status`
  message should be used directly inside batch response, one for\n    each error sub-response.\n\n-
  Asynchronous operations. If an API call embeds asynchronous operation\n    results
  in its response, the status of those operations should be\n    represented directly
  using the `Status` message.\n\n- Logging. If some API errors are stored in logs,
  the message `Status` could\n    be used directly after any stripping needed for
  security/privacy reasons.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"code\";O:8:\"stdClass\":3:{s:11:\"description\";s:66:\"The
  status code, which should be an enum value of google.rpc.Code.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:7:\"details\";O:8:\"stdClass\":3:{s:11:\"description\";s:110:\"A
  list of messages that carry the error details.  There will be a\ncommon set of message
  types for APIs to use.\";s:5:\"items\";O:8:\"stdClass\":2:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:7:\"message\";O:8:\"stdClass\":2:{s:11:\"description\";s:188:\"A
  developer-facing error message, which should be in English. Any\nuser-facing error
  message should be localized and sent in the\ngoogle.rpc.Status.details field, or
  localized by the client.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Vertex\";O:8:\"stdClass\":3:{s:11:\"description\";s:118:\"A
  vertex represents a 2D point in the image.\nNOTE: the vertex coordinates are in
  the same scale as the original image.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:1:\"x\";O:8:\"stdClass\":3:{s:11:\"description\";s:13:\"X
  coordinate.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:1:\"y\";O:8:\"stdClass\":3:{s:11:\"description\";s:13:\"Y
  coordinate.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}}}"
info: !php/object "O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"Google\";s:3:\"url\";s:18:\"https://google.com\";}s:11:\"description\";s:187:\"Integrates
  Google Vision features, including image labeling, face, logo, and landmark detection,
  optical character recognition (OCR), and detection of explicit content, into applications.\";s:5:\"title\";s:19:\"Google
  Cloud Vision\";s:7:\"version\";s:2:\"v1\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:37:\"https://console.developers.google.com\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:116:\"https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\";}s:8:\"x-origin\";O:8:\"stdClass\":3:{s:6:\"format\";s:6:\"google\";s:3:\"url\";s:56:\"https://vision.googleapis.com/$discovery/rest?version=v1\";s:7:\"version\";s:2:\"v1\";}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:14:\"googleapis.com\";s:13:\"x-serviceName\";s:6:\"vision\";}"
paths: []
...
