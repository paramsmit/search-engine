---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:18:\"StackOverflow
  Lite\";s:11:\"description\";s:114:\"Stackoverflow Lite is a webapp where develpers
  and people in tech ask and find solutions to tech related problems \";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:22:\"julietezekwe@gmail.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"ISC\";s:3:\"url\";s:35:\"https://opensource.org/licenses/ISC\";}}"
host: ""
basePath: /api/v1/
paths:
  /auth/signup:
    post:
      summary: User signup
      tags:
      - Users
      description: Register a user in the platform
      parameters:
      - name: user
        in: body
        description: A new user that we want to register
        required: true
        schema:
          $ref: '#/definitions/UserSignUp'
      produces:
      - application/json
      responses:
        201:
          description: Signed up successfully
  /auth/users:
    get:
      tags:
      - Users
      summary: Get all Users
      responses:
        201:
          description: success
          schema:
            $ref: '#/definitions/FoundUsers'
  /auth/{userId}:
    get:
      tags:
      - Users
      summary: Get a user with given ID
      parameters:
      - name: userId
        in: path
        description: The id of the user to be found
        required: "true"
        type: integer
        format: int64
      responses:
        201:
          description: success
          schema:
            $ref: '#/definitions/FoundUsers'
        400:
          description: Invalid ID supplied
  /auth/login:
    post:
      summary: User login
      tags:
      - Users
      description: Login a user
      parameters:
      - name: user
        in: body
        description: A user that wants to login
        required: true
        schema:
          $ref: '#/definitions/UserLogin'
      produces:
      - application/json
      responses:
        201:
          description: logged in successfully
  /question:
    post:
      summary: Ask a question
      tags:
      - Questions
      description: Ask a question
      parameters:
      - in: header
        name: Authorization
        description: Enter token
        type: string
        required: true
      - name: question
        in: body
        description: A new question that the user want to ask
        required: true
        schema:
          $ref: '#/definitions/QuestionCreate'
      produces:
      - application/json
      responses:
        201:
          description: succefully created a question
  /questions:
    get:
      tags:
      - Questions
      summary: Get all Questions
      responses:
        201:
          description: success
          schema:
            $ref: '#/definitions/FoundQuestions'
  /question/{questionId}:
    delete:
      summary: Remove a question
      tags:
      - Questions
      description: This can only be done by the logged in user.
      parameters:
      - in: header
        name: Authorization
        description: Enter token
        type: string
        required: true
      - name: questionId
        in: path
        description: The id of the question to be deleted
        required: "true"
        type: integer
        format: int64
      responses:
        201:
          description: Question successfully deleted
    get:
      tags:
      - Questions
      summary: Get a question with given ID
      parameters:
      - name: questionId
        in: path
        description: The id of the question to be found
        required: "true"
        type: integer
        format: int64
      responses:
        201:
          description: success
          schema:
            $ref: '#/definitions/FoundQuestions'
        400:
          description: Invalid ID supplied
  /question/{userId}/questions:
    get:
      tags:
      - Questions
      summary: Get questions that belongs to a given user ID
      parameters:
      - name: userId
        in: path
        description: The id of the user whose questions are to be found
        required: "true"
        type: integer
        format: int64
      responses:
        201:
          description: success
          schema:
            $ref: '#/definitions/FoundQuestions'
        400:
          description: Invalid ID supplied
  /question/{questionId}/answer:
    post:
      summary: Add an answer for a question
      tags:
      - Answers
      description: Respond to a question
      parameters:
      - in: header
        name: Authorization
        description: Enter token
        type: string
        required: true
      - name: questionId
        in: path
        description: The id of the question the answer is for
        required: "true"
        type: integer
        format: int64
      - name: answer
        in: body
        description: Add a new answer to a question
        schema:
          $ref: '#/definitions/AnswersCreate'
      produces:
      - application/json
      responses:
        201:
          description: Answer sucessfully created
  /question/{questionId}/answers:
    get:
      tags:
      - Answers
      summary: Get all answers to a question
      parameters:
      - name: questionId
        in: path
        description: The id of the question to get all answers
        required: "true"
        type: integer
        format: int64
      responses:
        200:
          description: Questions Answers is found
          schema:
            $ref: '#/definitions/FoundAnswers'
        400:
          description: Invalid ID supplied
produces:
- application/json
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":7:{s:10:\"UserSignUp\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:5:\"email\";i:2;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}}}s:9:\"UserLogin\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"uniqueItems\";b:1;}}}s:14:\"QuestionCreate\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"title\";i:1;s:4:\"body\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"body\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"FoundUsers\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:5:\"users\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"users\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}}s:14:\"FoundQuestions\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:9:\"questions\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"questions\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}}s:12:\"FoundAnswers\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:7:\"answers\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"answers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}}s:13:\"AnswersCreate\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:4:\"body\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"body\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
