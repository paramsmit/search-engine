---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:7:\"payment\";}"
basePath: /api
paths:
  /Users/{id}/accessTokens/{fk}:
    get:
      tags:
      - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
      - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
    put:
      tags:
      - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/AccessToken'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /Users/{id}/accessTokens:
    get:
      tags:
      - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
      - name: filter
        in: query
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
      - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/AccessToken'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
      - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
  /Users/{id}/accessTokens/count:
    get:
      tags:
      - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Users:
    post:
      tags:
      - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
      - User
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
      - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/{id}/exists:
    get:
      tags:
      - User
      summary: Check whether a model instance exists in the data source.
      operationId: User.exists__get_Users_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Users/{id}:
    head:
      tags:
      - User
      summary: Check whether a model instance exists in the data source.
      operationId: User.exists__head_Users_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - User
      summary: Find a model instance by id from the data source.
      operationId: User.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
      - User
      summary: Delete a model instance by id from the data source.
      operationId: User.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - User
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: User.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/User'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
      - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
      - User
      summary: Update instances of the model matched by where from the data source.
      operationId: User.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Users/count:
    get:
      tags:
      - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Users/change-stream:
    post:
      tags:
      - User
      summary: Create a change stream.
      operationId: User.createChangeStream__post_Users_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - User
      summary: Create a change stream.
      operationId: User.createChangeStream__get_Users_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Users/login:
    post:
      tags:
      - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
      - name: credentials
        in: body
        required: true
        schema:
          type: object
      - name: include
        in: query
        description: Related objects to include in the response. See the description
          of return value for more details.
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            description: The response body contains properties of the AccessToken
              created on login.nDepending on the value of `include` parameter, the
              body may contain additional properties:nn  - `user` - `{User}` - Data
              of the currently logged in user. (`include=user`)nn
            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
      - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        204:
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
      - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
      - name: uid
        in: query
        required: true
        type: string
      - name: token
        in: query
        required: true
        type: string
      - name: redirect
        in: query
        required: false
        type: string
      responses:
        204:
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
      - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
      - name: options
        in: body
        required: true
        schema:
          type: object
      responses:
        204:
          description: Request was successful
      deprecated: false
  /accounts/{id}/accessTokens/{fk}:
    get:
      tags:
      - Account
      summary: Find a related item by id for accessTokens.
      operationId: Account.prototype.__findById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
      - Account
      summary: Delete a related item by id for accessTokens.
      operationId: Account.prototype.__destroyById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
    put:
      tags:
      - Account
      summary: Update a related item by id for accessTokens.
      operationId: Account.prototype.__updateById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/AccessToken'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /accounts/{id}/balances:
    get:
      tags:
      - Account
      summary: Fetches hasOne relation balances.
      operationId: Account.prototype.__get__balances
      parameters:
      - name: refresh
        in: query
        required: false
        type: boolean
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
    post:
      tags:
      - Account
      summary: Creates a new instance in balances of this model.
      operationId: Account.prototype.__create__balances
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/Balance'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
    put:
      tags:
      - Account
      summary: Update balances of this model.
      operationId: Account.prototype.__update__balances
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/Balance'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
    delete:
      tags:
      - Account
      summary: Deletes balances of this model.
      operationId: Account.prototype.__destroy__balances
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
  /accounts/{id}/transactions/{fk}:
    get:
      tags:
      - Account
      summary: Find a related item by id for transactions.
      operationId: Account.prototype.__findById__transactions
      parameters:
      - name: fk
        in: path
        description: Foreign key for transactions
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
    delete:
      tags:
      - Account
      summary: Delete a related item by id for transactions.
      operationId: Account.prototype.__destroyById__transactions
      parameters:
      - name: fk
        in: path
        description: Foreign key for transactions
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
    put:
      tags:
      - Account
      summary: Update a related item by id for transactions.
      operationId: Account.prototype.__updateById__transactions
      parameters:
      - name: fk
        in: path
        description: Foreign key for transactions
        required: true
        type: string
        format: JSON
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/BalanceTransaction'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
  /accounts/{id}/accessTokens:
    get:
      tags:
      - Account
      summary: Queries accessTokens of Account.
      operationId: Account.prototype.__get__accessTokens
      parameters:
      - name: filter
        in: query
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
      - Account
      summary: Creates a new instance in accessTokens of this model.
      operationId: Account.prototype.__create__accessTokens
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/AccessToken'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
      - Account
      summary: Deletes all accessTokens of this model.
      operationId: Account.prototype.__delete__accessTokens
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
  /accounts/{id}/accessTokens/count:
    get:
      tags:
      - Account
      summary: Counts accessTokens of Account.
      operationId: Account.prototype.__count__accessTokens
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /accounts/{id}/transactions:
    get:
      tags:
      - Account
      summary: Queries transactions of Account.
      operationId: Account.prototype.__get__transactions
      parameters:
      - name: filter
        in: query
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/BalanceTransaction'
      deprecated: false
    post:
      tags:
      - Account
      summary: Creates a new instance in transactions of this model.
      operationId: Account.prototype.__create__transactions
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/BalanceTransaction'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
    delete:
      tags:
      - Account
      summary: Deletes all transactions of this model.
      operationId: Account.prototype.__delete__transactions
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
  /accounts/{id}/transactions/count:
    get:
      tags:
      - Account
      summary: Counts transactions of Account.
      operationId: Account.prototype.__count__transactions
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /accounts:
    post:
      tags:
      - Account
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Account.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Account'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
      - Account
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: Account.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Account'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    get:
      tags:
      - Account
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Account.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
      deprecated: false
  /accounts/{id}/exists:
    get:
      tags:
      - Account
      summary: Check whether a model instance exists in the data source.
      operationId: Account.exists__get_accounts_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /accounts/{id}:
    head:
      tags:
      - Account
      summary: Check whether a model instance exists in the data source.
      operationId: Account.exists__head_accounts_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Account
      summary: Find a model instance by id from the data source.
      operationId: Account.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    delete:
      tags:
      - Account
      summary: Delete a model instance by id from the data source.
      operationId: Account.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - Account
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: Account.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Account'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /accounts/findOne:
    get:
      tags:
      - Account
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Account.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /accounts/update:
    post:
      tags:
      - Account
      summary: Update instances of the model matched by where from the data source.
      operationId: Account.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Account'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /accounts/count:
    get:
      tags:
      - Account
      summary: Count instances of the model matched by where from the data source.
      operationId: Account.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /accounts/change-stream:
    post:
      tags:
      - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__post_accounts_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__get_accounts_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /accounts/login:
    post:
      tags:
      - Account
      summary: Login a user with username/email and password.
      operationId: Account.login
      parameters:
      - name: credentials
        in: body
        required: true
        schema:
          type: object
      - name: include
        in: query
        description: Related objects to include in the response. See the description
          of return value for more details.
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            description: The response body contains properties of the AccessToken
              created on login.nDepending on the value of `include` parameter, the
              body may contain additional properties:nn  - `user` - `{User}` - Data
              of the currently logged in user. (`include=user`)nn
            type: object
      deprecated: false
  /accounts/logout:
    post:
      tags:
      - Account
      summary: Logout a user with access token.
      operationId: Account.logout
      parameters: []
      responses:
        204:
          description: Request was successful
      deprecated: false
  /accounts/confirm:
    get:
      tags:
      - Account
      summary: Confirm a user registration with email verification token.
      operationId: Account.confirm
      parameters:
      - name: uid
        in: query
        required: true
        type: string
      - name: token
        in: query
        required: true
        type: string
      - name: redirect
        in: query
        required: false
        type: string
      responses:
        204:
          description: Request was successful
      deprecated: false
  /accounts/reset:
    post:
      tags:
      - Account
      summary: Reset password for a user with email.
      operationId: Account.resetPassword
      parameters:
      - name: options
        in: body
        required: true
        schema:
          type: object
      responses:
        204:
          description: Request was successful
      deprecated: false
  /balance:
    post:
      tags:
      - Balance
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Balance.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Balance'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
    put:
      tags:
      - Balance
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: Balance.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Balance'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
    get:
      tags:
      - Balance
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Balance.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Balance'
      deprecated: false
  /balance/{id}/exists:
    get:
      tags:
      - Balance
      summary: Check whether a model instance exists in the data source.
      operationId: Balance.exists__get_balance_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /balance/{id}:
    head:
      tags:
      - Balance
      summary: Check whether a model instance exists in the data source.
      operationId: Balance.exists__head_balance_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Balance
      summary: Find a model instance by id from the data source.
      operationId: Balance.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
    delete:
      tags:
      - Balance
      summary: Delete a model instance by id from the data source.
      operationId: Balance.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - Balance
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: Balance.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Balance'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
  /balance/findOne:
    get:
      tags:
      - Balance
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Balance.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Balance'
      deprecated: false
  /balance/update:
    post:
      tags:
      - Balance
      summary: Update instances of the model matched by where from the data source.
      operationId: Balance.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Balance'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /balance/count:
    get:
      tags:
      - Balance
      summary: Count instances of the model matched by where from the data source.
      operationId: Balance.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /balance/change-stream:
    post:
      tags:
      - Balance
      summary: Create a change stream.
      operationId: Balance.createChangeStream__post_balance_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Balance
      summary: Create a change stream.
      operationId: Balance.createChangeStream__get_balance_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /transactions:
    post:
      tags:
      - BalanceTransaction
      summary: Create a new instance of the model and persist it into the data source.
      operationId: BalanceTransaction.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/BalanceTransaction'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
    put:
      tags:
      - BalanceTransaction
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: BalanceTransaction.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/BalanceTransaction'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
    get:
      tags:
      - BalanceTransaction
      summary: Find all instances of the model matched by filter from the data source.
      operationId: BalanceTransaction.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/BalanceTransaction'
      deprecated: false
  /transactions/{id}/exists:
    get:
      tags:
      - BalanceTransaction
      summary: Check whether a model instance exists in the data source.
      operationId: BalanceTransaction.exists__get_transactions_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /transactions/{id}:
    head:
      tags:
      - BalanceTransaction
      summary: Check whether a model instance exists in the data source.
      operationId: BalanceTransaction.exists__head_transactions_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - BalanceTransaction
      summary: Find a model instance by id from the data source.
      operationId: BalanceTransaction.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
    delete:
      tags:
      - BalanceTransaction
      summary: Delete a model instance by id from the data source.
      operationId: BalanceTransaction.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - BalanceTransaction
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: BalanceTransaction.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/BalanceTransaction'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
  /transactions/findOne:
    get:
      tags:
      - BalanceTransaction
      summary: Find first instance of the model matched by filter from the data source.
      operationId: BalanceTransaction.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/BalanceTransaction'
      deprecated: false
  /transactions/update:
    post:
      tags:
      - BalanceTransaction
      summary: Update instances of the model matched by where from the data source.
      operationId: BalanceTransaction.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/BalanceTransaction'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /transactions/count:
    get:
      tags:
      - BalanceTransaction
      summary: Count instances of the model matched by where from the data source.
      operationId: BalanceTransaction.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /transactions/change-stream:
    post:
      tags:
      - BalanceTransaction
      summary: Create a change stream.
      operationId: BalanceTransaction.createChangeStream__post_transactions_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - BalanceTransaction
      summary: Create a change stream.
      operationId: BalanceTransaction.createChangeStream__get_transactions_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /transfers:
    post:
      tags:
      - Transfer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Transfer.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Transfer'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Transfer'
      deprecated: false
    put:
      tags:
      - Transfer
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: Transfer.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Transfer'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Transfer'
      deprecated: false
    get:
      tags:
      - Transfer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Transfer.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Transfer'
      deprecated: false
  /transfers/{id}/exists:
    get:
      tags:
      - Transfer
      summary: Check whether a model instance exists in the data source.
      operationId: Transfer.exists__get_transfers_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /transfers/{id}:
    head:
      tags:
      - Transfer
      summary: Check whether a model instance exists in the data source.
      operationId: Transfer.exists__head_transfers_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Transfer
      summary: Find a model instance by id from the data source.
      operationId: Transfer.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Transfer'
      deprecated: false
    delete:
      tags:
      - Transfer
      summary: Delete a model instance by id from the data source.
      operationId: Transfer.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - Transfer
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: Transfer.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Transfer'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Transfer'
      deprecated: false
  /transfers/findOne:
    get:
      tags:
      - Transfer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Transfer.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Transfer'
      deprecated: false
  /transfers/update:
    post:
      tags:
      - Transfer
      summary: Update instances of the model matched by where from the data source.
      operationId: Transfer.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Transfer'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /transfers/count:
    get:
      tags:
      - Transfer
      summary: Count instances of the model matched by where from the data source.
      operationId: Transfer.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /transfers/change-stream:
    post:
      tags:
      - Transfer
      summary: Create a change stream.
      operationId: Transfer.createChangeStream__post_transfers_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Transfer
      summary: Create a change stream.
      operationId: Transfer.createChangeStream__get_transfers_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /customers/{id}/sources/{fk}:
    get:
      tags:
      - Customer
      summary: Find a related item by id for sources.
      operationId: Customer.prototype.__findById__sources
      parameters:
      - name: fk
        in: path
        description: Foreign key for sources
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
    delete:
      tags:
      - Customer
      summary: Delete a related item by id for sources.
      operationId: Customer.prototype.__destroyById__sources
      parameters:
      - name: fk
        in: path
        description: Foreign key for sources
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
    put:
      tags:
      - Customer
      summary: Update a related item by id for sources.
      operationId: Customer.prototype.__updateById__sources
      parameters:
      - name: fk
        in: path
        description: Foreign key for sources
        required: true
        type: string
        format: JSON
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/Card'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
  /customers/{id}/sources:
    get:
      tags:
      - Customer
      summary: Queries sources of Customer.
      operationId: Customer.prototype.__get__sources
      parameters:
      - name: filter
        in: query
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      deprecated: false
    post:
      tags:
      - Customer
      summary: Creates a new instance in sources of this model.
      operationId: Customer.prototype.__create__sources
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/Card'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
    delete:
      tags:
      - Customer
      summary: Deletes all sources of this model.
      operationId: Customer.prototype.__delete__sources
      parameters:
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
  /customers/{id}/sources/count:
    get:
      tags:
      - Customer
      summary: Counts sources of Customer.
      operationId: Customer.prototype.__count__sources
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /customers:
    post:
      tags:
      - Customer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Customer.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Customer'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    put:
      tags:
      - Customer
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: Customer.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Customer'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    get:
      tags:
      - Customer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Customer.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
      deprecated: false
  /customers/{id}/exists:
    get:
      tags:
      - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: Customer.exists__get_customers_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /customers/{id}:
    head:
      tags:
      - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: Customer.exists__head_customers_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Customer
      summary: Find a model instance by id from the data source.
      operationId: Customer.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    delete:
      tags:
      - Customer
      summary: Delete a model instance by id from the data source.
      operationId: Customer.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - Customer
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: Customer.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Customer'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /customers/findOne:
    get:
      tags:
      - Customer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Customer.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /customers/update:
    post:
      tags:
      - Customer
      summary: Update instances of the model matched by where from the data source.
      operationId: Customer.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Customer'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /customers/count:
    get:
      tags:
      - Customer
      summary: Count instances of the model matched by where from the data source.
      operationId: Customer.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /customers/change-stream:
    post:
      tags:
      - Customer
      summary: Create a change stream.
      operationId: Customer.createChangeStream__post_customers_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Customer
      summary: Create a change stream.
      operationId: Customer.createChangeStream__get_customers_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards:
    post:
      tags:
      - Card
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Card.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Card'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
    put:
      tags:
      - Card
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: Card.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/Card'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
    get:
      tags:
      - Card
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Card.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      deprecated: false
  /cards/{id}/exists:
    get:
      tags:
      - Card
      summary: Check whether a model instance exists in the data source.
      operationId: Card.exists__get_cards_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards/{id}:
    head:
      tags:
      - Card
      summary: Check whether a model instance exists in the data source.
      operationId: Card.exists__head_cards_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Card
      summary: Find a model instance by id from the data source.
      operationId: Card.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
    delete:
      tags:
      - Card
      summary: Delete a model instance by id from the data source.
      operationId: Card.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - Card
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: Card.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Card'
      - name: id
        in: path
        description: PersistedModel id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
  /cards/findOne:
    get:
      tags:
      - Card
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Card.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Card'
      deprecated: false
  /cards/update:
    post:
      tags:
      - Card
      summary: Update instances of the model matched by where from the data source.
      operationId: Card.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/Card'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /cards/count:
    get:
      tags:
      - Card
      summary: Count instances of the model matched by where from the data source.
      operationId: Card.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards/change-stream:
    post:
      tags:
      - Card
      summary: Create a change stream.
      operationId: Card.createChangeStream__post_cards_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
      - Card
      summary: Create a change stream.
      operationId: Card.createChangeStream__get_cards_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
produces:
- application/json
- application/xml
- text/xml
- application/javascript
- text/javascript
definitions: !php/object "O:8:\"stdClass\":9:{s:5:\"x-any\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":0:{}}s:11:\"AccessToken\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"ttl\";O:8:\"stdClass\":4:{s:7:\"default\";i:1209600;s:11:\"description\";s:44:\"time
  to live in seconds (2 weeks by default)\";s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:6:\"userId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:1:{i:0;s:2:\"id\";}s:20:\"additionalProperties\";b:0;}s:4:\"User\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":11:{s:5:\"realm\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"credentials\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:10:\"challenges\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"emailVerified\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:17:\"verificationToken\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:11:\"lastUpdated\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:1:{i:0;s:5:\"email\";}s:20:\"additionalProperties\";b:0;}s:7:\"Balance\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"available\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}s:8:\"livemode\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"pending\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}s:9:\"accountId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:1:{i:0;s:9:\"available\";}s:20:\"additionalProperties\";b:0;}s:18:\"BalanceTransaction\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":11:{s:6:\"amount\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:12:\"available_on\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:8:\"currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"descriptor\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"fee\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:11:\"fee_details\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:3:\"net\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"accountId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:7:{i:0;s:6:\"amount\";i:1;s:12:\"available_on\";i:2;s:8:\"currency\";i:3;s:10:\"descriptor\";i:4;s:3:\"net\";i:5;s:6:\"status\";i:6;s:4:\"type\";}s:20:\"additionalProperties\";b:0;}s:7:\"Account\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":31:{s:13:\"business_logo\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"business_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"business_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"charges_enabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"country\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"currencies_supported\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:23:\"debit_negative_balances\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:16:\"default_currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"details_submitted\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"display_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"legal_entity\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:7:\"managed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:19:\"product_description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"statement_descriptor\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"support_phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"timezone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"tos_acceptance\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:17:\"transfer_schedule\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:17:\"transfers_enabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"verification\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:5:\"realm\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"credentials\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:10:\"challenges\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"emailVerified\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:17:\"verificationToken\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:11:\"lastUpdated\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:7:{i:0;s:15:\"charges_enabled\";i:1;s:7:\"country\";i:2;s:20:\"currencies_supported\";i:3;s:17:\"details_submitted\";i:4;s:7:\"managed\";i:5;s:17:\"transfers_enabled\";i:6;s:5:\"email\";}s:20:\"additionalProperties\";b:0;}s:8:\"Transfer\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":12:{s:6:\"amount\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:15:\"amount_reversed\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:15:\"application-fee\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:19:\"balance_transaction\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"destination\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:8:\"livemode\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"reversed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:6:{i:0;s:6:\"amount\";i:1;s:8:\"currency\";i:2;s:11:\"description\";i:3;s:11:\"destination\";i:4;s:6:\"status\";i:5;s:4:\"type\";}s:20:\"additionalProperties\";b:0;}s:4:\"Card\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":21:{s:12:\"address_city\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"address_country\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"address_line1\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:19:\"address_line1_check\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"address_line2\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"address_state\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"address_zip\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"address_zip_check\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"brand\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"country\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"cvc_check\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"dynamic_last4\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"exp_month\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"exp_year\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"funding\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"last4\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"fingerprint\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:19:\"tokenization_method\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"customerId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:20:\"additionalProperties\";b:0;}s:8:\"Customer\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":12:{s:15:\"account_balance\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:7:\"created\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"default_source\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:10:\"delinquent\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"discount\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"livemode\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"metadata\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:8:\"shipping\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:20:\"additionalProperties\";b:0;}}"
...
