---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:5:\"Yancy\";s:7:\"version\";s:1:\"1\";}"
paths:
  /blog:
    get:
      parameters:
      - $ref: '#/parameters/%24limit'
      - $ref: '#/parameters/%24offset'
      - $ref: '#/parameters/%24order_by'
      - description: Filter the list by the html field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: html
        type: string
      - description: Filter the list by the id field. By default, looks for rows containing
          the value anywhere in the column. Use '*' anywhere in the value to anchor
          the match.
        in: query
        name: id
        type: integer
      - description: Filter the list by the is_published field. By default, looks
          for rows containing the value anywhere in the column. Use '*' anywhere in
          the value to anchor the match.
        in: query
        name: is_published
        type: boolean
      - description: Filter the list by the markdown field. By default, looks for
          rows containing the value anywhere in the column. Use '*' anywhere in the
          value to anchor the match.
        in: query
        name: markdown
        type: string
      - description: Filter the list by the slug field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: slug
        type: string
      - description: Filter the list by the title field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: title
        type: string
      - description: Filter the list by the user_id field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: user_id
        type: integer
      responses:
        200:
          description: List of items
          schema:
            properties:
              items:
                description: This page of items
                items:
                  $ref: '#/definitions/blog'
                type: array
              total:
                description: The total number of items available
                type: integer
            required:
            - items
            - total
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    post:
      parameters:
      - in: body
        name: newItem
        required: true
        schema:
          $ref: '#/definitions/blog'
      responses:
        201:
          description: Entry was created
          schema:
            $ref: '#/definitions/blog/properties/id'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /blog/{id}:
    delete:
      description: Delete a single item
      responses:
        204:
          description: Item was deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    get:
      description: Fetch a single item
      responses:
        200:
          description: Item details
          schema:
            $ref: '#/definitions/blog'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    parameters:
    - description: The id of the item
      in: path
      name: id
      required: true
      type: string
      x-mojo-placeholder: '*'
    put:
      description: Update a single item
      parameters:
      - in: body
        name: newItem
        required: true
        schema:
          $ref: '#/definitions/blog'
      responses:
        200:
          description: Item was updated
          schema:
            $ref: '#/definitions/blog'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /people:
    get:
      parameters:
      - $ref: '#/parameters/%24limit'
      - $ref: '#/parameters/%24offset'
      - $ref: '#/parameters/%24order_by'
      - description: Filter the list by the age field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: age
        type: integer
      - description: Filter the list by the contact field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: contact
        type: boolean
      - description: Filter the list by the email field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: email
        type: string
      - description: Filter the list by the id field. By default, looks for rows containing
          the value anywhere in the column. Use '*' anywhere in the value to anchor
          the match.
        in: query
        name: id
        type: integer
      - description: Filter the list by the name field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: name
        type: string
      - description: Filter the list by the phone field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: phone
        type: string
      responses:
        200:
          description: List of items
          schema:
            properties:
              items:
                description: This page of items
                items:
                  $ref: '#/definitions/people'
                type: array
              total:
                description: The total number of items available
                type: integer
            required:
            - items
            - total
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    post:
      parameters:
      - in: body
        name: newItem
        required: true
        schema:
          $ref: '#/definitions/people'
      responses:
        201:
          description: Entry was created
          schema:
            $ref: '#/definitions/people/properties/id'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /people/{id}:
    delete:
      description: Delete a single item
      responses:
        204:
          description: Item was deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    get:
      description: Fetch a single item
      responses:
        200:
          description: Item details
          schema:
            $ref: '#/definitions/people'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    parameters:
    - description: The id of the item
      in: path
      name: id
      required: true
      type: string
      x-mojo-placeholder: '*'
    put:
      description: Update a single item
      parameters:
      - in: body
        name: newItem
        required: true
        schema:
          $ref: '#/definitions/people'
      responses:
        200:
          description: Item was updated
          schema:
            $ref: '#/definitions/people'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /user:
    get:
      parameters:
      - $ref: '#/parameters/%24limit'
      - $ref: '#/parameters/%24offset'
      - $ref: '#/parameters/%24order_by'
      - description: Filter the list by the access field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: access
        type: string
      - description: Filter the list by the age field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: age
        type: integer
      - description: Filter the list by the email field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: email
        type: string
      - description: Filter the list by the id field. By default, looks for rows containing
          the value anywhere in the column. Use '*' anywhere in the value to anchor
          the match.
        in: query
        name: id
        type: integer
      - description: Filter the list by the password field. By default, looks for
          rows containing the value anywhere in the column. Use '*' anywhere in the
          value to anchor the match.
        in: query
        name: password
        type: string
      - description: Filter the list by the username field. By default, looks for
          rows containing the value anywhere in the column. Use '*' anywhere in the
          value to anchor the match.
        in: query
        name: username
        type: string
      responses:
        200:
          description: List of items
          schema:
            properties:
              items:
                description: This page of items
                items:
                  $ref: '#/definitions/user'
                type: array
              total:
                description: The total number of items available
                type: integer
            required:
            - items
            - total
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    post:
      parameters:
      - in: body
        name: newItem
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        201:
          description: Entry was created
          schema:
            $ref: '#/definitions/user/properties/username'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /user/{username}:
    delete:
      description: Delete a single item
      responses:
        204:
          description: Item was deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    get:
      description: Fetch a single item
      responses:
        200:
          description: Item details
          schema:
            $ref: '#/definitions/user'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    parameters:
    - description: The id of the item
      in: path
      name: username
      required: true
      type: string
      x-mojo-placeholder: '*'
    put:
      description: Update a single item
      parameters:
      - in: body
        name: newItem
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Item was updated
          schema:
            $ref: '#/definitions/user'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /usermini:
    get:
      parameters:
      - $ref: '#/parameters/%24limit'
      - $ref: '#/parameters/%24offset'
      - $ref: '#/parameters/%24order_by'
      - description: Filter the list by the email field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: email
        type: string
      - description: Filter the list by the id field. By default, looks for rows containing
          the value anywhere in the column. Use '*' anywhere in the value to anchor
          the match.
        in: query
        name: id
        type: integer
      - description: Filter the list by the username field. By default, looks for
          rows containing the value anywhere in the column. Use '*' anywhere in the
          value to anchor the match.
        in: query
        name: username
        type: string
      responses:
        200:
          description: List of items
          schema:
            properties:
              items:
                description: This page of items
                items:
                  $ref: '#/definitions/usermini'
                type: array
              total:
                description: The total number of items available
                type: integer
            required:
            - items
            - total
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /usermini/{username}:
    get:
      description: Fetch a single item
      responses:
        200:
          description: Item details
          schema:
            $ref: '#/definitions/usermini'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    parameters:
    - description: The id of the item
      in: path
      name: username
      required: true
      type: string
      x-mojo-placeholder: '*'
  /userviewnoprops:
    get:
      parameters:
      - $ref: '#/parameters/%24limit'
      - $ref: '#/parameters/%24offset'
      - $ref: '#/parameters/%24order_by'
      - description: Filter the list by the access field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: access
        type: string
      - description: Filter the list by the age field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: age
        type: integer
      - description: Filter the list by the email field. By default, looks for rows
          containing the value anywhere in the column. Use '*' anywhere in the value
          to anchor the match.
        in: query
        name: email
        type: string
      - description: Filter the list by the id field. By default, looks for rows containing
          the value anywhere in the column. Use '*' anywhere in the value to anchor
          the match.
        in: query
        name: id
        type: integer
      - description: Filter the list by the password field. By default, looks for
          rows containing the value anywhere in the column. Use '*' anywhere in the
          value to anchor the match.
        in: query
        name: password
        type: string
      - description: Filter the list by the username field. By default, looks for
          rows containing the value anywhere in the column. Use '*' anywhere in the
          value to anchor the match.
        in: query
        name: username
        type: string
      responses:
        200:
          description: List of items
          schema:
            properties:
              items:
                description: This page of items
                items:
                  $ref: '#/definitions/userviewnoprops'
                type: array
              total:
                description: The total number of items available
                type: integer
            required:
            - items
            - total
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
  /userviewnoprops/{username}:
    get:
      description: Fetch a single item
      responses:
        200:
          description: Item details
          schema:
            $ref: '#/definitions/userviewnoprops'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/_Error'
    parameters:
    - description: The id of the item
      in: path
      name: username
      required: true
      type: string
      x-mojo-placeholder: '*'
definitions: !php/object "O:8:\"stdClass\":6:{s:6:\"_Error\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"errors\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"message\";O:8:\"stdClass\":2:{s:11:\"description\";s:39:\"Human
  readable description of the error\";s:4:\"type\";s:6:\"string\";}s:4:\"path\";O:8:\"stdClass\":2:{s:11:\"description\";s:52:\"JSON
  pointer to the input data where the error occur\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:7:\"message\";}}s:4:\"type\";s:5:\"array\";}}s:5:\"title\";s:20:\"OpenAPI
  Error Object\";s:4:\"type\";s:6:\"object\";}s:4:\"blog\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":7:{s:4:\"html\";O:8:\"stdClass\":2:{s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}s:7:\"x-order\";i:6;}s:2:\"id\";O:8:\"stdClass\":3:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";s:7:\"x-order\";i:1;}s:12:\"is_published\";O:8:\"stdClass\":3:{s:7:\"default\";b:0;s:4:\"type\";s:7:\"boolean\";s:7:\"x-order\";i:7;}s:8:\"markdown\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:5;}s:4:\"slug\";O:8:\"stdClass\":2:{s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}s:7:\"x-order\";i:4;}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:3;}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";a:2:{i:0;s:7:\"integer\";i:1;s:4:\"null\";}s:7:\"x-order\";i:2;}}s:8:\"required\";a:2:{i:0;s:5:\"title\";i:1;s:8:\"markdown\";}s:4:\"type\";s:6:\"object\";}s:6:\"people\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":6:{s:3:\"age\";O:8:\"stdClass\":2:{s:4:\"type\";a:2:{i:0;s:7:\"integer\";i:1;s:4:\"null\";}s:7:\"x-order\";i:4;}s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"type\";a:2:{i:0;s:7:\"boolean\";i:1;s:4:\"null\";}s:7:\"default\";i:0;s:7:\"x-order\";i:5;}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}s:7:\"x-order\";i:3;}s:2:\"id\";O:8:\"stdClass\":3:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";s:7:\"x-order\";i:1;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:2;}s:5:\"phone\";O:8:\"stdClass\":2:{s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}s:7:\"x-order\";i:6;}}s:8:\"required\";a:1:{i:0;s:4:\"name\";}s:4:\"type\";s:6:\"object\";}s:4:\"user\";O:8:\"stdClass\":5:{s:10:\"properties\";O:8:\"stdClass\":8:{s:6:\"access\";O:8:\"stdClass\":4:{s:7:\"default\";s:4:\"user\";s:4:\"enum\";a:3:{i:0;s:4:\"user\";i:1;s:9:\"moderator\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:5;}s:3:\"age\";O:8:\"stdClass\":3:{s:11:\"description\";s:16:\"The
  person's age\";s:4:\"type\";a:2:{i:0;s:7:\"integer\";i:1;s:4:\"null\";}s:7:\"x-order\";i:6;}s:5:\"email\";O:8:\"stdClass\":5:{s:6:\"format\";s:5:\"email\";s:7:\"pattern\";s:13:\"^[^@]+@[^@]+$\";s:5:\"title\";s:14:\"E-mail
  Address\";s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:3;}s:2:\"id\";O:8:\"stdClass\":3:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";s:7:\"x-order\";i:1;}s:8:\"password\";O:8:\"stdClass\":3:{s:6:\"format\";s:8:\"password\";s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:4;}s:8:\"username\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:2;}s:6:\"plugin\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:7:\"default\";s:8:\"password\";s:7:\"x-order\";i:7;}s:6:\"avatar\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:7:\"default\";s:0:\"\";s:7:\"x-order\";i:8;s:6:\"format\";s:8:\"filepath\";}}s:8:\"required\";a:3:{i:0;s:8:\"username\";i:1;s:5:\"email\";i:2;s:8:\"password\";}s:4:\"type\";s:6:\"object\";s:10:\"x-id-field\";s:8:\"username\";s:14:\"x-list-columns\";a:2:{i:0;s:8:\"username\";i:1;s:5:\"email\";}}s:8:\"usermini\";O:8:\"stdClass\":5:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"email\";O:8:\"stdClass\":5:{s:6:\"format\";s:5:\"email\";s:7:\"pattern\";s:13:\"^[^@]+@[^@]+$\";s:5:\"title\";s:14:\"E-mail
  Address\";s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:3;}s:2:\"id\";O:8:\"stdClass\":3:{s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";s:7:\"x-order\";i:1;}s:8:\"username\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"x-order\";i:2;}}s:4:\"type\";s:6:\"object\";s:10:\"x-id-field\";s:8:\"username\";s:14:\"x-list-columns\";a:2:{i:0;s:8:\"username\";i:1;s:5:\"email\";}s:6:\"x-view\";O:8:\"stdClass\":1:{s:6:\"schema\";s:4:\"user\";}}s:15:\"userviewnoprops\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:10:\"x-id-field\";s:8:\"username\";s:14:\"x-list-columns\";a:2:{i:0;s:8:\"username\";i:1;s:5:\"email\";}s:6:\"x-view\";O:8:\"stdClass\":1:{s:6:\"schema\";s:4:\"user\";}}}"
...
