---
swagger: "2.0"
paths: ~
definitions: !php/object "O:8:\"stdClass\":2:{s:6:\"Shapes\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:1:{i:0;s:4:\"data\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"links\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"self\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:28:\"Link
  to this page of results\";}s:4:\"prev\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:36:\"Link
  to the previous page of results\";}s:4:\"next\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:32:\"Link
  to the next page of results\";}s:4:\"last\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:32:\"Link
  to the last page of results\";}s:5:\"first\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:33:\"Link
  to the first page of results\";}}}s:4:\"data\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/ShapeResource\";}s:11:\"description\";s:52:\"Content
  with [ShapeResource](#shaperesource) objects\";}}s:11:\"description\";s:49:\"A page
  of [ShapeResource](#shaperesource) results\";}s:13:\"ShapeResource\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:26:\"The
  JSON-API resource type\";}s:13:\"relationships\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"stops\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"links\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"self\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:27:\"Relationship
  link for stops\";}s:7:\"related\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:18:\"Related
  stops link\";}}}s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:30:\"Type
  of related stops resource\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:25:\"Related
  stops resource id\";}}}}}}s:5:\"route\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"links\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"self\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:27:\"Relationship
  link for route\";}s:7:\"related\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:18:\"Related
  route link\";}}}s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:30:\"Type
  of related route resource\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:25:\"Related
  route resource id\";}}}}}}}s:5:\"links\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":0:{}}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:24:\"The
  JSON-API resource ID\";}s:10:\"attributes\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"priority\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:2;s:11:\"description\";s:108:\"Representation
  of how important a shape is when choosing one for display. Higher number is higher
  priority.\n\";}s:8:\"polyline\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:3016:\"##
  [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n\nPolyline
  encoding is a lossy compression algorithm that allows you to store a series of coordinates
  as a single string. Point coordinates are encoded using signed values.\n\nThe encoding
  process converts a binary value into a series of character codes for ASCII characters
  using the familiar base64 encoding scheme: to ensure proper display of these characters,
  encoded values are summed with 63 (the ASCII character '?') before converting them
  into ASCII. The algorithm also checks for additional character codes for a given
  point by checking the least significant bit of each byte group; if this bit is set
  to 1, the point is not yet fully formed and additional data must follow.\n\nAdditionally,
  to conserve space, **points only include the offset from the previous point** (except
  of course for the first point). All points are encoded in Base64 as signed integers,
  as latitudes and longitudes are signed values. The encoding format within a polyline
  needs to represent two coordinates representing latitude and longitude to a reasonable
  precision. Given a maximum longitude of +/- 180 degrees to a precision of 5 decimal
  places (180.00000 to -180.00000), this results in the need for a 32 bit signed binary
  integer value.\n\nThe steps for encoding such a signed value are specified below.\n\n1.
  Take the initial signed value:\n   ```\n   -179.9832104\n   ```\n2. Take the decimal
  value and multiply it by 1e5, rounding the result:\n   ```\n   -17998321\n   ```\n3.
  Convert the decimal value to binary. Note that a negative value must be calculated
  using its    [two's complement](https://en.wikipedia.org/wiki/Two%27s_complement)
  by inverting the binary    value and adding one to the result:\n   ```\n   00000001
  00010010 10100001 11110001\n   11111110 11101101 01011110 00001110\n   11111110
  11101101 01011110 00001111\n   ```\n4. Left-shift the binary value one bit:\n   ```\n
  \  11111101 11011010 10111100 00011110`\n   ```\n5. If the original decimal value
  is negative, invert this encoding:\n   ```\n   00000010 00100101 01000011 11100001\n
  \  ```\n6. Break the binary value out into 5-bit chunks (starting from the right
  hand side):\n   ```\n   00001 00010 01010 10000 11111 00001\n   ```\n7. Place the
  5-bit chunks into reverse order:\n   ```\n   00001 11111 10000 01010 00010 00001\n
  \  ```\n8. OR each value with 0x20 if another bit chunk follows:\n   ```\n   100001
  111111 110000 101010 100010 000001\n   ```\n9. Convert each value to decimal:\n
  \  ```\n   33 63 48 42 34 1\n   ```\n10. Add 63 to each value:\n    ```\n    96
  126 111 105 97 64\n    ```\n11. Convert each value to its ASCII equivalent:\n    ```\n
  \   `~oia@\n    ```\n\n## Decoding\n\nPolyline can be decoded by following the encoding
  steps above in reverse.  Some pre-existing libraries:\n\n* [Javascript](https://www.npmjs.com/package/polyline)\n*
  [Erlang](https://blog.kempkens.io/posts/encoding-and-decoding-polylines-with-erlang/)\n*
  [Elixir](https://hex.pm/packages/polyline)\n\";}s:4:\"name\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"Dudley\";s:11:\"description\";s:73:\"User-facing
  name for shape. It may, but is not required to, be a headsign\";}s:12:\"direction_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:11:\"description\";s:746:\"Direction
  in which trip is traveling: 0 or 1.\n\nThe meaning of `direction_id` varies based
  on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names`
  or `/routes/{id}` `/data/attriutes/direction_names`.  The general pattern is as
  follows:\n\n| Route ID Pattern | `direction_id` | Direction Name |\n|------------------|----------------|----------------|\n|
  `Red` | `0` | `\"Southbound\"` |\n| `Red` | `1` | `\"Northbound\"` |\n| `Orange`
  | `0` | `\"Southbound\"` |\n| `Orange` | `1` | `\"Northbound\"` |\n| `Blue` | `0`
  | `\"Westbound\"` |\n| `Blue` | `1` | `\"Eastbound\"` |\n| `Green-*` | `0` | `\"Westbound\"`
  |\n| `Green-*` | `1` | `\"Eastbound\"` |\n| `*` | `0` | `\"Outbound\"` |\n| `*`
  | `1` | `\"Inbound\"` |\n\n\n\";}}}}s:11:\"description\";s:259:\"Shape representing
  the stops to which a particular trip can go. Trips grouped under the same route
  can have different shapes, and thus different stops. See [GTFS `shapes.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#shapestxt)\n\";}}"
...
