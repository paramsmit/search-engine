---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:32:\"This is the API
  for skill matrix\";s:7:\"version\";s:3:\"1.0\";s:5:\"title\";s:16:\"Skill Matrix
  API\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:27:\"tanya.moldovan@lunatech.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:48:\"http://www.apache.org/lincenses/LICENSE-2.0.html\";}}"
basePath: /
paths:
  /ping:
    get:
      security: []
      summary: ping
      operationId: ping
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: string
  /users/search:
    post:
      summary: Search users by filters
      operationId: searchUser
      security:
      - OauthSecurity:
        - management
      produces:
      - application/json
      parameters:
      - in: body
        name: techFilter
        description: List of filter
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/TechFilter'
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/Standard400ErrorMessage'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /users/{userId}:
    get:
      summary: Get user by id
      operationId: getUserById
      security:
      - OauthSecurity:
        - management
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
    delete:
      summary: Deletes a user by id
      description: Deletes a user together with all their skills
      operationId: removeUser
      security:
      - OauthSecurity:
        - management
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        required: true
        type: string
      responses:
        204:
          description: user deleted, returning NoContent response
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /users/{userId}/skills:
    get:
      summary: get all skills entered by user
      operationId: getUserSkills
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        required: true
        type: string
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkillResponse'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /users/skills/{email}:
    get:
      summary: get all skills entered by user
      operationId: getUserSkillsByEmail
      produces:
      - application/json
      parameters:
      - in: path
        name: email
        required: true
        type: string
      responses:
        200:
          description: An array of products
          schema:
            $ref: '#/definitions/UserSkillResponse'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /users/me/skillmatrix:
    post:
      summary: adds a skill to the current logged in user' skill matrix
      operationId: addSkill
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: skillMatrixItem
        description: Skill that needs to be added or updated
        required: true
        schema:
          $ref: '#/definitions/SkillMatrixItem'
      responses:
        201:
          description: created
          schema:
            $ref: '#/definitions/SkillMatrixItem'
        400:
          $ref: '#/responses/Standard400ErrorMessage'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /users/me/skillmatrix/{skillId}:
    put:
      summary: Update an existing skill of the logged in user
      operationId: updateSkill
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: skillId
        description: The id of the skill from the user's skill matrix
        type: string
        required: true
      - in: body
        name: skillMatrixItem
        description: Skill that needs to be added or updated
        required: true
        schema:
          $ref: '#/definitions/SkillMatrixItem'
      responses:
        200:
          description: updated
          schema:
            $ref: '#/definitions/SkillMatrixItem'
        400:
          $ref: '#/responses/Standard400ErrorMessage'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: Skill not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
    delete:
      summary: deletes a skill from the logged in user's list
      operationId: deleteSkill
      produces:
      - application/json
      parameters:
      - in: path
        name: skillId
        description: The id of the skill from the user's skill matrix
        type: string
        required: true
      responses:
        204:
          description: ok
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: Skill not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /alltech:
    get:
      summary: get all skills entered by users
      operationId: getAllTech
      produces:
      - application/json
      security:
      - OauthSecurity:
        - admin
      parameters:
      - in: query
        name: searchString
        description: Pass an optional search string for looking the data set
        required: false
        type: string
      - in: query
        name: skip
        description: Number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: Maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: An array of tech
          schema:
            type: array
            items:
              $ref: '#/definitions/Tech'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /alltech/{techId}:
    put:
      summary: update tech name
      produces:
      - application/json
      security:
      - OauthSecurity:
        - management
      parameters:
      - in: path
        name: techId
        description: the id of the tech to be updated
        required: true
        type: string
      - in: body
        name: tech
        description: the new name and/or new type
        required: true
        schema:
          $ref: '#/definitions/Tech'
      responses:
        200:
          description: updated
          schema:
            $ref: '#/definitions/Tech'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: Tech not found
          schema:
            $ref: '#/definitions/Error'
        409:
          description: 'Duplicate tech name: the tech name sent for update is already
            present in the database'
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
    delete:
      summary: delete tech
      produces:
      - application/json
      security:
      - OauthSecurity:
        - management
      parameters:
      - in: path
        name: techId
        description: the id of the tech to be deleted
        required: true
        type: string
      responses:
        204:
          description: no content for successful operation
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: Tech not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /skillmatrix:
    get:
      summary: get all skills entered by users together with info about users
      operationId: getSkillMatrix
      produces:
      - application/json
      security:
      - OauthSecurity:
        - admin
      parameters:
      - in: query
        name: searchString
        description: Pass an optional search string for looking the data set
        required: false
        type: string
      - in: query
        name: skip
        description: Number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: Maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/SkillMatrixResponse'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /skillmatrix/{techId}:
    get:
      operationId: getSkillMatrixByTechId
      summary: get all info related to a skill
      description: get info such as the number of users who posses the skill, the
        level, etc
      security:
      - OauthSecurity:
        - admin
      produces:
      - application/json
      parameters:
      - in: path
        name: techId
        description: The id of the desired skill
        type: string
        required: true
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/SkillMatrixResponse'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: Skill not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
  /report/lastupdate:
    get:
      summary: get report for users' last updates
      operationId: getLastUpdateReport
      produces:
      - application/json
      security:
      - OauthSecurity:
        - management
      parameters: []
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/UserLastSkillUpdates'
        401:
          $ref: '#/responses/Standard401ErrorMessage'
        403:
          $ref: '#/responses/Standard403ErrorMessage'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: '#/responses/Standard500ErrorMessage'
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":12:{s:4:\"Tech\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:5:\"label\";i:2;s:8:\"techType\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"erlang\";}s:5:\"label\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"Erlang\";}s:8:\"techType\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/TechType\";}}}s:8:\"TechType\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:6:{i:0;s:8:\"LANGUAGE\";i:1;s:7:\"LIBRARY\";i:2;s:9:\"FRAMEWORK\";i:3;s:7:\"CONCEPT\";i:4;s:8:\"DATABASE\";i:5;s:5:\"OTHER\";}}s:15:\"SkillMatrixItem\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:4:\"tech\";i:1;s:10:\"skillLevel\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"tech\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Tech\";}s:10:\"skillLevel\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/SkillLevel\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:10:\"SkillLevel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:5:{i:0;s:6:\"EXPERT\";i:1;s:10:\"PROFICIENT\";i:2;s:9:\"COMPETENT\";i:3;s:17:\"ADVANCED_BEGINNER\";i:4;s:6:\"NOVICE\";}}s:19:\"SkillMatrixResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"techId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"techName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"labelName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"techType\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/TechType\";}s:5:\"users\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:38:\"#/definitions/SkillMatrixUsersAndLevel\";}}}}s:24:\"SkillMatrixUsersAndLevel\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"fullName\";O:8:\"stdClass\":3:{s:11:\"description\";s:35:\"the
  first and last name of the user\";s:4:\"type\";s:6:\"string\";s:7:\"example\";s:13:\"Severus
  Snape\";}s:5:\"level\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/SkillLevel\";}}}s:17:\"UserSkillResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"skills\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/SkillMatrixItem\";}}}}s:10:\"TechFilter\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"tech\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"operation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:4:{i:0;s:5:\"EQUAL\";i:1;s:2:\"GT\";i:2;s:2:\"LT\";i:3;s:3:\"ANY\";}}s:5:\"level\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:27:\"tanya.moldovan@lunatech.com\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"accessLevels\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:5:\"Basic\";i:1;s:5:\"Admin\";i:2;s:10:\"Management\";}}}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:6:\"Active\";i:1;s:8:\"Inactive\";}}}}s:20:\"UserLastSkillUpdates\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"entries\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/LastUpdateSkill\";}}}}s:15:\"LastUpdateSkill\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"tech\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"occurrence\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"entryAction\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:3:\"Add\";i:1;s:6:\"Remove\";i:2;s:6:\"Update\";}}}}s:5:\"Error\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
