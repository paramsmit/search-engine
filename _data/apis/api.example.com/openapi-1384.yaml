---
openapi: 3.0.1
info: !php/object "O:8:\"stdClass\":5:{s:5:\"title\";s:19:\"Depot Lifecycle API\";s:11:\"description\";s:3249:\"#
  Purpose\nA depot centric API for managing the interchange activity & repair lifecycle
  of a shipping container.  The API is expected to be used by Customers, Depots, and
  Owners to faciliate real time communication between systems instead of traditional
  EDI files.\n\n# Overview\nThe depot lifecycle API is a RESTful API.  It's requests
  & responses are loosely based upon traditional EDI files.  For code defintions,
  explanations, or traditional EDI definitions refer to [IICL TB 002, February 2003](https://www.iicl.org/iiclforms/assets/File/public/bulletins/TB002_EDIS_February_2003.pdf).
  \ The requests and responses are formatted according to the [JSON](https://www.json.org/)
  standard.\n\n# Reference\nThis API is documented by the [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  specification.  This page was created by the [Swagger-Editor](https://github.com/swagger-api/swagger-editor)
  tool.  The *yaml* specification file can be found [here](depot-lifecycle-openapi.yaml).\n\n#
  Expectations\nNot all parties are required or expected to implement every feature.
  \ Any feature not implemented should return a http status code of `501`.\n\n# Depreciation\nIf
  this API were to be discontinued, a minimum of 6 months time would pass before it's
  removal.\n\n# Authentication\n[JSON Web Token, or JWT,](https://jwt.io/) is used
  for stateless authentication to secure all endpoints of this API.  Since all requests
  are sent using https, tokens are not encrypted.  Tokens follow the [RFC 6750 Bearer
  Token](https://tools.ietf.org/html/rfc6750) format.  \n\n## 1. Example JWT Token\n```\n{\n
  \   \"username\": \"jdoe\",\n    \"roles\": [\n        \"ROLE_GATE_CREATE\",\n        \"ROLE_GATE_UPDATE\"\n
  \   ],\n    \"email\":\"j.doe@example.com\",\n    \"token_type\":\"Bearer\",\n    \"access_token\":\"eyJhbGciOiJIUzI1NiJ9...\",\n
  \   \"expires_in\":28800,        \n    \"refresh_token\":\"eyJhbGciOiJIUzI1NiJ9...\"\n}\n```\n\nAn
  access_token is provided for authentication to API endpoints and a refresh_token
  is provided to generate a new access_token when one expires.\n\n## 2. Obtaining
  an access token\nIssuing a POST request to `/api/login` with a username and password
  payload will cause a JWT token to be issued in the response.\n```\nPOST /api/login
  HTTP/1.1\nContent-Type: text/plain; charset=utf-8\nHost: www.example.com\n\n{\n
  \ \"username\": \"jdoe\",\n  \"password\": \"jdoepassword\"\n}\n```\n\n## 3. Refreshing
  an expired token\nIssuing a POST request to `/oauth/access_token` with the refresh_token
  from the JWT token previously issued and a grant_type of refresh_token will reissue
  the JWT.\n```\nPOST /oauth/access_token HTTP/1.1\nHost: www.example.com\nContent-Type:
  application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=eyJhbGciOiJIUzI1NiJ9...\n```\n\n##
  4. Checking if a token is valid\nAny token can be checked if it's still valid by
  issuing a POST request to `/api/validate`.\n```\nGET /api/validate HTTP/1.1\nHost:
  www.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiJ9...\nContent-Type: application/json;
  charset=utf-8\n```\n\n## 5. Accessing a protected resource\nUse the authorization
  header to supply the JWT for authentication to a protected resource.\n```\nGET /api/v2/gate/CONU1234561
  HTTP/1.1\nHost: www.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiJ9...\n```\n\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:16:\"api-edi@trtn.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}s:7:\"version\";s:5:\"2.0.0\";}"
paths: []
...
