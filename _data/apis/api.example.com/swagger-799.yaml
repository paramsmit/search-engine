---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:5:\"title\";s:14:\"beego Test API\";s:11:\"description\";s:66:\"beego
  has a very cool tools to autogenerate documents for your API\";s:7:\"version\";s:5:\"1.0.0\";s:14:\"termsOfService\";s:16:\"http://beego.me/\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:17:\"astaxie@gmail.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
basePath: /v1
paths:
  /crawl/:
    get:
      tags:
      - crawl
      description: get input
      operationId: CrawlController.Get
      parameters:
      - in: query
        name: input
        description: the input you want to get
        required: true
        type: string
      responses:
        200:
          description: '{string} models.Crawl'
        403:
          description: :string is empty
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        200:
          schema:
            $ref: '#/definitions/models.Object'
        403:
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        200:
          description: '{string} models.Object.Id'
        403:
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        200:
          schema:
            $ref: '#/definitions/models.Object'
        403:
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        200:
          schema:
            $ref: '#/definitions/models.Object'
        403:
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        200:
          description: '{string} delete success!'
        403:
          description: objectId is empty
  /student/:
    get:
      tags:
      - student
      description: get all students
      operationId: StudentController.GetAll
      responses:
        200:
          schema:
            $ref: '#/definitions/models.Student'
        403:
          description: :studentId is empty
    post:
      tags:
      - student
      description: create Student
      operationId: StudentController.Create
      parameters:
      - in: body
        name: body
        description: The student content
        required: true
        schema:
          $ref: '#/definitions/models.Student'
      responses:
        200:
          description: '{string} models.Student.Id'
        403:
          description: body is empty
  /student/searchByName:
    get:
      tags:
      - student
      description: find students by name
      operationId: StudentController.Get
      parameters:
      - in: query
        name: name
        description: the students you want to get
        required: true
        type: string
      responses:
        200:
          description: '{student} models.Student'
        403:
          description: :name is empty
  /student/{studentId}:
    get:
      tags:
      - student
      description: find student by studentId
      operationId: StudentController.Get
      parameters:
      - in: path
        name: studentId
        description: the student you want to get
        required: true
        type: string
      responses:
        200:
          description: '{student} models.Student'
        403:
          description: :studentId is empty
    put:
      tags:
      - student
      description: update the student
      operationId: StudentController.Update
      parameters:
      - in: path
        name: studentId
        description: The studentId you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Student'
      responses:
        200:
          schema:
            $ref: '#/definitions/models.Student'
        403:
          description: :studentId is empty
    delete:
      tags:
      - student
      description: delete the student
      operationId: StudentController.Delete
      parameters:
      - in: path
        name: studentId
        description: The studentId you want to delete
        required: true
        type: string
      responses:
        200:
          description: '{string} delete success!'
        403:
          description: studentId is empty
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        200:
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        200:
          description: '{int} models.User.Id'
        403:
          description: body is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        200:
          description: '{string} login success'
        403:
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        200:
          description: '{string} logout success'
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        200:
          schema:
            $ref: '#/definitions/models.User'
        403:
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        200:
          schema:
            $ref: '#/definitions/models.User'
        403:
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        200:
          description: '{string} delete success!'
        403:
          description: uid is empty
definitions: !php/object "O:8:\"stdClass\":4:{s:13:\"models.Object\";O:8:\"stdClass\":3:{s:5:\"title\";s:6:\"Object\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"ObjectId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"PlayerName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Score\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}s:14:\"models.Profile\";O:8:\"stdClass\":3:{s:5:\"title\";s:7:\"Profile\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:7:\"Address\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"Age\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:5:\"Email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"Gender\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"models.Student\";O:8:\"stdClass\":3:{s:5:\"title\";s:7:\"Student\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"models.User\";O:8:\"stdClass\":3:{s:5:\"title\";s:4:\"User\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"Profile\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/models.Profile\";}s:8:\"Username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
