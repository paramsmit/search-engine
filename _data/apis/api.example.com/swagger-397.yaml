---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":4:{s:5:\"title\";s:9:\"Langfight\";s:11:\"description\";s:13:\"Langfight
  API\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"BSD\";s:3:\"url\";s:43:\"http://opensource.org/licenses/BSD-2-Clause\";}s:7:\"version\";s:5:\"1.0.0\";}"
basePath: /
paths:
  /attempts:
    get:
      tags:
      - attempts
      description: Get all published attempts.
      operationId: GetAttempts
      parameters:
      - $ref: '#/parameters/limitQuery'
      - $ref: '#/parameters/skipQuery'
      - $ref: '#/parameters/spokenQuery'
      - $ref: '#/parameters/practiceQuery'
      - $ref: '#/parameters/userLangQuery'
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Attempt'
  /attempts/{id}:
    get:
      tags:
      - attempts
      description: Get specific attempt.
      operationId: GetAttempt
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Attempt'
  /attempts/{id}/comments:
    get:
      tags:
      - comment
      description: Get all comments on an attempt.
      operationId: GetCommentsByAttemptID
      parameters:
      - name: id
        in: path
        description: Attempt id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Comment'
    put:
      tags:
      - comment
      description: Publish new comment on an attempt.
      operationId: PutComment
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: id
        in: path
        description: Attempt id
        required: true
        type: string
      - name: Id
        in: formData
        description: Comment id
        required: true
        type: string
      - name: UserId
        in: formData
        description: User id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
  /attempts/{id}/ratings:
    get:
      tags:
      - rating
      description: Get attempt's ratings summary.
      operationId: GetRatingSummaryByAttemptID
      parameters:
      - name: id
        in: path
        description: Attempt Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.RatingSummary'
    put:
      tags:
      - rating
      description: Publish an attempt's rating.
      operationId: PutRating
      parameters:
      - name: id
        in: path
        description: Attempt Id
        required: true
        type: string
      - name: UserId
        in: formData
        description: User id
        required: true
        type: string
      - name: Score
        in: formData
        description: Score
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
  /entries:
    get:
      tags:
      - entries
      description: Get all entries in the system.
      operationId: GetEntries
      parameters:
      - $ref: '#/parameters/limitQuery'
      - $ref: '#/parameters/skipQuery'
      - $ref: '#/parameters/spokenQuery'
      - $ref: '#/parameters/practiceQuery'
      - $ref: '#/parameters/userLangQuery'
      - $ref: '#/parameters/bunndleQuery'
      - $ref: '#/parameters/versionCodeQuery'
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Entry'
  /entries/{id}:
    get:
      tags:
      - entries
      description: Get specific entry.
      operationId: GetEntry
      parameters:
      - name: id
        in: path
        description: Entry Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Entry'
  /subtitles/entry/{id}:
    get:
      tags:
      - subtitle
      description: Get subtitle by entry id
      operationId: GetSubtitleByEntryID
      parameters:
      - name: id
        in: path
        description: Entry Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Subtitle'
    put:
      tags:
      - subtitle
      description: Save subtitle by entry id
      operationId: SaveSubtitleByEntryID
      parameters:
      - name: id
        in: path
        description: Entry Id
        required: true
        type: string
      - name: SpokenText
        in: formData
        description: SpokenText
        required: true
        type: string
      - name: TranslationText
        in: formData
        description: TranslationText
        required: true
        type: string
      - name: SpokenLang
        in: formData
        description: SpokenLang
        required: true
        type: string
      - name: TranslationLang
        in: formData
        description: TranslationLang
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
  /tags:
    get:
      tags:
      - tag
      description: Get all tags.
      operationId: GetTags
      parameters:
      - $ref: '#/parameters/limitQuery'
      - $ref: '#/parameters/skipQuery'
      - $ref: '#/parameters/spokenQuery'
      - $ref: '#/parameters/practiceQuery'
      - $ref: '#/parameters/userLangQuery'
      - $ref: '#/parameters/bunndleQuery'
      - $ref: '#/parameters/versionCodeQuery'
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Tag'
  /tags/{id}/entries:
    get:
      tags:
      - entries
      description: Get entries with the given tag.
      operationId: GetEntriesByTagID
      parameters:
      - name: id
        in: path
        description: Tag Id
        required: true
        type: string
      - $ref: '#/parameters/limitQuery'
      - $ref: '#/parameters/skipQuery'
      - $ref: '#/parameters/bunndleQuery'
      - $ref: '#/parameters/versionCodeQuery'
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Entry'
  /users:
    put:
      tags:
      - user
      description: Register a new user.
      operationId: PutUser
      parameters:
      - name: Username
        in: formData
        description: Username
        required: true
        type: string
      - name: CognitoId
        in: formData
        description: CognitoId
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
  /users/{id}:
    get:
      tags:
      - user
      description: Get specific user's info.
      operationId: GetUser
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /users/{id}/activities:
    get:
      tags:
      - user
      description: Get user's activities.
      operationId: GetActivitiesByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/github.com/hyperworks/go-getstream.Activity'
      security:
      - api_key: []
  /users/{id}/attempts:
    get:
      tags:
      - attempts
      description: Get user's list of attempts.
      operationId: GetAttemptsByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Attempt'
      security:
      - api_key: []
    put:
      tags:
      - attempts
      description: Publish user's attempt.
      operationId: PutAttempt
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      - name: Id
        in: formData
        description: Attempts id
        required: true
        type: string
      - name: UserId
        in: formData
        description: User id
        required: true
        type: string
      - name: EntryId
        in: formData
        description: Entry id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
      security:
      - api_key: []
  /users/{id}/comments:
    get:
      tags:
      - comment
      description: Get comments made by the user.
      operationId: GetCommentsByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - api_key: []
  /users/{id}/comments_received:
    get:
      tags:
      - comment
      description: Get user's received comments.
      operationId: GetReceivedCommentsByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Comment'
      security:
      - api_key: []
  /users/{id}/devices:
    put:
      tags:
      - devices
      description: Registers a mobile device token.
      operationId: RegisterDeviceToken
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: string
      - name: Token
        in: formData
        description: Token
        required: true
        type: string
      - name: Type
        in: formData
        description: Type
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
      security:
      - api_key: []
  /users/{id}/entries:
    get:
      tags:
      - entries
      description: Get user's saved entries.
      operationId: GetEntriesByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Entry'
      security:
      - api_key: []
    put:
      tags:
      - entries
      description: Save new user's entry.
      operationId: PutUserEntry
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      - name: Id
        in: formData
        description: Entry id
        required: true
        type: string
      - name: SpokenText
        in: formData
        description: SpokenText
        required: true
        type: string
      - name: SpokenLang
        in: formData
        description: SpokenLang
        required: true
        type: string
      - name: PronunciationText
        in: formData
        description: PronunciationText
        required: true
        type: string
      - name: PronunciationLang
        in: formData
        description: PronunciationLang
        required: true
        type: string
      - name: Translation
        in: formData
        description: Translation
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
  /users/{id}/points:
    get:
      tags:
      - settings
      description: Get user's total points.
      operationId: GetPointsByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.CreditResult'
      security:
      - api_key: []
  /users/{id}/settings:
    get:
      tags:
      - settings
      description: Get user's settings.
      operationId: GetSettingsByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Settings'
      security:
      - api_key: []
    put:
      tags:
      - settings
      description: Save user's settings.
      operationId: PutSettings
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      - name: AppLanguage
        in: formData
        description: AppLanguage
        required: true
        type: string
      - name: LearningLanguage
        in: formData
        description: LearningLanguage
        required: true
        type: string
      - name: AutoPlay
        in: formData
        description: AutoPlay
        required: true
        type: boolean
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
      security:
      - api_key: []
  /users/{id}/stats:
    get:
      tags:
      - stats
      description: Get all user's session statistics.
      operationId: GetStatsByUserID
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Stat'
      security:
      - api_key: []
    put:
      tags:
      - stats
      description: Save user's session statistics.
      operationId: PutStats
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      - name: Id
        in: formData
        description: Stat id
        required: true
        type: string
      - name: UserId
        in: formData
        description: User id
        required: true
        type: string
      - name: AppLanguage
        in: formData
        description: AppLanguage
        required: true
        type: string
      - name: LearningLanguage
        in: formData
        description: LearningLanguage
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/framework.Success'
      security:
      - api_key: []
  /users/{id}/tokens:
    get:
      tags:
      - auth
      description: Exchange a 3rd party token for a user's authentication token.
      operationId: GetAuthToken
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: string
      - name: token_type
        in: query
        description: token_type
        required: true
        type: string
      - name: token_id
        in: query
        description: token_id
        required: true
        type: string
      - name: token
        in: query
        description: token
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.AuthToken'
produces:
- application/json
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":14:{s:17:\"framework.Success\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"success\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:43:\"github.com/hyperworks/go-getstream.Activity\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":8:{s:5:\"actor\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:53:\"#/definitions/github.com/hyperworks/go-getstream.Slug\";}s:10:\"foreign_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"object\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:53:\"#/definitions/github.com/hyperworks/go-getstream.Slug\";}s:6:\"target\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:53:\"#/definitions/github.com/hyperworks/go-getstream.Slug\";}s:4:\"time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"to\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:53:\"#/definitions/github.com/hyperworks/go-getstream.Slug\";}}s:4:\"verb\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:39:\"github.com/hyperworks/go-getstream.Slug\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"ID\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"models.Attempt\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:7:\"EntryId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"models.AuthToken\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":7:{s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"ProviderId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"models.Comment\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"AttemptId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:19:\"models.CreditResult\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Total\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}}}s:12:\"models.Entry\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":11:{s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:12:\"HasLipsVideo\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"HasSubtitles\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"PronunciationLang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"PronunciationText\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"SpokenLang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"SpokenText\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"Translation\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"models.RatingSummary\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"Negative\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:8:\"Positive\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:3:\"Sum\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}}}s:15:\"models.Settings\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":7:{s:11:\"AppLanguage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"AutoPlay\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"LearningLanguage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"models.Stat\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":12:{s:11:\"AppLanguage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"CardsShown\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:4:\"Date\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"ItemsRecorded\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:13:\"ItemsReviewed\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:13:\"ItemsUploaded\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:16:\"LearningLanguage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"SecondsInSession\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"models.Subtitle\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":8:{s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:7:\"EntryId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"SpokenLang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"SpokenText\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"TranslationLang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"TranslationText\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}}}s:10:\"models.Tag\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":7:{s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"PronunciationLang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"SpokenLang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}}}s:11:\"models.User\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:9:\"CognitoId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"CreatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:8:\"FullName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:8:\"Username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
