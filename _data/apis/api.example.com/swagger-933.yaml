---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:5:\"title\";s:16:\"Get a ticket API\";s:11:\"description\";s:44:\"A
  program to receive QR code tickets online.\";s:7:\"version\";s:5:\"1.0.0\";s:14:\"termsOfService\";s:16:\"http://beego.me/\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:46:\"https://github.com/xmaihh/GolangTrainingThings\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
basePath: /v1
paths:
  /admin/:
    get:
      tags:
      - admin
      description: get all admins
      operationId: AdminController.GetAll
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Admin'
        403:
          description: :adminId is empty
    post:
      tags:
      - admin
      description: create admin
      operationId: AdminController.Create
      parameters:
      - in: body
        name: body
        description: The Admin content
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      responses:
        200:
          description: '{string} models.Admin.Id'
        403:
          description: body is empty
  /admin/login:
    get:
      tags:
      - admin
      description: Logs admin into the system
      operationId: AdminController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        200:
          description: '{string} login success'
        403:
          description: admin not exist
  /admin/logout:
    get:
      tags:
      - admin
      description: Logs out current logged in admin session
      operationId: AdminController.logout
      responses:
        200:
          description: '{string} logout success'
  /admin/{adminId}:
    get:
      tags:
      - admin
      description: find admin by adminId
      operationId: AdminController.Get
      parameters:
      - in: path
        name: adminId
        description: the adminId you want to get
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Admin'
        403:
          description: :adminId is empty
    put:
      tags:
      - admin
      description: update the admin
      operationId: AdminController.Update
      parameters:
      - in: path
        name: adminId
        description: The adminId you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body about Admin
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Admin'
        403:
          description: :adminId is empty
    delete:
      tags:
      - admin
      description: delete the admin
      operationId: AdminController.Delete
      parameters:
      - in: path
        name: adminId
        description: The adminId you wnat to delete
        required: true
        type: string
      responses:
        200:
          description: '{string} delete success!'
        403:
          description: adminId is empty
  /ticket/:
    get:
      tags:
      - ticket
      description: get all tickets
      operationId: TicketController.GetAll
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Ticket'
        403:
          description: :ticketId is empty
  /ticket/t[post]:
    get:
      tags:
      - ticket
      operationId: TicketController.Create
      parameters:
      - in: body
        name: body
        description: The Ticket content
        required: true
        schema:
          $ref: '#/definitions/models.Ticket'
      responses:
        200:
          description: '{string} models.Ticket.TicketId'
        403:
          description: body is empty
  /ticket/{ticketId}:
    get:
      tags:
      - ticket
      description: get a ticket by ticketId
      operationId: TicketController.Get
      parameters:
      - in: path
        name: ticketId
        description: The ticketId you want to get
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Ticket'
        403:
          description: :ticketId is empty
    put:
      tags:
      - ticket
      description: update the ticket
      operationId: TicketController.Update
      parameters:
      - in: path
        name: ticketId
        description: The ticketId you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for ticket content
        required: true
        schema:
          $ref: '#/definitions/models.Ticket'
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.Ticket'
        403:
          description: :ticketId is empty
    delete:
      tags:
      - ticket
      description: delete the ticket
      operationId: TicketController.Delete
      parameters:
      - in: path
        name: ticketId
        description: The ticketId you want to delete
        required: true
        type: string
      responses:
        200:
          description: '{string} delete success!'
        403:
          description: ticketId is empty
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        200:
          description: '{int} models.User.Id'
        403:
          description: body is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        200:
          description: '{string} login success'
        403:
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        200:
          description: '{string} logout success'
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        403:
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        403:
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        200:
          description: '{string} delete success!'
        403:
          description: uid is empty
definitions: !php/object "O:8:\"stdClass\":3:{s:12:\"models.Admin\";O:8:\"stdClass\":4:{s:5:\"title\";s:5:\"Admin\";s:8:\"required\";a:6:{i:0;s:2:\"ID\";i:1;s:8:\"Username\";i:2;s:8:\"Password\";i:3;s:9:\"Totalcode\";i:4;s:3:\"Exp\";i:5;s:9:\"Userlimit\";}s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:3:\"Exp\";O:8:\"stdClass\":2:{s:11:\"description\";s:7:\"expired\";s:4:\"type\";s:6:\"string\";}s:2:\"ID\";O:8:\"stdClass\":2:{s:11:\"description\";s:8:\"admin
  id\";s:4:\"type\";s:6:\"string\";}s:8:\"Password\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"admin
  password\";s:4:\"type\";s:6:\"string\";}s:9:\"Totalcode\";O:8:\"stdClass\":3:{s:11:\"description\";s:10:\"total
  code\";s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:9:\"Userlimit\";O:8:\"stdClass\":3:{s:11:\"description\";s:9:\"userlimit\";s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"Username\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"admin
  username\";s:4:\"type\";s:6:\"string\";}}}s:13:\"models.Ticket\";O:8:\"stdClass\":3:{s:5:\"title\";s:6:\"Ticket\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:3:\"Exp\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"Field\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"TicketId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"Ticketcode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"Ticketdesc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"UserId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"Usestatus\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}s:11:\"models.User\";O:8:\"stdClass\":3:{s:5:\"title\";s:4:\"User\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"CreatedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"Id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"UpdatedAt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
