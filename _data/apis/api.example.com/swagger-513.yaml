---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:21:\"$RestApiResourceName$\";s:11:\"description\";s:70:\"API
  for the $ResourceGroupName$ service ($DeploymentName$ deployment).\";}"
paths: ~
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":10:{s:16:\"PostAudioRequest\";O:8:\"stdClass\":4:{s:11:\"description\";s:91:\"Parameters
  for the Amazon Lex PostContent function, used to send an utterance to Amazon Lex\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:167:\"The
  ID of the client application user. Amazon Lex uses this to identify a user's conversation
  with your bot. Example would be a GUID for your user or unique user name.\";s:4:\"type\";s:6:\"string\";}s:8:\"bot_name\";O:8:\"stdClass\":2:{s:11:\"description\";s:79:\"Name
  of the Amazon Lex bot that will process the utterance. Example: MapPingBot\";s:4:\"type\";s:6:\"string\";}s:9:\"bot_alias\";O:8:\"stdClass\":2:{s:11:\"description\";s:102:\"Alias
  of the Amazon Lex bot that will process the utterance, typical examples would be
  PROD, DEV, etc.\";s:4:\"type\";s:6:\"string\";}s:5:\"audio\";O:8:\"stdClass\":3:{s:11:\"description\";s:148:\"PCM
  audio data, must include a WAV header and be in 16 bit, 16000 Hz, 1 channel format.
  This is binary data stored as a string with base64 encoding.\";s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"byte\";}s:18:\"session_attributes\";O:8:\"stdClass\":2:{s:11:\"description\";s:142:\"A
  JSON string which will be passed untouched as a return value from PostContent. This
  allows passing in user specific context in the request. \";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:4:{i:0;s:7:\"user_id\";i:1;s:8:\"bot_name\";i:2;s:9:\"bot_alias\";i:3;s:5:\"audio\";}}s:15:\"PostTextRequest\";O:8:\"stdClass\":4:{s:11:\"description\";s:131:\"Parameters
  for the Amazon Lex PostText function, used to send an utterance to Amazon Lex in
  text form, usually for intent debugging\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:167:\"The
  ID of the client application user. Amazon Lex uses this to identify a user's conversation
  with your bot. Example would be a GUID for your user or unique user name.\";s:4:\"type\";s:6:\"string\";}s:8:\"bot_name\";O:8:\"stdClass\":2:{s:11:\"description\";s:79:\"Name
  of the Amazon Lex bot that will process the utterance. Example: MapPingBot\";s:4:\"type\";s:6:\"string\";}s:9:\"bot_alias\";O:8:\"stdClass\":2:{s:11:\"description\";s:102:\"Alias
  of the Amazon Lex bot that will process the utterance, typical examples would be
  PROD, DEV, etc.\";s:4:\"type\";s:6:\"string\";}s:4:\"text\";O:8:\"stdClass\":2:{s:11:\"description\";s:34:\"The
  text utterance to be processed\";s:4:\"type\";s:6:\"string\";}s:18:\"session_attributes\";O:8:\"stdClass\":2:{s:11:\"description\";s:137:\"A
  JSON string which will be passed untouched as a return value from PostText. This
  allows passing in user specific context in the request\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:4:{i:0;s:7:\"user_id\";i:1;s:8:\"bot_name\";i:2;s:9:\"bot_alias\";i:3;s:4:\"text\";}}s:17:\"PostAudioResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:55:\"Parameters
  returned from either PostContent or PostText\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:6:\"intent\";O:8:\"stdClass\":2:{s:11:\"description\";s:94:\"Current
  user intent that Amazon Lex is aware of, if one has been identified from the utterance\";s:4:\"type\";s:6:\"string\";}s:12:\"dialog_state\";O:8:\"stdClass\":2:{s:11:\"description\";s:194:\"Identifies
  the current state of the user interaction. Please see http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html#API_runtime_PostContent_ResponseSyntax
  for more information\";s:4:\"type\";s:6:\"string\";}s:16:\"input_transcript\";O:8:\"stdClass\":2:{s:11:\"description\";s:110:\"If
  the input was an audio stream, contains the literal words recognized by Amazon Lex
  (rather than the intent)\";s:4:\"type\";s:6:\"string\";}s:7:\"message\";O:8:\"stdClass\":2:{s:11:\"description\";s:82:\"Message
  to convey to the user if any (typically set with one of the dialog states)\";s:4:\"type\";s:6:\"string\";}s:18:\"session_attributes\";O:8:\"stdClass\":2:{s:11:\"description\";s:76:\"The
  JSON string passed through the function to provide user specific context\";s:4:\"type\";s:6:\"string\";}s:5:\"slots\";O:8:\"stdClass\":2:{s:11:\"description\";s:56:\"JSON
  map of slot names and values detected by Amazon Lex\";s:4:\"type\";s:6:\"string\";}s:14:\"slot_to_elicit\";O:8:\"stdClass\":2:{s:11:\"description\";s:110:\"If
  the dialogState value is ElicitSlot, returns the name of the slot for which Amazon
  Lex is eliciting a value\";s:4:\"type\";s:6:\"string\";}}}s:18:\"PostBotDescRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"desc_file\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"The
  bot description JSON file, describing the bot to create\";s:4:\"type\";s:6:\"object\";}}}s:18:\"GetBotDescResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"desc_file\";O:8:\"stdClass\":2:{s:11:\"description\";s:44:\"A
  bot description file for the requested bot\";s:4:\"type\";s:6:\"object\";}}}s:19:\"GetListBotsResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"bots\";O:8:\"stdClass\":3:{s:11:\"description\";s:64:\"Array
  of bot information, see ListBotsEntry for details on items\";s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/ListBotsEntry\";}}s:9:\"nextToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:131:\"The
  list of bots is paginated, if there are more entries to retrieve, this token is
  used in the next call to retrieve those entries\";s:4:\"type\";s:6:\"string\";}}}s:13:\"ListBotsEntry\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"bot_name\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"The
  name of the bot\";s:4:\"type\";s:6:\"string\";}s:15:\"current_version\";O:8:\"stdClass\":2:{s:11:\"description\";s:36:\"The
  latest version number of the bot\";s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":2:{s:11:\"description\";s:81:\"Current
  status of the bot. Valid values are BUILDING | READY | FAILED | NOT_BUILT\";s:4:\"type\";s:6:\"string\";}s:7:\"updated\";O:8:\"stdClass\":2:{s:11:\"description\";s:33:\"The
  last date the bot was updated\";s:4:\"type\";s:6:\"string\";}s:7:\"created\";O:8:\"stdClass\":2:{s:11:\"description\";s:28:\"The
  date the bot was created\";s:4:\"type\";s:6:\"string\";}}}s:17:\"BotStatusResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":2:{s:11:\"description\";s:91:\"Current
  status of the bot. Valid values are BUILDING | READY | FAILED | NOT_BUILT | DELETED\";s:4:\"type\";s:6:\"string\";}}}s:13:\"ServiceStatus\";O:8:\"stdClass\":4:{s:11:\"description\";s:0:\"\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"status\";O:8:\"stdClass\":2:{s:11:\"description\";s:51:\"If
  the service is live, returns the string 'online'\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:6:\"status\";}}s:5:\"Error\";O:8:\"stdClass\":4:{s:11:\"description\";s:0:\"\";s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"errorCode\";O:8:\"stdClass\":2:{s:11:\"description\";s:29:\"HTTP
  status code of the error\";s:4:\"type\";s:6:\"string\";}s:12:\"errorMessage\";O:8:\"stdClass\":2:{s:11:\"description\";s:31:\"Descriptive
  string of the error\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:9:\"errorCode\";i:1;s:12:\"errorMessage\";}}}"
...
