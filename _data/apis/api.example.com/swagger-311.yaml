---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:7:\"version\";s:3:\"1.0\";s:5:\"title\";s:20:\"LoopBack
  Application\";}"
basePath: /api
paths:
  /Users/{id}/accessTokens/{fk}:
    get:
      tags:
      - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
      - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
    put:
      tags:
      - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
      - name: fk
        in: path
        description: Foreign key for accessTokens
        required: true
        type: string
        format: JSON
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/AccessToken'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /Users/{id}/accessTokens:
    get:
      tags:
      - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
      - name: filter
        in: query
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
      - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
      - name: data
        in: body
        required: false
        schema:
          $ref: '#/definitions/AccessToken'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
      - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        204:
          description: Request was successful
      deprecated: false
  /Users/{id}/accessTokens/count:
    get:
      tags:
      - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
      - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
      - User
      summary: Update an existing model instance or insert a new one into the data
        source.
      operationId: User.upsert
      parameters:
      - name: data
        in: body
        description: Model instance data
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
      - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/{id}/exists:
    get:
      tags:
      - User
      summary: Check whether a model instance exists in the data source.
      operationId: User.exists__get_Users_{id}_exists
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  /Users/{id}:
    head:
      tags:
      - User
      summary: Check whether a model instance exists in the data source.
      operationId: User.exists__head_Users_{id}
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
      - User
      summary: Find a model instance by id from the data source.
      operationId: User.findById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      - name: filter
        in: query
        description: Filter defining fields and include
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
      - User
      summary: Delete a model instance by id from the data source.
      operationId: User.deleteById
      parameters:
      - name: id
        in: path
        description: Model id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
      - User
      summary: Update attributes for a model instance and persist it into the data
        source.
      operationId: User.prototype.updateAttributes
      parameters:
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/User'
      - name: id
        in: path
        description: User id
        required: true
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
      - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
      - name: filter
        in: query
        description: Filter defining fields, where, include, order, offset, and limit
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
      - User
      summary: Update instances of the model matched by where from the data source.
      operationId: User.updateAll
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      - name: data
        in: body
        description: An object of model property name/value pairs
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Users/count:
    get:
      tags:
      - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
      - name: where
        in: query
        description: Criteria to match model instances
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/change-stream:
    post:
      tags:
      - User
      summary: Create a change stream.
      operationId: User.createChangeStream__post_Users_change-stream
      parameters:
      - name: options
        in: formData
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
      - User
      summary: Create a change stream.
      operationId: User.createChangeStream__get_Users_change-stream
      parameters:
      - name: options
        in: query
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Users/login:
    post:
      tags:
      - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
      - name: credentials
        in: body
        required: true
        schema:
          type: object
      - name: include
        in: query
        description: Related objects to include in the response. See the description
          of return value for more details.
        required: false
        type: string
        format: JSON
      responses:
        200:
          description: Request was successful
          schema:
            description: The response body contains properties of the AccessToken
              created on login.nDepending on the value of `include` parameter, the
              body may contain additional properties:nn  - `user` - `{User}` - Data
              of the currently logged in user. (`include=user`)nn
            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
      - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        204:
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
      - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
      - name: uid
        in: query
        required: true
        type: string
      - name: token
        in: query
        required: true
        type: string
      - name: redirect
        in: query
        required: false
        type: string
      responses:
        204:
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
      - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
      - name: options
        in: body
        required: true
        schema:
          type: object
      responses:
        204:
          description: Request was successful
      deprecated: false
produces:
- application/json
- application/xml
- text/xml
- application/javascript
- text/javascript
definitions: !php/object "O:8:\"stdClass\":2:{s:11:\"AccessToken\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"ttl\";O:8:\"stdClass\":4:{s:7:\"default\";i:1209600;s:11:\"description\";s:44:\"time
  to live in seconds (2 weeks by default)\";s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:6:\"userId\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:1:{i:0;s:2:\"id\";}s:20:\"additionalProperties\";b:0;}s:4:\"User\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":10:{s:5:\"realm\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"credentials\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:10:\"challenges\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"emailVerified\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:11:\"lastUpdated\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";}}s:8:\"required\";a:1:{i:0;s:5:\"email\";}s:20:\"additionalProperties\";b:0;}}"
...
