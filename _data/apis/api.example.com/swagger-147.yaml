---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:5:\"title\";s:18:\"Hive Metastore Api\";s:7:\"version\";s:3:\"1.0\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:22:\"Hive
  Metastore Project\";s:3:\"url\";s:34:\"https://github.com/akolb1/hmsv2api\";s:5:\"email\";s:17:\"akolb1@google.com\";}}"
paths:
  /v2/db/{catalog}:
    get:
      summary: Return all databases in a catalog
      operationId: ListDatabases
      responses:
        200:
          description: (streaming responses)
          schema:
            $ref: '#/definitions/metastoreDatabase'
      parameters:
      - name: catalog
        in: path
        required: true
        type: string
      - name: cookie
        in: query
        required: false
        type: string
      - name: name_pattern
        in: query
        required: false
        type: string
      - name: exclude_params
        in: query
        required: false
        type: boolean
        format: boolean
      tags:
      - Metastore
  /v2/db/{catalog}/{id.name}:
    get:
      summary: Get database information
      operationId: GetDatabase
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/metastoreGetDatabaseResponse'
      parameters:
      - name: catalog
        in: path
        required: true
        type: string
      - name: id.name
        in: path
        required: true
        type: string
      - name: id.id
        in: query
        required: false
        type: string
      - name: cookie
        in: query
        required: false
        type: string
      tags:
      - Metastore
  /v2/partition/{catalog}/{db_id.name}/{table_id.name}:
    get:
      summary: Get partition information
      operationId: GetPartition
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/metastoreGetPartitionResponse'
      parameters:
      - name: catalog
        in: path
        required: true
        type: string
      - name: db_id.name
        in: path
        required: true
        type: string
      - name: table_id.name
        in: path
        required: true
        type: string
      - name: db_id.id
        in: query
        required: false
        type: string
      - name: table_id.id
        in: query
        required: false
        type: string
      - name: values
        in: query
        required: false
        type: array
        items:
          type: string
      tags:
      - Metastore
  /v2/partitions/{catalog}/{db_id.name}/{table_id.name}:
    get:
      summary: List all partitions in a table
      operationId: ListPartitions
      responses:
        200:
          description: (streaming responses)
          schema:
            $ref: '#/definitions/metastorePartition'
      parameters:
      - name: catalog
        in: path
        required: true
        type: string
      - name: db_id.name
        in: path
        required: true
        type: string
      - name: table_id.name
        in: path
        required: true
        type: string
      - name: db_id.id
        in: query
        required: false
        type: string
      - name: table_id.id
        in: query
        required: false
        type: string
      - name: cookie
        in: query
        required: false
        type: string
      - name: fields
        description: Field selectors.nnIf specified, only certain fields are sent.
          The following fields are supported:n  - locationn  - valuesn  - parameters
        in: query
        required: false
        type: array
        items:
          type: string
      tags:
      - Metastore
  /v2/table/{catalog}/{db_id.name}:
    get:
      summary: Get all tables from a database
      operationId: ListTables
      responses:
        200:
          description: (streaming responses)
          schema:
            $ref: '#/definitions/metastoreTable'
      parameters:
      - name: catalog
        in: path
        required: true
        type: string
      - name: db_id.name
        in: path
        required: true
        type: string
      - name: db_id.id
        in: query
        required: false
        type: string
      - name: cookie
        in: query
        required: false
        type: string
      - name: fields
        description: 'Field selectors.nnIf specified, only certain fields are sent.
          The following fields are supported:n  - id: table Idn  - location: table
          locationn  - parameters: table user parametersn  - partkeys: table partition
          keys'
        in: query
        required: false
        type: array
        items:
          type: string
      tags:
      - Metastore
  /v2/table/{catalog}/{db_id.name}/{id.name}:
    get:
      summary: Get table information
      operationId: GetTable
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/metastoreGetTableResponse'
      parameters:
      - name: catalog
        in: path
        required: true
        type: string
      - name: db_id.name
        in: path
        required: true
        type: string
      - name: id.name
        in: path
        required: true
        type: string
      - name: db_id.id
        in: query
        required: false
        type: string
      - name: id.id
        in: query
        required: false
        type: string
      - name: cookie
        in: query
        required: false
        type: string
      tags:
      - Metastore
produces:
- application/json
schemes:
- http
- https
definitions: !php/object "O:8:\"stdClass\":17:{s:19:\"RequestStatusStatus\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:6:{i:0;s:9:\"STATUS_OK\";i:1;s:12:\"STATUS_ERROR\";i:2;s:15:\"STATUS_NOTFOUND\";i:3;s:15:\"STATUS_CONFLICT\";i:4;s:11:\"STATUS_BUSY\";i:5;s:19:\"STATUS_INTERNAL_ERR\";}s:7:\"default\";s:9:\"STATUS_OK\";}s:17:\"metastoreDatabase\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/metastoreId\";}s:6:\"seq_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:6:\"uint64\";}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:17:\"system_parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"description\";s:830:\"Database
  is a container for tables.\n\nDatabase object has two sets of parameters:\n - User
  parameters are intended for user and are just transparently passed around\n - System
  parameters are intended to be used by Hive for its internal purposes\n\nDatabase
  has two IDs:\n- Id.id is assigned during database creation and it is a unique and
  stable ID. WHile database\n  name can change, the id can't, so clients can cache
  Database by ID.\n- seq_id is assigned during database creation. It should be a unique
  ID within the catalog.\n  The intention is having an incrementing integer value
  for each new database. It is not\n  guaranteed to be monotonous.\n\nOriginal Metastore
  Database object also had owner information.\nThese can be represented using system
  parameters if needed since the current\nmetastore service does not interpret Owner
  info.\";}s:20:\"metastoreFieldSchema\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:11:\"description\";s:50:\"FieldSchema
  defines name and type for each column.\";}s:28:\"metastoreGetDatabaseResponse\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"database\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/metastoreDatabase\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/metastoreRequestStatus\";}}s:11:\"description\";s:133:\"The
  result consists of the database information (which may be empty in case of failure)\nand
  request status.\nTODO: specify error cases\";s:5:\"title\";s:29:\"Result of GetDatabase
  request\";}s:29:\"metastoreGetPartitionResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"partition\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/definitions/metastorePartition\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/metastoreRequestStatus\";}}}s:25:\"metastoreGetTableResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"table\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/metastoreTable\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/metastoreRequestStatus\";}}}s:11:\"metastoreId\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:11:\"description\";s:277:\"Objects
  have unique name and unique ID.\n\nName of the object can change but ID never changes.
  This allows caching of objects\nby ID.\nBoth name and ID are just sequence of bytes
  - there are no\nassumptions about encoding or length.\nImplementations may enforce
  specific assumptions.\";}s:20:\"metastoreInputFormat\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:4:{i:0;s:9:\"IF_CUSTOM\";i:1;s:11:\"IF_SEQUENCE\";i:2;s:7:\"IF_TEXT\";i:3;s:7:\"IF_HIVE\";}s:7:\"default\";s:9:\"IF_CUSTOM\";s:11:\"description\";s:74:\"Known
  Input Formats. CUSTOM means that it should be specified as a string.\";}s:14:\"metastoreOrder\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"col\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"ascending\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:6:\"format\";s:7:\"boolean\";}}s:5:\"title\";s:56:\"sort
  order of a column (column name along with asc/desc)\";}s:21:\"metastoreOutputFormat\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:4:{i:0;s:9:\"OF_CUSTOM\";i:1;s:11:\"OF_SEQUENCE\";i:2;s:13:\"OF_IGNORE_KEY\";i:3;s:7:\"OF_HIVE\";}s:7:\"default\";s:9:\"OF_CUSTOM\";s:11:\"description\";s:527:\"Known
  Output Formats. CUSTOM means that it should be specified as a string.\n\nHere is
  a list of known output formats:\n\n- org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n-
  org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n- org.apache.hadoop.hive.ql.io.HiveNullValueSequenceFileOutputFormat\n-
  org.apache.hadoop.hive.ql.io.HivePassThroughOutputFormat\n- org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat\n-
  org.apache.hadoop.hive.ql.io.HiveBinaryOutputFormat\n- org.apache.hadoop.hive.ql.io.RCFileOutputFormat\";}s:18:\"metastorePartition\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"seq_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:6:\"uint64\";}s:6:\"values\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:2:\"sd\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:40:\"#/definitions/metastoreStorageDescriptor\";}s:10:\"parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:5:\"title\";s:9:\"Partition\";}s:22:\"metastoreRequestStatus\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/RequestStatusStatus\";}s:5:\"error\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:11:\"description\";s:84:\"General
  status for results.\n\nAll non-streaming requests should return RequestStatus.\";}s:18:\"metastoreSerDeInfo\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/definitions/metastoreSerdeType\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"serializationLib\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"parameters\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";s:34:\"NOTE:
  Should we enum this as well?\";}}s:5:\"title\";s:41:\"Serialization/Deserialization
  information\";}s:18:\"metastoreSerdeType\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:9:{i:0;s:12:\"SERDE_CUSTOM\";i:1;s:17:\"SERDE_LAZY_SIMPLE\";i:2;s:10:\"SERDE_AVRO\";i:3;s:10:\"SERDE_JSON\";i:4;s:9:\"SERDE_ORC\";i:5;s:11:\"SERDE_REGEX\";i:6;s:12:\"SERDE_THRIFT\";i:7;s:13:\"SERDE_PARQUET\";i:8;s:9:\"SERDE_CSV\";}s:7:\"default\";s:12:\"SERDE_CUSTOM\";s:11:\"description\";s:84:\"Known
  SerDes are represented using enum. Unknown ones are represented using strings.\";}s:26:\"metastoreStorageDescriptor\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":12:{s:4:\"cols\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/metastoreFieldSchema\";}}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"inputFormat\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/metastoreInputFormat\";}s:15:\"inputFormatName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"outputFormat\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:35:\"#/definitions/metastoreOutputFormat\";}s:16:\"outputFormatName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"numBuckets\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:9:\"serdeInfo\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/definitions/metastoreSerDeInfo\";}s:10:\"bucketCols\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"sortCols\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/metastoreOrder\";}}s:10:\"parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:17:\"system_parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:5:\"title\";s:99:\"StorageDescriptor
  holds all the information about physical storage of the data belonging to a table\";}s:14:\"metastoreTable\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/metastoreId\";}s:6:\"seq_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:6:\"uint64\";}s:2:\"sd\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:40:\"#/definitions/metastoreStorageDescriptor\";}s:13:\"partitionKeys\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/metastoreFieldSchema\";}}s:9:\"tableType\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/definitions/metastoreTableType\";}s:10:\"parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:17:\"system_parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:5:\"title\";s:17:\"Table
  information\";}s:18:\"metastoreTableType\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:13:\"TTYPE_MANAGED\";i:1;s:14:\"TTYPE_EXTERNAL\";i:2;s:11:\"TTYPE_INDEX\";}s:7:\"default\";s:13:\"TTYPE_MANAGED\";}}"
...
