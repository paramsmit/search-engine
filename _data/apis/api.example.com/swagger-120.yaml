---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:15:\"Restyaboard API\";s:7:\"version\";s:5:\"1.0.0\";}"
paths:
  /activities/undo/{activityId}.json:
    put:
      description: Update the activities
      operationId: editActivities
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Activity ID to undo
        in: path
        name: activityId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Undo activities
      tags:
      - activities_listing
  /v1/boards.json:
    get:
      description: Returns a Board based on userID
      operationId: findBoardsByUserID
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Board'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      summary: Find Board by userId
      tags:
      - boards
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addBoard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created Board
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addBoard'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a new Board
      tags:
      - boards
  /v1/boards/{boardId}.json:
    get:
      description: Returns a Board based on ID
      operationId: getBoardById
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Board'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      summary: View Board
      tags:
      - boards
    put:
      description: Update the board details
      operationId: editBoard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: Edit Board
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editBoard'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/Board'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      summary: Edit Board
      tags:
      - boards
  /v1/boards/{boardId}/activities.json:
    get:
      description: Returns Board Activities
      operationId: Board activities listing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Activities
      tags:
      - boards
  /v1/boards/{boardId}/board_subscribers.json:
    get:
      consumes:
      - application/json
      - application/xml
      operationId: listBoardSubscribers
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: listing the board Subscribers
      tags:
      - boards
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addBoardSubscriber
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs add Subscriber into the Board
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add subscriber to Board
      tags:
      - boards
  /v1/boards/{boardId}/board_subscribers/{userId}.json:
    put:
      consumes:
      - application/json
      - application/xml
      operationId: unSubscribeBoard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs Unsubscribe from the Board
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: ID of User that needs to Unsubscribe from the Board
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Unsubscribe the Board
      tags:
      - boards
  /v1/boards/{boardId}/boards_stars.json:
    post:
      consumes:
      - application/json
      - application/xml
      description: Star board
      operationId: star_board
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: Copy Board
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/star_board'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Star board
      tags:
      - boards
  /v1/boards/{boardId}/copy.json:
    post:
      consumes:
      - application/json
      - application/xml
      description: Copy board
      operationId: copy_board
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: Copy Board
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/copy_board'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Copy board
      tags:
      - boards
  /v1/boards/{boardId}/custom_backgrounds.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: uploadCustomBackground
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Upload custom background to board
      tags:
      - boards
  /v1/boards/{boardId}/lists.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addList
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: Created List
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addList'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a new List
      tags:
      - lists
  /v1/boards/{boardId}/lists/{listId}.json:
    delete:
      operationId: deleteList
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to delete
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to delete
        in: path
        name: listId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete the list
      tags:
      - lists
    put:
      description: Update the List details
      operationId: editList
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: listId
        required: true
        type: integer
      - description: Edit List
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editList'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
          schema:
            items: []
            type: array
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      summary: Edit List
      tags:
      - lists
  /v1/boards/{boardId}/lists/{listId}/cards.json:
    get:
      description: Archived card send back to board
      operationId: send_back_to_archived_card
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Selected List ID
        in: path
        name: listId
        required: true
        type: integer
      - description: Archived card send back to board
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/send_back_to_archived_card'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Archived card send back to board
      tags:
      - cards
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addCard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Created Card
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addCard'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a new Card
      tags:
      - cards
    put:
      description: Move list cards
      operationId: move_list_cards
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Selected List ID
        in: path
        name: listId
        required: true
        type: integer
      - description: Move list cards
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/move_list_cards'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Move list cards
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}.json:
    delete:
      operationId: deleteCard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to delete
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to delete
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to delete
        in: path
        name: cardId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete the Card
      tags:
      - cards
    put:
      description: Update the Card details
      operationId: editCard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Edit Card
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editCard'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      summary: Edit Card
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/activities.json:
    get:
      description: Returns Card Activities
      operationId: Card activities listing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Activities
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/attachments.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addAttachments
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a Label
      tags:
      - card_attachments
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/attachments/{attachmentId}.json:
    delete:
      description: Remove attachment from card
      operationId: remove_card_attachment
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: integer
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: integer
      - description: attachment ID to remove
        in: path
        name: attachmentId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Remove attachment from card
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/card_subscribers.json:
    post:
      description: Subscribe Card
      operationId: subscribeCard
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Subscribe Card
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/subscribeCard'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Subscribe Card
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/card_voters.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addVote
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: integer
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a Vote
      tags:
      - card_voters
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/card_voters/{cardVoterId}.json:
    delete:
      operationId: deleteCardVoter
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: integer
      - description: Card ID to delete
        in: path
        name: cardId
        required: true
        type: integer
      - description: Card voter ID to delete
        in: path
        name: cardVoterId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete the Card voter
      tags:
      - card_voters
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/checklists.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addChecklist
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Created checklist object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addChecklist'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a checklist
      tags:
      - checklists
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/checklists/{checkListId}/items/{itemId}/convert_to_card.json:
    post:
      description: Convert item to card
      operationId: convert_item_to_card
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Selected Checklist ID
        in: path
        name: checkListId
        required: true
        type: string
      - description: Selected Checklist Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Convert item to card
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/checklists/{checklistId}.json:
    delete:
      operationId: deleteChecklist
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to delete
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to delete
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to delete
        in: path
        name: cardId
        required: true
        type: string
      - description: Checklist ID to delete
        in: path
        name: checklistId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete comment
      tags:
      - checklists
    put:
      description: Update the Checklist
      operationId: editChecklist
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to edit
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to edit
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to edit
        in: path
        name: cardId
        required: true
        type: string
      - description: Checklist ID to edit
        in: path
        name: checklistId
        required: true
        type: string
      - description: Edit Checklist
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editChecklist'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit Checklist
      tags:
      - checklists
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/checklists/{checklistId}/items.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addChecklistItem
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Selected checklist ID
        in: path
        name: checklistId
        required: true
        type: string
      - description: Created checklist object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addChecklistItem'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a checklist item
      tags:
      - checklist_items
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/checklists/{checklistId}/items/{checklistItemId}.json:
    delete:
      operationId: deleteChecklistItem
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to delete
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to delete
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to delete
        in: path
        name: cardId
        required: true
        type: string
      - description: Checklist ID to delete
        in: path
        name: checklistId
        required: true
        type: string
      - description: Checklist item ID to edit
        in: path
        name: checklistItemId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete comment
      tags:
      - checklist_items
    put:
      description: Update the Checklist
      operationId: editChecklistItem
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to edit
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to edit
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to edit
        in: path
        name: cardId
        required: true
        type: string
      - description: Checklist ID to edit
        in: path
        name: checklistId
        required: true
        type: string
      - description: Checklist item ID to edit
        in: path
        name: checklistItemId
        required: true
        type: string
      - description: Edit Checklist
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editChecklistItem'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit Checklist
      tags:
      - checklist_items
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/comments.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addComment
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Created comment object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addComment'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a comment
      tags:
      - comments
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/comments/{commentId}.json:
    delete:
      operationId: deleteComment
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to delete
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to delete
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to delete
        in: path
        name: cardId
        required: true
        type: string
      - description: Comment ID to delete
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete comment
      tags:
      - comments
    put:
      description: Update the Comment
      operationId: editComment
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board ID to edit
        in: path
        name: boardId
        required: true
        type: string
      - description: List ID to edit
        in: path
        name: listId
        required: true
        type: string
      - description: Card ID to edit
        in: path
        name: cardId
        required: true
        type: string
      - description: Comment ID to edit
        in: path
        name: commentId
        required: true
        type: string
      - description: Edit Comment
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editComment'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit Comment
      tags:
      - comments
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/copy.json:
    post:
      description: Copy card
      operationId: copy_card
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Assign member to card
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/copy_card'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Copy card
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/labels.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addLabel
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: integer
      - description: Card ID to delete
        in: path
        name: cardId
        required: true
        type: integer
      - description: Add label
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addLabel'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a Label
      tags:
      - cards_labels
  /v1/boards/{boardId}/lists/{listId}/cards/{cardId}/users/{userId}.json:
    post:
      description: Assign member to card
      operationId: add_card_user
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected board ID
        in: path
        name: boardId
        required: true
        type: string
      - description: Selected list ID
        in: path
        name: listId
        required: true
        type: string
      - description: Selected card ID
        in: path
        name: cardId
        required: true
        type: string
      - description: Selected User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Assign member to card
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/add_card_user'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Assign member to card
      tags:
      - cards
  /v1/boards/{boardId}/lists/{listId}/list_subscribers.json:
    post:
      description: Add the List Subscribers
      operationId: addListSubscriber
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: listId
        required: true
        type: integer
      - description: Edit List
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addListSubscriber'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
          schema:
            items: []
            type: array
        400:
          description: Invalid ID supplied
      summary: Add List Subscribers
      tags:
      - lists
  /v1/boards/{boardId}/lists/{listId}/list_subscribers/{subscriberId}.json:
    put:
      description: Unsubscribe the List
      operationId: unSubscribeList
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: listId
        required: true
        type: integer
      - description: ID of User that needs to be Unsubscribe
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: subscriberId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
          schema:
            items: []
            type: array
        400:
          description: Invalid ID supplied
      summary: Unsubscribe the List
      tags:
      - lists
  /v1/boards/{boardId}/users.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addBoardMember
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      - description: Add Board Member
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addBoardMember'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add board member
      tags:
      - boards
  /v1/boards/{boardId}/visibility.json:
    get:
      consumes:
      - application/json
      - application/xml
      operationId: viewBoardVisibility
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board that needs to be fetched
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: View board visibility
      tags:
      - boards
  /v1/boards_users/{userId}.json:
    put:
      consumes:
      - application/json
      - application/xml
      description: Update board member permissions
      operationId: edit_board_user
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: ID of Board user that needs to be update
        format: int64
        in: path
        maximum: 100000
        minimum: 1
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Update board member permissions
      tags:
      - boards
  /v1/oauth.json:
    get:
      operationId: oauth
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Get Oauth token
      tags:
      - users
  /v1/oauth/applications.json:
    get:
      description: Returns applications listing
      operationId: applicationsListing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        404:
          description: Application not found
      summary: Applications
      tags:
      - oauth_applications
  /v1/oauth/applications/{applicationId}.json:
    delete:
      operationId: deleteApplication
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Application to delete
        in: path
        name: applicationId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete application
      tags:
      - oauth_applications
  /v1/oauth/clients.json:
    get:
      description: Returns clients listing
      operationId: clientsListing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        404:
          description: Client not found
      summary: Clients
      tags:
      - oauth_clients
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addClient
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created client object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addClient'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a client
      tags:
      - oauth_clients
  /v1/oauth/clients/{clientId}.json:
    delete:
      operationId: deleteClient
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Client to delete
        in: path
        name: clientId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete client
      tags:
      - oauth_clients
    put:
      description: Update the client
      operationId: editClient
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Client to edit
        in: path
        name: clientId
        required: true
        type: string
      - description: Edit Client
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editClient'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit client
      tags:
      - oauth_clients
  /v1/oauth/token.json:
    post:
      operationId: getToken
      parameters:
      - description: oauthToken
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/oauthToken'
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Get token
      tags:
      - users
  /v1/organizations.json:
    get:
      description: Returns boards list
      operationId: Boards listing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Boards Listing
      tags:
      - organizations
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addOrganization
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created Organization object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addOrganization'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a organization
      tags:
      - organizations
  /v1/organizations/{organizationId}.json:
    delete:
      operationId: deleteOrganization
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Organization ID to delete
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete Organization
      tags:
      - organizations
    put:
      description: Update the Organization
      operationId: editOrganization
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Organization ID to edit
        in: path
        name: organizationId
        required: true
        type: string
      - description: Edit Organization
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editOrganization'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit Organization
      tags:
      - organizations
  /v1/organizations/{organizationId}/upload_logo.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: uploadOrganizationLogo
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Upload organization logo
      tags:
      - organizations
  /v1/organizations/{organizationId}/users/{userId}.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addMember
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a member
      tags:
      - organizations
  /v1/organizations_users/{id}.json:
    put:
      description: Change member  permission
      operationId: changeMemberPermission
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Organization ID to get listing
        in: path
        name: id
        required: true
        type: string
      - description: Change Member Permission
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/changeMemberPermission'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Change member  permission
      tags:
      - organizations
  /v1/users.json:
    get:
      description: Returns Users listing
      operationId: usersListing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
        404:
          description: User not found
      summary: Users
      tags:
      - users
  /v1/users/forgotpassword.json:
    post:
      operationId: forgotPassword
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created Forgot Password object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/forgotPassword'
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Enter your Email, and we will send resetting your password.
      tags:
      - users
  /v1/users/login.json:
    post:
      operationId: loginUser
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Login'
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Logs user into the system
      tags:
      - users
  /v1/users/logout.json:
    get:
      operationId: logoutUser
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Logs out current logged in user session
      tags:
      - users
  /v1/users/register.json:
    post:
      operationId: createUsers
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Creates user
      tags:
      - users
  /v1/users/{userId}.json:
    delete:
      operationId: deleteUser
      parameters:
      - description: User ID to delete
        in: path
        name: userId
        required: true
        type: string
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Delete the user
      tags:
      - users
    get:
      description: Returns Users view
      operationId: usersView
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected user ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
        404:
          description: User not found
      summary: UserView
      tags:
      - users
    put:
      description: Update the users details
      operationId: editUsers
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Current Login user ID
        in: path
        name: userId
        required: true
        type: string
      - description: Edit user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editUser'
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
      summary: Edit User
      tags:
      - users
  /v1/users/{userId}/activities.json:
    get:
      description: Returns User Activities
      operationId: User activities listing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected user ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
      summary: Activities
      tags:
      - users
  /v1/users/{userId}/cards.json:
    get:
      description: View user cards
      operationId: view_user_cards
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Selected User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: View user cards
      tags:
      - cards
  /v1/users/{userId}/changepassword.json:
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Current Login user ID
        in: path
        name: userId
        required: true
        type: string
      - description: Change Password user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/changepassword'
      produces:
      - application/json
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid username supplied
        404:
          description: User not found
      summary: Change Password
      tags:
      - users
  /v1/webhooks.json:
    get:
      description: Returns webhooks listing
      operationId: webhooksListing
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        404:
          description: Webhook not found
      summary: Webhooks
      tags:
      - webhooks
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addWebhook
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created webhook object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addWebhook'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a webhook
      tags:
      - webhooks
  /v1/webhooks/{webhookId}.json:
    delete:
      operationId: deleteWebhook
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Webhook to delete
        in: path
        name: webhookId
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
      summary: Delete webhook
      tags:
      - webhooks
    put:
      description: Update the webhook
      operationId: editWebhook
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Webhook to edit
        in: path
        name: webhookId
        required: true
        type: string
      - description: Edit Webhook
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editWebhook'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit webhook
      tags:
      - webhooks
  /v1/workflow_templates.json:
    get:
      consumes:
      - application/json
      - application/xml
      operationId: loadWorkflowTemplates
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Load workflow templates
      tags:
      - boards
  /v1/roles.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addRole
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created role object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addRole'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a role
      tags:
      - roles
  /v1/roles/{roleId}.json:
    put:
      description: Update the role
      operationId: editRole
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Role to edit
        in: path
        name: roleId
        required: true
        type: string
      - description: Edit Webhook
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editRole'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit role
      tags:
      - roles
  /v1/board_user_roles.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addBoardUserRole
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created board user role object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addBoardUserRole'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a board user role
      tags:
      - board_user_roles
  /v1/board_user_roles/{roleId}.json:
    put:
      description: Update the board user role
      operationId: editBoardUserRole
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Board user role to edit
        in: path
        name: roleId
        required: true
        type: string
      - description: Edit edit board user role object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editBoardUserRole'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit board user role
      tags:
      - board_user_roles
  /v1/organization_user_roles.json:
    post:
      consumes:
      - application/json
      - application/xml
      operationId: addOrganizationUserRole
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Created organization user role object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/addOrganizationUserRole'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        405:
          description: Invalid input
      summary: Add a organization user role
      tags:
      - organization_user_roles
  /v1/organization_user_roles/{roleId}.json:
    put:
      description: Update the organization user role
      operationId: editOrganizationUserRole
      parameters:
      - description: OAuth token
        in: query
        name: token
        required: true
        type: string
      - description: Organization user role to edit
        in: path
        name: roleId
        required: true
        type: string
      - description: Edit organization user role object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/editOrganizationUserRole'
      produces:
      - application/json
      - application/xml
      - text/plain
      - text/html
      responses:
        200:
          description: No response was specified
        400:
          description: Invalid ID supplied
        404:
          description: Page not found
      summary: Edit organization user role
      tags:
      - organization_user_roles
definitions: !php/object "O:8:\"stdClass\":42:{s:5:\"Board\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"unique
  identifier for the board\";s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:1:{i:0;s:2:\"id\";}}s:5:\"Login\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"User\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:29:\"is_agree_terms_and_conditions\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"addBoard\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:16:\"board_visibility\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:16:\"board_visibility\";}}s:14:\"addBoardMember\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:18:\"board_user_role_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:2:{i:0;s:7:\"user_id\";i:1;s:18:\"board_user_role_id\";}}s:7:\"addCard\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"board_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"list_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:4:{i:0;s:8:\"board_id\";i:1;s:7:\"list_id\";i:2;s:4:\"name\";i:3;s:8:\"position\";}}s:12:\"addChecklist\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:8:\"position\";}}s:16:\"addChecklistItem\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"addClient\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:11:\"client_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"client_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"logo_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"policy_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"redirect_uris\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"tos_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"addComment\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"addLabel\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"name\";}}s:7:\"addList\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"board_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"is_archived\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"uuid\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:3:{i:0;s:8:\"board_id\";i:1;s:4:\"name\";i:2;s:4:\"uuid\";}}s:17:\"addListSubscriber\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:13:\"is_subscribed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}s:8:\"required\";a:1:{i:0;s:13:\"is_subscribed\";}}s:15:\"addOrganization\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"addWebhook\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_active\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"secret\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:13:\"add_card_user\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:8:\"board_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"initials\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"is_offline\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"list_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:20:\"profile_picture_path\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:22:\"changeMemberPermission\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"is_admin\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"user
  ID\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"changepassword\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:15:\"confirmpassword\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"oldpassword\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"copy_board\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"board_visibility\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:9:\"keepCards\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:15:\"organization_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:3:{i:0;s:16:\"board_visibility\";i:1;s:15:\"organization_id\";i:2;s:9:\"keepCards\";}}s:9:\"copy_card\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:14:\"copied_card_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:15:\"keep_activities\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:16:\"keep_attachments\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:15:\"keep_checklists\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"keep_labels\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"keep_users\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:7:{i:0;s:16:\"keep_attachments\";i:1;s:15:\"keep_activities\";i:2;s:11:\"keep_labels\";i:3;s:10:\"keep_users\";i:4;s:15:\"keep_checklists\";i:5;s:14:\"copied_card_id\";i:6;s:4:\"name\";}}s:9:\"editBoard\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"board_visibility\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"organization_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:16:\"board_visibility\";}}s:8:\"editCard\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:11:\"is_archived\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"due_date\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:4:{i:0;s:4:\"name\";i:1;s:8:\"position\";i:2;s:11:\"is_archived\";i:3;s:8:\"due_date\";}}s:13:\"editChecklist\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:17:\"editChecklistItem\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"editClient\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:11:\"client_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"client_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"logo_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"policy_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"redirect_uris\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"tos_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"editComment\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"comment\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"editList\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"archive\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:8:\"position\";i:2;s:7:\"archive\";}}s:16:\"editOrganization\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"editUser\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:3:\"dob\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"gender_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"editWebhook\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_active\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"secret\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:7:\"addRole\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"editRole\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:16:\"addBoardUserRole\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:17:\"editBoardUserRole\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:23:\"addOrganizationUserRole\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:24:\"editOrganizationUserRole\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"forgotPassword\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"move_list_cards\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"is_archived\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"list_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:10:\"oauthToken\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"code\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"redirect_uri\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:26:\"send_back_to_archived_card\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"board_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"due_date\";O:8:\"stdClass\":2:{s:6:\"format\";s:4:\"date\";s:4:\"type\";s:6:\"string\";}s:7:\"list_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"position\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"user_ids\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:8:\"board_id\";i:1;s:7:\"list_id\";i:2;s:8:\"position\";}}s:10:\"star_board\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"board_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"is_starred\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:3:{i:0;s:8:\"board_id\";i:1;s:10:\"is_starred\";i:2;s:7:\"user_id\";}}s:13:\"subscribeCard\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":6:{s:8:\"board_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"card_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"is_offline\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_subscribe\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"list_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:3:{i:0;s:8:\"board_id\";i:1;s:7:\"list_id\";i:2;s:12:\"is_subscribe\";}}}"
...
