---
openapi: 3.0.0
info: !php/object "O:8:\"stdClass\":4:{s:7:\"version\";s:5:\"2.0.0\";s:5:\"title\";s:25:\"Standard
  Relayer REST API\";s:11:\"description\";s:9502:\"# Testing\n\nUse the [sra-report](https://github.com/0xProject/0x-monorepo/tree/development/packages/sra-report)
  command line tool to test your API for SRA compliance.\n\n# Schemas\n\nThe [JSON
  schemas](http://json-schema.org/) for the API payloads and responses can be found
  in [@0xproject/json-schemas](https://github.com/0xProject/0x.js/tree/development/packages/json-schemas).
  Examples of each payload and response can be found in the library's [test suite](https://github.com/0xProject/0x.js/blob/development/packages/json-schemas/test/schema_test.ts#L1).\n\n```bash\nnpm
  install @0xproject/json-schemas --save\n```\n\nYou can easily validate your API's
  payloads and responses using the [@0xproject/json-schemas](https://github.com/0xProject/0x.js/tree/development/packages/json-schemas)
  package:\n\n```js\nimport {SchemaValidator, ValidatorResult, schemas} from '@0xproject/json-schemas';\n\nconst
  {relayerApiTokenPairsResponseSchema} = schemas;\nconst validator = new SchemaValidator();\n\nconst
  tokenPairsResponse = {\n    ...\n};\nconst validatorResult: ValidatorResult = validator.validate(tokenPairsResponse,
  relayerApiTokenPairsResponseSchema);\n```\n\n# Pagination\n\nRequests that return
  potentially large collections should respond to the **?page** and **?perPage** parameters.
  For example:\n\n```bash\n$ curl https://api.example-relayer.com/v2/asset_pairs?page=3&perPage=20\n```\n\nPage
  numbering should be 1-indexed, not 0-indexed. If a query provides an unreasonable
  (ie. too high) `perPage` value, the response can return a validation error as specified
  in the [errors section](#section/Errors). If the query specifies a `page` that does
  not exist (ie. there are not enough `records`), the response should just return
  an empty `records` array.\n\nAll endpoints that are paginated should return a `total`,
  `page`, `perPage` and a `records` value in the top level of the collection. The
  value of `total` should be the total number of records for a given query, whereas
  `records` should be an array representing the response to the query for that page.
  `page` and `perPage`, are the same values that were specified in the request. See
  the note in [miscellaneous](#section/Misc.) about formatting `snake_case` vs. `lowerCamelCase`.\n\nThese
  requests include the [`/v2/asset_pairs`](#operation/getAssetPairs), [`/v2/orders`](#operation/getOrders),
  [`/v2/fee_recipients`](#operation/getFeeRecipients) and [`/v2/orderbook`](#operation/getOrderbook)
  endpoints.\n\n# Network Id\n\nAll requests should be able to specify a **?networkId**
  query param for all supported networks. For example:\n\n```bash\n$ curl https://api.example-relayer.com/v2/asset_pairs?networkId=1\n```\n\nIf
  the query param is not provided, it should default to **1** (mainnet).\n\nNetworks
  and their Ids:\n\n| Network Id | Network Name |\n| ---------- | ------------ |\n|
  1          | Mainnet      |\n| 42         | Kovan        |\n| 3          | Ropsten
  \     |\n| 4          | Rinkeby      |\n\nIf a certain network is not supported,
  the response should **400** as specified in the [error response](#section/Errors)
  section. For example:\n\n```json\n{\n    \"code\": 100,\n    \"reason\": \"Validation
  failed\",\n    \"validationErrors\": [\n        {\n            \"field\": \"networkId\",\n
  \           \"code\": 1006,\n            \"reason\": \"Network id 42 is not supported\"\n
  \       }\n    ]\n}\n```\n\n# Link Header\n\nA [Link Header](https://tools.ietf.org/html/rfc5988)
  can be included in a response to provide clients with more context about paging\nFor
  example:\n\n```bash\nLink: <https://api.example-relayer.com/v2/asset_pairs?page=3&perPage=20>;
  rel=\"next\",\n<https://api.github.com/user/repos?page=10&perPage=20>; rel=\"last\"\n```\n\nThis
  `Link` response header contains one or more Hypermedia link relations.\n\nThe possible
  `rel` values are:\n\n| Name  | Description                                                   |\n|
  ----- | ------------------------------------------------------------- |\n| next
  \ | The link relation for the immediate next page of results.     |\n| last  | The
  link relation for the last page of results.               |\n| first | The link
  relation for the first page of results.              |\n| prev  | The link relation
  for the immediate previous page of results. |\n\n# Rate Limits\n\nRate limit guidance
  for clients can be optionally returned in the response headers:\n\n| Header Name
  \          | Description                                                                  |\n|
  --------------------- | ----------------------------------------------------------------------------
  |\n| X-RateLimit-Limit     | The maximum number of requests you're permitted to
  make per hour.            |\n| X-RateLimit-Remaining | The number of requests remaining
  in the current rate limit window.           |\n| X-RateLimit-Reset     | The time
  at which the current rate limit window resets in UTC epoch seconds. |\n\nFor example:\n\n```bash\n$
  curl -i https://api.example-relayer.com/v2/asset_pairs\nHTTP/1.1 200 OK\nDate: Mon,
  20 Oct 2017 12:30:06 GMT\nStatus: 200 OK\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining:
  56\nX-RateLimit-Reset: 1372700873\n```\n\nWhen a rate limit is exceeded, a status
  of **429 Too Many Requests** should be returned.\n\n# Errors\n\nUnless the spec
  defines otherwise, errors to bad requests should respond with HTTP 4xx or status
  codes.\n\n## Common error codes\n\n| Code | Reason                                  |\n|
  ---- | --------------------------------------- |\n| 400  | Bad Request \u2013 Invalid
  request format    |\n| 404  | Not found                               |\n| 429  |
  Too many requests - Rate limit exceeded |\n| 500  | Internal Server Error                   |\n|
  501  | Not Implemented                         |\n\n## Error reporting format\n\nFor
  all **400** responses, see the [error response schema](https://github.com/0xProject/0x-monorepo/blob/development/packages/json-schemas/schemas/relayer_api_error_response_schema.ts#L1).\n\n```json\n{\n
  \   \"code\": 101,\n    \"reason\": \"Validation failed\",\n    \"validationErrors\":
  [\n        {\n            \"field\": \"maker\",\n            \"code\": 1002,\n            \"reason\":
  \"Invalid address\"\n        }\n    ]\n}\n```\n\nGeneral error codes:\n\n```bash\n100
  - Validation Failed\n101 - Malformed JSON\n102 - Order submission disabled\n103
  - Throttled\n```\n\nValidation error codes:\n\n```bash\n1000 - Required field\n1001
  - Incorrect format\n1002 - Invalid address\n1003 - Address not supported\n1004 -
  Value out of range\n1005 - Invalid signature or hash\n1006 - Unsupported option\n```\n\n#
  Asset Data Encoding\n\nAs we now support multiple [token transfer proxies](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#assetproxy),
  the identifier of which proxy to use for the token transfer must be encoded, along
  with the token information. Each proxy in 0x v2 has a unique identifier. If you're
  using 0x.js there will be helper methods for this [encoding](https://0xproject.com/docs/0x.js#zeroEx-encodeERC20AssetData)
  and [decoding](https://0xproject.com/docs/0x.js#zeroEx-decodeAssetProxyId).\n\nThe
  identifier for the Proxy uses a similar scheme to [ABI function selectors](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#function-selector).\n\n```js\n//
  ERC20 Proxy ID  0xf47261b0\nbytes4(keccak256('ERC20Token(address)'));\n// ERC721
  Proxy ID 0x08e937fa\nbytes4(keccak256('ERC721Token(address,uint256)'));\n```\n\nAsset
  data is encoded using [ABI encoding](https://solidity.readthedocs.io/en/develop/abi-spec.html).\n\nFor
  example, encoding the ERC20 token contract (address: 0x1dc4c1cefef38a777b15aa20260a54e584b16c48)
  using the ERC20 Transfer Proxy (id: 0xf47261b0) would be:\n\n```bash\n0xf47261b00000000000000000000000001dc4c1cefef38a777b15aa20260a54e584b16c48\n```\n\nEncoding
  the ERC721 token contract (address: `0x371b13d97f4bf77d724e78c16b7dc74099f40e84`),
  token id (id: `99`, which hex encoded is `0x63`) and the ERC721 Transfer Proxy (id:
  0x08e937fa) would be:\n\n```bash\n0x08e937fa000000000000000000000000371b13d97f4bf77d724e78c16b7dc74099f40e840000000000000000000000000000000000000000000000000000000000000063\n```\n\nFor
  more information see [the Asset Proxy](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#erc20proxy)
  section of the v2 spec and the [Ethereum ABI Spec](https://solidity.readthedocs.io/en/develop/abi-spec.html).\n\n#
  Meta Data in Order Responses\n\nIn v2 of the standard relayer API we added the `metaData`
  field. It is meant to provide a standard place for relayers to put optional, custom
  or non-standard fields that may of interest to the consumer of the API.\n\nA good
  example of such a field is `remainingTakerAssetAmount`, which is a convenience field
  that communicates how much of a 0x order is potentially left to be filled. Unlike
  the other fields in a 0x order, it is not guaranteed to be correct as it is derived
  from whatever mechanism the implementer (ie. the relayer) is using. While convenient
  for prototyping and low stakes situations, we recommend validating the value of
  the field by checking the state of the blockchain yourself, such as by using [Order
  Watcher](https://0xproject.com/wiki#0x-OrderWatcher).\n\n# Misc.\n\n*   All requests
  and responses should be of **application/json** content type\n*   All token amounts
  are sent in amounts of the smallest level of precision (base units). (e.g if a token
  has 18 decimal places, selling 1 token would show up as selling `'1000000000000000000'`
  units by this API).\n*   All addresses are sent as lower-case (non-checksummed)
  Ethereum addresses with the `0x` prefix.\n*   All parameters are to be written in
  `lowerCamelCase`.\n\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:48:\"https://www.apache.org/licenses/LICENSE-2.0.html\";}}"
paths: []
...
