---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:28:\"backend/api/experiment.proto\";s:7:\"version\";s:15:\"version
  not set\";}"
paths: ~
produces:
- application/json
schemes:
- http
- https
definitions: !php/object "O:8:\"stdClass\":4:{s:13:\"apiExperiment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:54:\"Output.
  Unique experiment ID. Generated by API server.\";}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:62:\"Required
  input field. Unique experiment name provided by user.\";}s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:5:\"title\";s:62:\"Optional
  input field. Describing the purpose of the experiment\";}s:10:\"created_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:11:\"description\";s:45:\"Output.
  The time that the experiment created.\";}}}s:26:\"apiListExperimentsResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"experiments\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/apiExperiment\";}s:11:\"description\";s:31:\"A
  list of experiments returned.\";}s:10:\"total_size\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:52:\"The
  total number of experiments for the given query.\";}s:15:\"next_page_token\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:47:\"The
  token to list the next page of experiments.\";}}}s:9:\"apiStatus\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"error\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"code\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:7:\"details\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/protobufAny\";}}}}s:11:\"protobufAny\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"type_url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:1274:\"A
  URL/resource name that uniquely identifies the type of the serialized\nprotocol
  buffer message. The last segment of the URL's path must represent\nthe fully qualified
  name of the type (as in\n`path/google.protobuf.Duration`). The name should be in
  a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually
  precompile into the binary all types that they\nexpect it to use in the context
  of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one
  can optionally set up a type\nserver that maps type URLs to message definitions
  as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on
  the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce
  an error.\n* Applications are allowed to cache lookup results based on the\n  URL,
  or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary
  compatibility needs to be preserved\n  on changes to types. (Use versioned type
  names to manage\n  breaking changes.)\n\nNote: this functionality is not currently
  available in the official\nprotobuf release, and it is not used for type URLs beginning
  with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme)
  might be\nused with implementation specific semantics.\";}s:5:\"value\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"byte\";s:11:\"description\";s:71:\"Must
  be a valid serialized protocol buffer of the above specified type.\";}}s:11:\"description\";s:2069:\"`Any`
  contains an arbitrary serialized protocol buffer message along with a\nURL that
  describes the type of the serialized message.\n\nProtobuf library provides support
  to pack/unpack Any values in the form\nof utility functions or additional generated
  methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo
  foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo))
  {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo
  foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n
  \     foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message
  in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n
  \   if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4:
  Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n
  \    ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err
  != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will
  by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods
  only use the fully qualified type name after the last '/'\nin the type URL, for
  example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe
  JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized,
  embedded message, with an\nadditional field `@type` which contains the type URL.
  Example:\n\n    package google.profile;\n    message Person {\n      string first_name
  = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n
  \     \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded
  message type is well-known and has a custom JSON\nrepresentation, that representation
  will be embedded adding a field\n`value` which holds the custom JSON in addition
  to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n
  \     \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\":
  \"1.212s\"\n    }\";}}"
...
