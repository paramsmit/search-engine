---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:31:\"This is api for
  beacon services\";s:5:\"title\";s:11:\"Swagger API\";s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:11:\"API
  Support\";s:5:\"email\";s:17:\"paradoxfm@mail.ru\";}s:7:\"license\";O:8:\"stdClass\":0:{}s:7:\"version\";s:3:\"1.0\";}"
paths:
  /avatar/{id}:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - System
      summary: Loading avatar by id
      parameters:
      - type: string
        description: id avatar
        name: id
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.AvatarResponse'
        400:
          description: err
        500:
          description: err
  /heartbeat:
    post:
      description: 'Accepts coordinates from the smartphone, occurs: saving and checking
        for entry into neozones, updating the latest tracker data'
      consumes:
      - application/json
      tags:
      - Monitoring
      summary: Acceptance of coordinates from a smartphone
      parameters:
      - description: Request with device coordinates and flags
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.Heartbeat'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /trackers:
    post:
      description: Creating a new tracker for an authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Trackers
      summary: Create a new tracker
      parameters:
      - description: u0417u0430u043fu0440u043eu0441 u043du0430 u0441u043eu0437u0434u0430u043du0438u0435
          u0442u0440u0435u043au043au0435u0440u0430
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.TrackCreateRequest'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.TrackCreateResponse'
        400:
          description: err
        500:
          description: err
  /trackers/all:
    get:
      description: Load all trackers for an authorized user
      produces:
      - application/json
      tags:
      - Trackers
      summary: Load all trackers
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.Tracker'
        400:
          description: err
        500:
          description: err
  /trackers/avatar/{id}:
    put:
      description: Update avatar tracker for authorized user (jpeg 250x250)
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Trackers
      summary: Update avatar tracker
      parameters:
      - type: string
        description: id tracker
        name: id
        in: path
        required: true
      - description: avatar
        name: avatar
        in: body
        required: true
        schema:
          type: object
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.AvatarIdResponse'
        400:
          description: err
        500:
          description: err
  /trackers/custom:
    post:
      description: Load custom trackers by ids for an authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Trackers
      summary: Load custom trackers by ids
      parameters:
      - description: u0417u0430u043fu0440u043eu0441 u043du0430 u043eu0442u0434u0435u043bu044cu043du044bu0435
          u0442u0440u0435u043au0435u0440u044b
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.TracksByIdsRequest'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.Tracker'
        400:
          description: err
        500:
          description: err
  /trackers/delete/{id}:
    delete:
      description: Delete the tracker for an authorized user, if the tracker is associated
        with several users, then only unlink
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Trackers
      summary: Delete tracker
      parameters:
      - type: string
        description: id tracker
        name: id
        in: path
        required: true
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /trackers/find/{id}:
    get:
      description: Load tracker by id
      produces:
      - application/json
      tags:
      - Trackers
      summary: Load tracker
      parameters:
      - type: string
        description: id tracker
        name: id
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.Tracker'
        400:
          description: err
        500:
          description: err
  /trackers/geo/history:
    post:
      description: Getting history for tracker for the period
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Trackers
      summary: Tracker history
      parameters:
      - description: Request tracker history
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.TracksHistRequest'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.TrackHistoryResponse'
        400:
          description: err
        500:
          description: err
  /trackers/update/{id}:
    put:
      description: Update tracker properties for authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Trackers
      summary: Update tracker
      parameters:
      - type: string
        description: id u0442u0440u0435u043au0435u0440u0430
        name: id
        in: path
        required: true
      - description: u0417u0430u043fu0440u043eu0441 u043du0430 u0440u0435u0434u0430u043au0442u0438u0440u043eu0432u0430u043du0438u0435
          u0442u0440u0435u043au0435u0440u0430
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.TrackPrefRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /users/login:
    post:
      description: User Authorization by Login/Password
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Users
      summary: User Authorization
      parameters:
      - description: 'Login: Password'
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.LoginRequest'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.LoginResponse'
        400:
          description: err
        500:
          description: err
  /users/me:
    get:
      description: Getting a user profile
      produces:
      - application/json
      tags:
      - Users
      summary: Profile request
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.ProfileResponse'
        400:
          description: err
        500:
          description: err
  /users/me/avatar:
    put:
      description: Update user avatar (jpeg 250x250)
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Users
      summary: Update user avatar
      parameters:
      - description: avatar
        name: avatar
        in: body
        required: true
        schema:
          type: object
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.AvatarIdResponse'
        400:
          description: err
        500:
          description: err
  /users/me/password:
    put:
      description: Change user password
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Users
      summary: Change password
      parameters:
      - description: Password change request
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.ChangePasswordRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /users/me/push:
    put:
      description: Update user push id
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Users
      summary: Update user push id
      parameters:
      - description: Request with push id
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.UpdatePushRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /users/password/reset:
    post:
      description: Reset user password by email
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Users
      summary: Password reset
      parameters:
      - description: Password reset request
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.ResetPasswordRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /users/signUp:
    post:
      description: User registration email + password
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Users
      summary: User registration
      parameters:
      - description: Registration Request
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.RegistrationRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /zone/all:
    get:
      description: Getting a list of zones for an authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Zones
      summary: Zone list
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/model.GeoZoneResponse'
        400:
          description: err
        500:
          description: err
  /zone/delete/{id}:
    delete:
      description: Deleting a zone for an authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Zones
      summary: Deleting a zone
      parameters:
      - type: string
        description: id zone
        name: id
        in: path
        required: true
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /zone/find/{id}:
    get:
      description: Loading zone for authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Zones
      summary: Loading zone
      parameters:
      - type: string
        description: id zone
        name: id
        in: path
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.GeoZoneResponse'
        400:
          description: err
        500:
          description: err
  /zone/save:
    post:
      description: Creating a zone for an authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Zones
      summary: Creating a zone
      parameters:
      - description: Request with zone settings
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.ZoneCreateRequest'
      responses:
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/model.GeoZoneResponse'
        400:
          description: err
        500:
          description: err
  /zone/snap/{id}:
    put:
      description: Linking the zone to the tracker list
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Zones
      summary: Zone binding
      parameters:
      - type: string
        description: id u0437u043eu043du044b
        name: id
        in: path
        required: true
      - description: Request linking trackers to a zone
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.ZoneSnapRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
  /zone/update/{id}:
    put:
      description: Updating zone settings for an authorized user
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Zones
      summary: Zone update
      parameters:
      - type: string
        description: id u0437u043eu043du044b
        name: id
        in: path
        required: true
      - description: Request with zone settings
        name: request
        in: body
        required: true
        schema:
          type: object
          $ref: '#/definitions/model.ZoneCreateRequest'
      responses:
        200:
          description: ok
        400:
          description: err
        500:
          description: err
definitions: !php/object "O:8:\"stdClass\":22:{s:22:\"model.AvatarIdResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:20:\"model.AvatarResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"base64\";}}}s:27:\"model.ChangePasswordRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"new_password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"old_password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:21:\"model.GeoZoneResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"points\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/model.ZonePoint\";}}s:8:\"trackers\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:15:\"model.Heartbeat\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":10:{s:8:\"datetime\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:7:\"RFC3339\";}s:9:\"device_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"is_gps_source\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"is_gsm_source\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:18:\"is_low_power_alarm\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"is_sos_alarm\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:14:\"is_wifi_source\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:5:\"power\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:18:\"model.LoginRequest\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:19:\"model.LoginResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:21:\"model.ProfileResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:6:\"avatar\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"trackers\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/model.UserTracker\";}}}}s:25:\"model.RegistrationRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"\u0441onfirm\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:26:\"model.ResetPasswordRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:24:\"model.TrackCreateRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"equipment_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:9:\"device
  id\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:25:\"model.TrackCreateResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:26:\"model.TrackHistoryResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"datetime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:22:\"model.TrackPrefRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"offset\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:13:\"model.Tracker\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":11:{s:18:\"battery_power_last\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"device_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"device_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"latitude_last\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:14:\"longitude_last\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:13:\"signal_source\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:21:\"signal_timestamp_last\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"updated_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"users\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:24:\"model.TracksByIdsRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"ids\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:23:\"model.TracksHistRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"date_end\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:7:\"RFC3339\";}s:10:\"date_start\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:7:\"RFC3339\";}s:10:\"tracker_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:23:\"model.UpdatePushRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"push_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:17:\"model.UserTracker\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:6:\"avatar\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"offset\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:23:\"model.ZoneCreateRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"points\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/model.ZonePoint\";}}s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"model.ZonePoint\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:21:\"model.ZoneSnapRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"trackers\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}"
...
