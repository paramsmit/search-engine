---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":4:{s:5:\"title\";s:9:\"Evaluator\";s:7:\"version\";s:3:\"1.0\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:10:\"Open
  Match\";s:3:\"url\";s:22:\"https://open-match.dev\";s:5:\"email\";s:35:\"open-match-discuss@googlegroups.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:18:\"Apache
  2.0 License\";s:3:\"url\";s:64:\"https://github.com/googleforgames/open-match/blob/master/LICENSE\";}}"
paths:
  /v1/evaluator/matches:evaluate:
    post:
      summary: Evaluate accepts a list of proposed matches, evaluates them for quality,ncollisions
        etc. and returns matches that should be accepted as results.
      operationId: Evaluate
      responses:
        200:
          description: A successful response.
          schema:
            $ref: '#/definitions/apiEvaluateResponse'
        404:
          description: Returned when the resource does not exist.
          schema:
            format: string
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/apiEvaluateRequest'
      tags:
      - Evaluator
produces:
- application/json
schemes:
- http
- https
definitions: !php/object "O:8:\"stdClass\":12:{s:13:\"apiAssignment\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"connection\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:43:\"Connection
  information for this Assignment.\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/protobufStruct\";s:11:\"description\";s:40:\"Other
  details to be sent to the players.\";}s:5:\"error\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/rpcStatus\";s:11:\"description\";s:49:\"Error
  when finding an Assignment for this Ticket.\";}}s:11:\"description\";s:137:\"An
  Assignment object represents the assignment associated with a Ticket. Open\nmatch
  does not require or inspect any fields on assignment.\";}s:18:\"apiEvaluateRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"matches\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/apiMatch\";}s:11:\"description\";s:28:\"List
  of Matches to evaluate.\";}}}s:19:\"apiEvaluateResponse\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"matches\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/apiMatch\";}s:11:\"description\";s:25:\"Accepted
  list of Matches.\";}}}s:8:\"apiMatch\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:8:\"match_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:63:\"A
  Match ID that should be passed through the stack for tracing.\";}s:13:\"match_profile\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:52:\"Name
  of the match profile that generated this Match.\";}s:14:\"match_function\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:53:\"Name
  of the match function that generated this Match.\";}s:7:\"tickets\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/apiTicket\";}s:11:\"description\";s:32:\"Tickets
  belonging to this match.\";}s:7:\"rosters\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/apiRoster\";}s:5:\"title\";s:39:\"Set
  of Rosters that comprise this Match\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/protobufStruct\";s:11:\"description\";s:74:\"Match
  properties for this Match. Open Match does not interpret this field.\";}}s:11:\"description\";s:306:\"A
  Match is used to represent a completed match object. It can be generated by\na MatchFunction
  as a proposal or can be returned by OpenMatch as a result in\nresponse to the FetchMatches
  call.\nWhen a match is returned by the FetchMatches call, it should contain at least
  \none ticket to be considered as valid.\";}s:9:\"apiRoster\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:55:\"A
  developer-chosen human-readable name for this Roster.\";}s:10:\"ticket_ids\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:33:\"Tickets
  belonging to this Roster.\";}}s:11:\"description\";s:263:\"A Roster is a named collection
  of Ticket IDs. It exists so that a Tickets\nassociated with a Match can be labelled
  to belong to a team, sub-team etc. It\ncan also be used to represent the current
  state of a Match in scenarios such\nas backfill, join-in-progress etc.\";}s:9:\"apiTicket\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:38:\"The
  Ticket ID generated by Open Match.\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/protobufStruct\";s:11:\"description\";s:122:\"Properties
  contains custom info about the ticket.  Top level values can be\nused in indexing
  and filtering to find tickets.\";}s:10:\"assignment\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:27:\"#/definitions/apiAssignment\";s:11:\"description\";s:38:\"Assignment
  associated with the Ticket.\";}}s:11:\"description\";s:574:\"A Ticket is a basic
  matchmaking entity in Open Match. In order to enter\nmatchmaking using Open Match,
  the client should generate a Ticket, passing in\nthe properties to be associated
  with this Ticket. Open Match will generate an\nID for a Ticket during creation.
  A Ticket could be used to represent an\nindividual 'Player' or a 'Group' of players.
  Open Match will not interpret\nwhat the Ticket represents but just treat it as a
  matchmaking unit with a set\nof properties. Open Match stores the Ticket in state
  storage and enables an\nAssignment to be associated with this Ticket.\";}s:11:\"protobufAny\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"type_url\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:1327:\"A
  URL/resource name that uniquely identifies the type of the serialized\nprotocol
  buffer message. This string must contain at least\none \"/\" character. The last
  segment of the URL's path must represent\nthe fully qualified name of the type (as
  in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g.,
  leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the
  binary all types that they\nexpect it to use in the context of Any. However, for
  URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set
  up a type\nserver that maps type URLs to message definitions as follows:\n\n* If
  no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield
  a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications
  are allowed to cache lookup results based on the\n  URL, or have them precompiled
  into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be
  preserved\n  on changes to types. (Use versioned type names to manage\n  breaking
  changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf
  release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes
  other than `http`, `https` (or the empty scheme) might be\nused with implementation
  specific semantics.\";}s:5:\"value\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"byte\";s:11:\"description\";s:71:\"Must
  be a valid serialized protocol buffer of the above specified type.\";}}s:11:\"description\";s:2069:\"`Any`
  contains an arbitrary serialized protocol buffer message along with a\nURL that
  describes the type of the serialized message.\n\nProtobuf library provides support
  to pack/unpack Any values in the form\nof utility functions or additional generated
  methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo
  foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo))
  {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo
  foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n
  \     foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message
  in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n
  \   if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4:
  Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n
  \    ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err
  != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will
  by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods
  only use the fully qualified type name after the last '/'\nin the type URL, for
  example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe
  JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized,
  embedded message, with an\nadditional field `@type` which contains the type URL.
  Example:\n\n    package google.profile;\n    message Person {\n      string first_name
  = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n
  \     \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded
  message type is well-known and has a custom JSON\nrepresentation, that representation
  will be embedded adding a field\n`value` which holds the custom JSON in addition
  to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n
  \     \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\":
  \"1.212s\"\n    }\";}s:17:\"protobufListValue\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"values\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/protobufValue\";}s:11:\"description\";s:43:\"Repeated
  field of dynamically typed values.\";}}s:11:\"description\";s:115:\"`ListValue`
  is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue`
  is JSON array.\";}s:17:\"protobufNullValue\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:1:{i:0;s:10:\"NULL_VALUE\";}s:7:\"default\";s:10:\"NULL_VALUE\";s:11:\"description\";s:180:\"`NullValue`
  is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n
  The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value.\";}s:14:\"protobufStruct\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"fields\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/protobufValue\";}s:11:\"description\";s:42:\"Unordered
  map of dynamically typed values.\";}}s:11:\"description\";s:414:\"`Struct` represents
  a structured data value, consisting of fields\nwhich map to dynamically typed values.
  In some languages, `Struct`\nmight be supported by a native representation. For
  example, in\nscripting languages like JS a struct is represented as an\nobject.
  The details of that representation are described together\nwith the proto support
  for the language.\n\nThe JSON representation for `Struct` is JSON object.\";}s:13:\"protobufValue\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:10:\"null_value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/protobufNullValue\";s:11:\"description\";s:24:\"Represents
  a null value.\";}s:12:\"number_value\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:6:\"double\";s:11:\"description\";s:26:\"Represents
  a double value.\";}s:12:\"string_value\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:26:\"Represents
  a string value.\";}s:10:\"bool_value\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"boolean\";s:6:\"format\";s:7:\"boolean\";s:11:\"description\";s:27:\"Represents
  a boolean value.\";}s:12:\"struct_value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/protobufStruct\";s:11:\"description\";s:30:\"Represents
  a structured value.\";}s:10:\"list_value\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/protobufListValue\";s:11:\"description\";s:30:\"Represents
  a repeated `Value`.\";}}s:11:\"description\";s:304:\"`Value` represents a dynamically
  typed value which can be either\nnull, a number, a string, a boolean, a recursive
  struct value, or a\nlist of values. A producer of value is expected to set one of
  that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation
  for `Value` is JSON value.\";}s:9:\"rpcStatus\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"code\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:85:\"The
  status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code].\";}s:7:\"message\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:217:\"A
  developer-facing error message, which should be in English. Any\nuser-facing error
  message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details]
  field, or localized\nby the client.\";}s:7:\"details\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/protobufAny\";}s:11:\"description\";s:105:\"A
  list of messages that carry the error details.  There is a common set of\nmessage
  types for APIs to use.\";}}s:11:\"description\";s:2234:\"- Simple to use and understand
  for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe
  `Status` message contains three pieces of data: error code, error\nmessage, and
  error details. The error code should be an enum value of\n[google.rpc.Code][google.rpc.Code],
  but it may accept additional error codes\nif needed.  The error message should be
  a developer-facing English message\nthat helps developers *understand* and *resolve*
  the error. If a localized\nuser-facing error message is needed, put the localized
  message in the error\ndetails or localize it in the client. The optional error details
  may contain\narbitrary information about the error. There is a predefined set of
  error\ndetail types in the package `google.rpc` that can be used for common error\nconditions.\n\n#
  Language mapping\n\nThe `Status` message is the logical representation of the error
  model, but it\nis not necessarily the actual wire format. When the `Status` message
  is\nexposed in different client libraries and different wire protocols, it can be\nmapped
  differently. For example, it will likely be mapped to some exceptions\nin Java,
  but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model
  and the `Status` message can be used in a variety of\nenvironments, either with
  or without APIs, to provide a\nconsistent developer experience across different
  environments.\n\nExample uses of this error model include:\n\n- Partial errors.
  If a service needs to return partial errors to the client,\n    it may embed the
  `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow
  errors. A typical workflow has multiple steps. Each step may\n    have a `Status`
  message for error reporting.\n\n- Batch operations. If a client uses batch request
  and batch response, the\n    `Status` message should be used directly inside batch
  response, one for\n    each error sub-response.\n\n- Asynchronous operations. If
  an API call embeds asynchronous operation\n    results in its response, the status
  of those operations should be\n    represented directly using the `Status` message.\n\n-
  Logging. If some API errors are stored in logs, the message `Status` could\n    be
  used directly after any stripping needed for security/privacy reasons.\";s:5:\"title\";s:220:\"The
  `Status` type defines a logical error model that is suitable for\ndifferent programming
  environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc).
  The error model is designed to be:\";}}"
...
