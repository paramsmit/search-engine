---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:9:\"api.proto\";s:7:\"version\";s:15:\"version
  not set\";}"
paths:
  /api/Manager/DeleteExperiment/{experiment_name}:
    get:
      summary: '* nDelete a Experiment from DB by name.'
      operationId: DeleteExperiment
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2DeleteExperimentReply'
      parameters:
      - name: experiment_name
        in: path
        required: true
        type: string
      tags:
      - Manager
  /api/Manager/DeleteTrial/{trial_name}:
    get:
      summary: '* nDelete a Trial from DB by ID.'
      operationId: DeleteTrial
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2DeleteTrialReply'
      parameters:
      - name: trial_name
        in: path
        required: true
        type: string
      tags:
      - Manager
  /api/Manager/GetAlgorithmExtraSettings/{experiment_name}:
    get:
      summary: '* nGet all AlgorithmExtraSettings.'
      operationId: GetAlgorithmExtraSettings
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetAlgorithmExtraSettingsReply'
      parameters:
      - name: experiment_name
        in: path
        required: true
        type: string
      tags:
      - Manager
  /api/Manager/GetExperiment/{experiment_name}:
    get:
      summary: '* nGet a Experiment from DB by name.'
      operationId: GetExperiment
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetExperimentReply'
      parameters:
      - name: experiment_name
        in: path
        required: true
        type: string
      tags:
      - Manager
  /api/Manager/GetExperimentList:
    get:
      summary: '*nGet a summary list of Experiment from DB.nThe summary includes name
        and condition.'
      operationId: GetExperimentList
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetExperimentListReply'
      tags:
      - Manager
  /api/Manager/GetObservationLog:
    post:
      summary: '*nGet all log of Observations for a Trial.'
      operationId: GetObservationLog
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetObservationLogReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2GetObservationLogRequest'
      tags:
      - Manager
  /api/Manager/GetSuggestions:
    post:
      summary: '* nGet Suggestions from a Suggestion service.'
      operationId: GetSuggestions
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetSuggestionsReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2GetSuggestionsRequest'
      tags:
      - Manager
  /api/Manager/GetTrial/{trial_name}:
    get:
      summary: '*nGet a Trial from DB by ID of Trial.'
      operationId: GetTrial
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetTrialReply'
      parameters:
      - name: trial_name
        in: path
        required: true
        type: string
      tags:
      - Manager
  /api/Manager/GetTrialList/{experiment_name}:
    get:
      summary: '* nGet a list of Trial from DB by name of a Experiment.'
      operationId: GetTrialList
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2GetTrialListReply'
      parameters:
      - name: experiment_name
        in: path
        required: true
        type: string
      - name: filter
        in: query
        required: false
        type: string
      tags:
      - Manager
  /api/Manager/PreCheckRegisterExperiment:
    post:
      summary: '*nPreCheck to register a Experiment to DB.'
      operationId: PreCheckRegisterExperiment
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2PreCheckRegisterExperimentReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2Experiment'
      tags:
      - Manager
  /api/Manager/RegisterExperiment:
    post:
      summary: '*nRegister a Experiment to DB.'
      operationId: RegisterExperiment
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2RegisterExperimentReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2Experiment'
      tags:
      - Manager
  /api/Manager/RegisterTrial:
    post:
      summary: '*nRegister a Trial to DB.nID will be filled by manager automatically.'
      operationId: RegisterTrial
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2RegisterTrialReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2Trial'
      tags:
      - Manager
  /api/Manager/ReportObservationLog:
    post:
      summary: '* nReport a log of Observations for a Trial.nThe log consists of timestamp
        and value of metric.nKatib store every log of metrics.nYou can see accuracy
        curve or other metric logs on UI.'
      operationId: ReportObservationLog
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2ReportObservationLogReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2ReportObservationLogRequest'
      tags:
      - Manager
  /api/Manager/UpdateAlgorithmExtraSettings/{experiment_name}:
    put:
      summary: '* nUpdate AlgorithmExtraSettings.nThe ExtraSetting is created if it
        does not exist, otherwise it is overwrited.'
      operationId: UpdateAlgorithmExtraSettings
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2UpdateAlgorithmExtraSettingsReply'
      parameters:
      - name: experiment_name
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2UpdateAlgorithmExtraSettingsRequest'
      tags:
      - Manager
  /api/Manager/UpdateExperimentStatus/{experiment_name}:
    put:
      summary: '* nUpdate Status of a experiment.'
      operationId: UpdateExperimentStatus
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2UpdateExperimentStatusReply'
      parameters:
      - name: experiment_name
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2UpdateExperimentStatusRequest'
      tags:
      - Manager
  /api/Manager/UpdateTrialStatus:
    put:
      summary: '* nUpdate Status of a trial.'
      operationId: UpdateTrialStatus
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2UpdateTrialStatusReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2UpdateTrialStatusRequest'
      tags:
      - Manager
  /api/Manager/ValidateAlgorithmSettings:
    post:
      summary: '* nValidate AlgorithmSettings in an Experiment.nSuggestion service
        should return INVALID_ARGUMENT Error when the parameter is invalid'
      operationId: ValidateAlgorithmSettings
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/alpha2ValidateAlgorithmSettingsReply'
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/alpha2ValidateAlgorithmSettingsRequest'
      tags:
      - Manager
produces:
- application/json
schemes:
- http
- https
definitions: !php/object "O:8:\"stdClass\":53:{s:39:\"ExperimentStatusExperimentConditionType\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:6:{i:0;s:7:\"CREATED\";i:1;s:7:\"RUNNING\";i:2;s:10:\"RESTARTING\";i:3;s:9:\"SUCCEEDED\";i:4;s:6:\"FAILED\";i:5;s:7:\"UNKNOWN\";}s:7:\"default\";s:7:\"CREATED\";}s:19:\"NasConfigOperations\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"operation\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/alpha2Operation\";}}}}s:29:\"TrialSpecParameterAssignments\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"assignments\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:39:\"#/definitions/alpha2ParameterAssignment\";}}}s:5:\"title\";s:30:\"*
  \nList of ParameterAssignment\";}s:29:\"TrialStatusTrialConditionType\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:6:{i:0;s:7:\"CREATED\";i:1;s:7:\"RUNNING\";i:2;s:9:\"SUCCEEDED\";i:3;s:6:\"KILLED\";i:4;s:6:\"FAILED\";i:5;s:7:\"UNKNOWN\";}s:7:\"default\";s:7:\"CREATED\";}s:22:\"alpha2AlgorithmSetting\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:19:\"alpha2AlgorithmSpec\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:14:\"algorithm_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"algorithm_setting\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/alpha2AlgorithmSetting\";}}s:19:\"early_stopping_spec\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:37:\"#/definitions/alpha2EarlyStoppingSpec\";}}}s:27:\"alpha2DeleteExperimentReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:22:\"alpha2DeleteTrialReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:23:\"alpha2EarlyStoppingSpec\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:16:\"alpha2Experiment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"spec\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/alpha2ExperimentSpec\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/alpha2ExperimentStatus\";}}}s:20:\"alpha2ExperimentSpec\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:15:\"parameter_specs\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:48:\"#/definitions/alpha2ExperimentSpecParameterSpecs\";}s:9:\"objective\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2ObjectiveSpec\";}s:9:\"algorithm\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2AlgorithmSpec\";}s:14:\"trial_template\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"metrics_collector_spec\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"parallel_trial_count\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:15:\"max_trial_count\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:10:\"nas_config\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/alpha2NasConfig\";}}s:11:\"description\";s:285:\"*\nSpec
  of a Experiment. Experiment represents a single optimization run over a feasible
  space. \nEach Experiment contains a configuration describing the feasible space,
  as well as a set of Trials.\nIt is assumed that objective function f(x) does not
  change in the course of a Experiment.\";}s:34:\"alpha2ExperimentSpecParameterSpecs\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2ParameterSpec\";}}}s:5:\"title\";s:24:\"*
  \nList of ParameterSpec\";}s:22:\"alpha2ExperimentStatus\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"start_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"completion_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"condition\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:53:\"#/definitions/ExperimentStatusExperimentConditionType\";}}}s:23:\"alpha2ExperimentSummary\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"experiment_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/alpha2ExperimentStatus\";}}}s:19:\"alpha2FeasibleSpace\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:3:\"max\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"min\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"list\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"step\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:11:\"description\";s:107:\"*\nFeasible
  space for optimization.\nInt and Double type use Max/Min.\nDiscrete and Categorical
  type use List.\";}s:36:\"alpha2GetAlgorithmExtraSettingsReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:24:\"extra_algorithm_settings\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/alpha2AlgorithmSetting\";}}}}s:28:\"alpha2GetExperimentListReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:20:\"experiment_summaries\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:37:\"#/definitions/alpha2ExperimentSummary\";}}}}s:24:\"alpha2GetExperimentReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"experiment\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/alpha2Experiment\";}}}s:28:\"alpha2GetObservationLogReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:15:\"observation_log\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/alpha2ObservationLog\";}}}s:30:\"alpha2GetObservationLogRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:10:\"trial_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"metric_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"start_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"end_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:25:\"alpha2GetSuggestionsReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"trials\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/alpha2Trial\";}}}}s:27:\"alpha2GetSuggestionsRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:15:\"experiment_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"algorithm_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"request_number\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}}}s:23:\"alpha2GetTrialListReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"trials\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/alpha2Trial\";}}}}s:19:\"alpha2GetTrialReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"trial\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/alpha2Trial\";}}}s:17:\"alpha2GraphConfig\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"num_layers\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:11:\"input_sizes\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}}s:12:\"output_sizes\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}}}s:5:\"title\";s:38:\"*\nGraphConfig
  contains a config of DAG\";}s:12:\"alpha2Metric\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:15:\"alpha2MetricLog\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"time_stamp\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"metric\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/alpha2Metric\";}}}s:15:\"alpha2NasConfig\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"graph_config\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/alpha2GraphConfig\";}s:10:\"operations\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/NasConfigOperations\";}}s:5:\"title\";s:40:\"*\nNasConfig
  contains a config of NAS job\";}s:19:\"alpha2ObjectiveSpec\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2ObjectiveType\";}s:4:\"goal\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:6:\"format\";s:5:\"float\";}s:21:\"objective_metric_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:23:\"additional_metric_names\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:19:\"alpha2ObjectiveType\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:7:\"UNKNOWN\";i:1;s:8:\"MINIMIZE\";i:2;s:8:\"MAXIMIZE\";}s:7:\"default\";s:7:\"UNKNOWN\";s:11:\"description\";s:50:\"*\nDirection
  of optimization. Minimize or Maximize.\";}s:17:\"alpha2Observation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"metrics\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/alpha2Metric\";}}}}s:20:\"alpha2ObservationLog\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"metric_logs\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/alpha2MetricLog\";}}}}s:15:\"alpha2Operation\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:14:\"operation_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"parameter_specs\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:43:\"#/definitions/alpha2OperationParameterSpecs\";}}s:5:\"title\";s:30:\"*\nConfig
  for operations in DAG\";}s:29:\"alpha2OperationParameterSpecs\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"parameters\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2ParameterSpec\";}}}s:5:\"title\";s:24:\"*
  \nList of ParameterSpec\";}s:25:\"alpha2ParameterAssignment\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:19:\"alpha2ParameterSpec\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"parameter_type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2ParameterType\";}s:14:\"feasible_space\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2FeasibleSpace\";}}s:11:\"description\";s:88:\"*\nConfig
  for a Hyper parameter.\nKatib will create each Hyper parameter from this config.\";}s:19:\"alpha2ParameterType\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:5:{i:0;s:12:\"UNKNOWN_TYPE\";i:1;s:6:\"DOUBLE\";i:2;s:3:\"INT\";i:3;s:8:\"DISCRETE\";i:4;s:11:\"CATEGORICAL\";}s:7:\"default\";s:12:\"UNKNOWN_TYPE\";s:11:\"description\";s:36:\"*\nTypes
  of value for HyperParameter.\";}s:37:\"alpha2PreCheckRegisterExperimentReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"can_register\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:6:\"format\";s:7:\"boolean\";}}}s:29:\"alpha2RegisterExperimentReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:24:\"alpha2RegisterTrialReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:31:\"alpha2ReportObservationLogReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:33:\"alpha2ReportObservationLogRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"trial_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"observation_log\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/alpha2ObservationLog\";}}}s:11:\"alpha2Trial\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"spec\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/alpha2TrialSpec\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/alpha2TrialStatus\";}}}s:15:\"alpha2TrialSpec\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:15:\"experiment_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"objective\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/alpha2ObjectiveSpec\";}s:21:\"parameter_assignments\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:43:\"#/definitions/TrialSpecParameterAssignments\";}s:8:\"run_spec\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:22:\"metrics_collector_spec\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:17:\"alpha2TrialStatus\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:10:\"start_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"completion_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"condition\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:43:\"#/definitions/TrialStatusTrialConditionType\";}s:11:\"observation\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/alpha2Observation\";}}}s:39:\"alpha2UpdateAlgorithmExtraSettingsReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:41:\"alpha2UpdateAlgorithmExtraSettingsRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"experiment_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:24:\"extra_algorithm_settings\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/alpha2AlgorithmSetting\";}}}}s:33:\"alpha2UpdateExperimentStatusReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:35:\"alpha2UpdateExperimentStatusRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"experiment_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"new_status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:36:\"#/definitions/alpha2ExperimentStatus\";}}}s:28:\"alpha2UpdateTrialStatusReply\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:30:\"alpha2UpdateTrialStatusRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"trial_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"new_status\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:31:\"#/definitions/alpha2TrialStatus\";}}}s:36:\"alpha2ValidateAlgorithmSettingsReply\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:5:\"title\";s:67:\"*\nReturn
  INVALID_ARGUMENT Error if Algorithm Settings are not Valid\";}s:38:\"alpha2ValidateAlgorithmSettingsRequest\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"experiment_spec\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/alpha2ExperimentSpec\";}s:14:\"algorithm_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
