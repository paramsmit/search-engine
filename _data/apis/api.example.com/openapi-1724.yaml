---
openapi: 3.0.0
info: !php/object "O:8:\"stdClass\":7:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:11:\"Example.com\";s:14:\"termsOfService\";s:26:\"https://example.com/terms/\";s:7:\"contact\";O:8:\"stdClass\":2:{s:5:\"email\";s:19:\"contact@example.com\";s:3:\"url\";s:26:\"http://example.com/contact\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:43:\"https://apis.guru/openapi-template/logo.png\";}s:11:\"description\";s:1193:\"This
  is an **example** API to demonstrate features of OpenAPI specification\n# Introduction\nThis
  specification is intended to to be a good starting point for describing your API
  in \n[OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\nIt
  also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
  tool and \n[ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond
  the standard OpenAPI syntax we use a few \n[vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n\n#
  OpenAPI Specification\nThe goal of The OpenAPI Specification is to define a standard,
  language-agnostic interface to REST APIs which\nallows both humans and computers
  to discover and understand the capabilities of the service without access to source\ncode,
  documentation, or through network traffic inspection. When properly defined via
  OpenAPI, a consumer can \nunderstand and interact with the remote service with a
  minimal amount of implementation logic. Similar to what\ninterfaces have done for
  lower-level programming, OpenAPI removes the guesswork in calling the service.\n\";}"
paths: []
...
