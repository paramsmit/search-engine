---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:11:\"description\";s:23:\"This is a User
  server.\n\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:8:\"User API\";s:7:\"contact\";O:8:\"stdClass\":3:{s:4:\"name\";s:9:\"HAnt
  team\";s:5:\"email\";s:25:\"ioana.tanase@info.uaic.ro\";s:3:\"url\";s:44:\"http://students.info.uaic.ro/~ovidiu.vultur/\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: spital.ro
basePath: /v1
paths:
  /users/register:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Successful operation
        405:
          description: Validation exception
        409:
          description: The user is already registered
      security:
      - api_key: []
      - users_auth:
        - write_users
        - read_users
  /users/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: query
        name: username
        description: The user name for login
        required: false
        type: string
      - in: query
        name: password
        description: The password for login in clear text
        required: false
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: string
        422:
          description: Invalid username/password supplied
      security:
      - api_key: []
      - users_auth:
        - write_users
        - read_users
  /users/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: Successful operation
      security:
      - api_key: []
      - users_auth:
        - write_users
        - read_users
  /users/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: username
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
      security:
      - api_key: []
      - users_auth:
        - write_users
        - read_users
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: username
        description: name that need to be deleted
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: Successful operation
        400:
          description: Invalid user supplied
        404:
          description: User not found
      security:
      - api_key: []
      - users_auth:
        - write_users
        - read_users
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: username
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        200:
          description: Successful operation
        400:
          description: Invalid username supplied
        404:
          description: User not found
      security:
      - api_key: []
      - users_auth:
        - write_users
        - read_users
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":1:{s:4:\"User\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:8:\"password\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"userStatus\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";s:11:\"description\";s:11:\"User
  Status\";}}}}"
...
