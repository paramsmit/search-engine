---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"Google\";s:3:\"url\";s:18:\"https://google.com\";}s:11:\"description\";s:107:\"Cloud
  Spanner is a managed, mission-critical, globally consistent and scalable relational
  database service.\";s:5:\"title\";s:13:\"Cloud Spanner\";s:7:\"version\";s:2:\"v1\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:37:\"https://console.developers.google.com\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:116:\"https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:45:\"https://github.com/lucybot/api-spec-converter\";s:7:\"version\";s:5:\"2.6.0\";}s:6:\"format\";s:6:\"google\";s:3:\"url\";s:57:\"https://spanner.googleapis.com/$discovery/rest?version=v1\";s:7:\"version\";s:2:\"v1\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:14:\"googleapis.com\";s:13:\"x-serviceName\";s:7:\"spanner\";}"
host: spanner.googleapis.com
basePath: /
paths: ~
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":55:{s:23:\"BeginTransactionRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:33:\"The
  request for BeginTransaction.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"options\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/TransactionOptions\";s:11:\"description\";s:42:\"Required.
  Options for the new transaction.\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Binding\";O:8:\"stdClass\":3:{s:11:\"description\";s:35:\"Associates
  `members` with a `role`.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"members\";O:8:\"stdClass\":3:{s:11:\"description\";s:908:\"Specifies
  the identities requesting access for a Cloud Platform resource.\n`members` can have
  the following values:\n\n* `allUsers`: A special identifier that represents anyone
  who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`:
  A special identifier that represents anyone\n   who is authenticated with a Google
  account or a service account.\n\n* `user:{emailid}`: An email address that represents
  a specific Google\n   account. For example, `alice@gmail.com` or `joe@example.com`.\n\n\n*
  `serviceAccount:{emailid}`: An email address that represents a service\n   account.
  For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`:
  An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n*
  `domain:{domain}`: A Google Apps domain name that represents all the\n   users of
  that domain. For example, `google.com` or `example.com`.\n\n\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:4:\"role\";O:8:\"stdClass\":2:{s:11:\"description\";s:107:\"Role
  that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or
  `roles/owner`.\nRequired\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:9:\"ChildLink\";O:8:\"stdClass\":3:{s:11:\"description\";s:77:\"Metadata
  associated with a parent-child relationship appearing in a\nPlanNode.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:10:\"childIndex\";O:8:\"stdClass\":3:{s:11:\"description\";s:34:\"The
  node to which the link points.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"type\";O:8:\"stdClass\":2:{s:11:\"description\";s:239:\"The
  type of the link. For example, in Hash Joins this could be used to\ndistinguish
  between the build child and the probe child, or in the case\nof the child being
  an output variable, to represent the tag associated\nwith the output variable.\";s:4:\"type\";s:6:\"string\";}s:8:\"variable\";O:8:\"stdClass\":2:{s:11:\"description\";s:441:\"Only
  present if the child node is SCALAR and corresponds\nto an output variable of the
  parent node. The field carries the name of\nthe output variable.\nFor example, a
  `TableScan` operator that reads rows from a table will\nhave child links to the
  `SCALAR` nodes representing the output variables\ncreated for each column that is
  read by the operator. The corresponding\n`variable` fields will be set to the variable
  names assigned to the\ncolumns.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:13:\"CommitRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:23:\"The
  request for Commit.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"mutations\";O:8:\"stdClass\":3:{s:11:\"description\";s:136:\"The
  mutations to be executed when this transaction commits. All\nmutations are applied
  atomically, in the order they appear in\nthis list.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Mutation\";}s:4:\"type\";s:5:\"array\";}s:20:\"singleUseTransaction\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/TransactionOptions\";s:11:\"description\";s:441:\"Execute
  mutations in a temporary transaction. Note that unlike\ncommit of a previously-started
  transaction, commit with a\ntemporary transaction is non-idempotent. That is, if
  the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due
  to retries in the application, or in the\ntransport library), it is possible that
  the mutations are\nexecuted more than once. If this is undesirable, use\nBeginTransaction
  and\nCommit instead.\";}s:13:\"transactionId\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Commit
  a previously-started transaction.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:14:\"CommitResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:24:\"The
  response for Commit.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:15:\"commitTimestamp\";O:8:\"stdClass\":3:{s:11:\"description\";s:63:\"The
  Cloud Spanner timestamp at which the transaction committed.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:22:\"CreateDatabaseMetadata\";O:8:\"stdClass\":3:{s:11:\"description\";s:59:\"Metadata
  type for the operation returned by\nCreateDatabase.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"database\";O:8:\"stdClass\":2:{s:11:\"description\";s:27:\"The
  database being created.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"CreateDatabaseRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"The
  request for CreateDatabase.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"createStatement\";O:8:\"stdClass\":2:{s:11:\"description\";s:324:\"Required.
  A `CREATE DATABASE` statement, which specifies the ID of the\nnew database.  The
  database ID must conform to the regular expression\n`a-z*[a-z0-9]` and be between
  2 and 30 characters in length.\nIf the database ID is a reserved word or if it contains
  a hyphen, the\ndatabase ID must be enclosed in backticks (`` ` ``).\";s:4:\"type\";s:6:\"string\";}s:15:\"extraStatements\";O:8:\"stdClass\":3:{s:11:\"description\";s:259:\"An
  optional list of DDL statements to run inside the newly created\ndatabase. Statements
  can create tables, indexes, etc. These\nstatements execute atomically with the creation
  of the database:\nif there is an error in any statement, the database is not created.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:22:\"CreateInstanceMetadata\";O:8:\"stdClass\":3:{s:11:\"description\";s:59:\"Metadata
  type for the operation returned by\nCreateInstance.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:10:\"cancelTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:170:\"The
  time at which this operation was cancelled. If set, this operation is\nin the process
  of undoing itself (which is guaranteed to succeed) and\ncannot be cancelled again.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:7:\"endTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:70:\"The
  time at which this operation failed or was completed successfully.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:8:\"instance\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Instance\";s:11:\"description\";s:27:\"The
  instance being created.\";}s:9:\"startTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:58:\"The
  time at which the\nCreateInstance request was\nreceived.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"CreateInstanceRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"The
  request for CreateInstance.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"instance\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Instance\";s:11:\"description\";s:120:\"Required.
  The instance to create.  The name may be omitted, but if\nspecified must be `<parent>/instances/<instance_id>`.\";}s:10:\"instanceId\";O:8:\"stdClass\":2:{s:11:\"description\";s:144:\"Required.
  The ID of the instance to create.  Valid identifiers are of the\nform `a-z*[a-z0-9]`
  and must be between 6 and 30 characters in\nlength.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:20:\"CreateSessionRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:30:\"The
  request for CreateSession.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"session\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Session\";s:11:\"description\";s:22:\"The
  session to create.\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Database\";O:8:\"stdClass\":3:{s:11:\"description\";s:25:\"A
  Cloud Spanner database.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:264:\"Required.
  The name of the database. Values are of the form\n`projects/<project>/instances/<instance>/databases/<database>`,\nwhere
  `<database>` is as specified in the `CREATE DATABASE`\nstatement. This name can
  be passed to other API methods to\nidentify the database.\";s:4:\"type\";s:6:\"string\";}s:5:\"state\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Output
  only. The current database state.\";s:4:\"enum\";a:3:{i:0;s:17:\"STATE_UNSPECIFIED\";i:1;s:8:\"CREATING\";i:2;s:5:\"READY\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Delete\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"Arguments
  to delete operations.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"keySet\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/KeySet\";s:11:\"description\";s:62:\"Required.
  The primary keys of the rows within table to delete.\";}s:5:\"table\";O:8:\"stdClass\":2:{s:11:\"description\";s:47:\"Required.
  The table whose rows will be deleted.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Empty\";O:8:\"stdClass\":3:{s:11:\"description\";s:359:\"A
  generic empty message that you can re-use to avoid defining duplicated\nempty messages
  in your APIs. A typical example is to use it as the request\nor the response type
  of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty)
  returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is
  empty JSON object `{}`.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:17:\"ExecuteSqlRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"The
  request for ExecuteSql and\nExecuteStreamingSql.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:10:\"paramTypes\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Type\";}s:11:\"description\";s:377:\"It
  is not always possible for Cloud Spanner to infer the right SQL type\nfrom a JSON
  value.  For example, values of type `BYTES` and values\nof type `STRING` both appear
  in params as JSON strings.\n\nIn these cases, `param_types` can be used to specify
  the exact\nSQL type for some or all of the SQL query parameters. See the\ndefinition
  of Type for more information\nabout SQL types.\";s:4:\"type\";s:6:\"object\";}s:6:\"params\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:25:\"Properties
  of the object.\";}s:11:\"description\";s:616:\"The SQL query string can contain
  parameter placeholders. A parameter\nplaceholder consists of `'@'` followed by the
  parameter\nname. Parameter names consist of any combination of letters,\nnumbers,
  and underscores.\n\nParameters can appear anywhere that a literal value is expected.
  \ The same\nparameter name can be used more than once, for example:\n  `\"WHERE
  id > @msg_id AND id < @msg_id + 100\"`\n\nIt is an error to execute an SQL query
  with unbound parameters.\n\nParameter values are specified using `params`, which
  is a JSON\nobject whose keys are parameter names, and whose values are the\ncorresponding
  parameter values.\";s:4:\"type\";s:6:\"object\";}s:9:\"queryMode\";O:8:\"stdClass\":3:{s:11:\"description\";s:79:\"Used
  to control the amount of debugging information returned in\nResultSetStats.\";s:4:\"enum\";a:3:{i:0;s:6:\"NORMAL\";i:1;s:4:\"PLAN\";i:2;s:7:\"PROFILE\";}s:4:\"type\";s:6:\"string\";}s:11:\"resumeToken\";O:8:\"stdClass\":3:{s:11:\"description\";s:346:\"If
  this request is resuming a previously interrupted SQL query\nexecution, `resume_token`
  should be copied from the last\nPartialResultSet yielded before the interruption.
  Doing this\nenables the new SQL query execution to resume where the last one left\noff.
  The rest of the request parameters must exactly match the\nrequest that yielded
  this token.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:3:\"sql\";O:8:\"stdClass\":2:{s:11:\"description\";s:31:\"Required.
  The SQL query string.\";s:4:\"type\";s:6:\"string\";}s:11:\"transaction\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/TransactionSelector\";s:11:\"description\";s:118:\"The
  transaction to use. If none is provided, the default is a\ntemporary read-only transaction
  with strong concurrency.\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Field\";O:8:\"stdClass\":3:{s:11:\"description\";s:48:\"Message
  representing a single field of a struct.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:385:\"The
  name of the field. For reads, this is the column name. For\nSQL queries, it is the
  column alias (e.g., `\"Word\"` in the\nquery `\"SELECT 'hello' AS Word\"`), or the
  column name (e.g.,\n`\"ColName\"` in the query `\"SELECT ColName FROM Table\"`).
  Some\ncolumns might have an empty name (e.g., !\"SELECT\nUPPER(ColName)\"`). Note
  that a query result can contain\nmultiple fields with the same name.\";s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Type\";s:11:\"description\";s:22:\"The
  type of the field.\";}}s:4:\"type\";s:6:\"object\";}s:22:\"GetDatabaseDdlResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"The
  response for GetDatabaseDdl.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"statements\";O:8:\"stdClass\":3:{s:11:\"description\";s:96:\"A
  list of formatted DDL statements defining the schema of the database\nspecified
  in the request.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:19:\"GetIamPolicyRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:42:\"Request
  message for `GetIamPolicy` method.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:8:\"Instance\";O:8:\"stdClass\":3:{s:11:\"description\";s:76:\"An
  isolated set of Cloud Spanner resources on which databases can be hosted.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:6:\"config\";O:8:\"stdClass\":2:{s:11:\"description\";s:177:\"Required.
  The name of the instance's configuration. Values are of the form\n`projects/<project>/instanceConfigs/<configuration>`.
  See\nalso InstanceConfig and\nListInstanceConfigs.\";s:4:\"type\";s:6:\"string\";}s:11:\"displayName\";O:8:\"stdClass\":2:{s:11:\"description\";s:140:\"Required.
  The descriptive name for this instance as it appears in UIs.\nMust be unique per
  project and between 4 and 30 characters in length.\";s:4:\"type\";s:6:\"string\";}s:6:\"labels\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:1217:\"Cloud
  Labels are a flexible and lightweight mechanism for organizing cloud\nresources
  into groups that reflect a customer's organizational needs and\ndeployment strategies.
  Cloud Labels can be used to filter collections of\nresources. They can be used to
  control how resource metrics are aggregated.\nAnd they can be used as arguments
  to policy management rules (e.g. route,\nfirewall, load balancing, etc.).\n\n *
  Label keys must be between 1 and 63 characters long and must conform to\n   the
  following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.\n * Label values must
  be between 0 and 63 characters long and must conform\n   to the regular expression
  `([a-z]([-a-z0-9]*[a-z0-9])?)?`.\n * No more than 64 labels can be associated with
  a given resource.\n\nSee https://goo.gl/xmQnxf for more information on and examples
  of labels.\n\nIf you plan to use labels in your own code, please note that additional\ncharacters
  may be allowed in the future. And so you are advised to use an\ninternal label representation,
  such as JSON, which doesn't rely upon\nspecific characters being disallowed.  For
  example, representing labels\nas the string:  name + \"_\" + value  would prove
  problematic if we were to\nallow \"_\" in a future release.\";s:4:\"type\";s:6:\"object\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:247:\"Required.
  A unique identifier for the instance, which cannot be changed\nafter the instance
  is created. Values are of the form\n`projects/<project>/instances/a-z*[a-z0-9]`.
  The final\nsegment of the name must be between 6 and 30 characters in length.\";s:4:\"type\";s:6:\"string\";}s:9:\"nodeCount\";O:8:\"stdClass\":3:{s:11:\"description\";s:770:\"Required.
  The number of nodes allocated to this instance. This may be zero\nin API responses
  for instances that are not yet in state `READY`.\n\nEach Spanner node can provide
  up to 10,000 QPS of reads or 2000 QPS of\nwrites (writing single rows at 1KB data
  per row), and 2 TiB storage.\n\nFor optimal performance, we recommend provisioning
  enough nodes to keep\noverall CPU utilization under 75%.\n\nA minimum of 3 nodes
  is recommended for production environments.  This\nminimum is required for SLAs
  to apply to your instance.\n\nNote that Cloud Spanner performance is highly dependent
  on workload, schema\ndesign, and dataset characteristics. The performance numbers
  above are\nestimates, and assume [best practices](https://cloud.google.com/spanner/docs/bulk-loading)\nare
  followed.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:5:\"state\";O:8:\"stdClass\":3:{s:11:\"description\";s:187:\"Output
  only. The current instance state. For\nCreateInstance, the state must be\neither
  omitted or set to `CREATING`. For\nUpdateInstance, the state must be\neither omitted
  or set to `READY`.\";s:4:\"enum\";a:3:{i:0;s:17:\"STATE_UNSPECIFIED\";i:1;s:8:\"CREATING\";i:2;s:5:\"READY\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:14:\"InstanceConfig\";O:8:\"stdClass\":3:{s:11:\"description\";s:133:\"A
  possible configuration for a Cloud Spanner instance. Configurations\ndefine the
  geographic placement of nodes and their replication.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"displayName\";O:8:\"stdClass\":2:{s:11:\"description\";s:61:\"The
  name of this instance configuration as it appears in UIs.\";s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:117:\"A
  unique identifier for the instance configuration.  Values\nare of the form\n`projects/<project>/instanceConfigs/a-z*`\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:8:\"KeyRange\";O:8:\"stdClass\":3:{s:11:\"description\";s:2604:\"KeyRange
  represents a range of rows in a table or index.\n\nA range has a start key and an
  end key. These keys can be open or\nclosed, indicating if the range includes rows
  with that key.\n\nKeys are represented by lists, where the ith value in the list\ncorresponds
  to the ith component of the table or index primary key.\nIndividual values are encoded
  as described here.\n\nFor example, consider the following table definition:\n\n
  \   CREATE TABLE UserEvents (\n      UserName STRING(MAX),\n      EventDate STRING(10)\n
  \   ) PRIMARY KEY(UserName, EventDate);\n\nThe following keys name rows in this
  table:\n\n    \"Bob\", \"2014-09-23\"\n\nSince the `UserEvents` table's `PRIMARY
  KEY` clause names two\ncolumns, each `UserEvents` key has two elements; the first
  is the\n`UserName`, and the second is the `EventDate`.\n\nKey ranges with multiple
  components are interpreted\nlexicographically by component using the table or index
  key's declared\nsort order. For example, the following range returns all events
  for\nuser `\"Bob\"` that occurred in the year 2015:\n\n    \"start_closed\": [\"Bob\",
  \"2015-01-01\"]\n    \"end_closed\": [\"Bob\", \"2015-12-31\"]\n\nStart and end
  keys can omit trailing key components. This affects the\ninclusion and exclusion
  of rows that exactly match the provided key\ncomponents: if the key is closed, then
  rows that exactly match the\nprovided components are included; if the key is open,
  then rows\nthat exactly match are not included.\n\nFor example, the following range
  includes all events for `\"Bob\"` that\noccurred during and after the year 2000:\n\n
  \   \"start_closed\": [\"Bob\", \"2000-01-01\"]\n    \"end_closed\": [\"Bob\"]\n\nThe
  next example retrieves all events for `\"Bob\"`:\n\n    \"start_closed\": [\"Bob\"]\n
  \   \"end_closed\": [\"Bob\"]\n\nTo retrieve events before the year 2000:\n\n    \"start_closed\":
  [\"Bob\"]\n    \"end_open\": [\"Bob\", \"2000-01-01\"]\n\nThe following range includes
  all rows in the table:\n\n    \"start_closed\": []\n    \"end_closed\": []\n\nThis
  range returns all users whose `UserName` begins with any\ncharacter from A to C:\n\n
  \   \"start_closed\": [\"A\"]\n    \"end_open\": [\"D\"]\n\nThis range returns all
  users whose `UserName` begins with B:\n\n    \"start_closed\": [\"B\"]\n    \"end_open\":
  [\"C\"]\n\nKey ranges honor column sort order. For example, suppose a table is\ndefined
  as follows:\n\n    CREATE TABLE DescendingSortedTable {\n      Key INT64,\n      ...\n
  \   ) PRIMARY KEY(Key DESC);\n\nThe following range retrieves all rows with key
  values between 1\nand 100 inclusive:\n\n    \"start_closed\": [\"100\"]\n    \"end_closed\":
  [\"1\"]\n\nNote that 100 is passed as the start, and 1 is passed as the end,\nbecause
  `Key` is a descending column in the schema.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"endClosed\";O:8:\"stdClass\":3:{s:11:\"description\";s:124:\"If
  the end is closed, then the range includes all rows whose\nfirst `len(end_closed)`
  key columns exactly match `end_closed`.\";s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}s:7:\"endOpen\";O:8:\"stdClass\":3:{s:11:\"description\";s:114:\"If
  the end is open, then the range excludes rows whose first\n`len(end_open)` key columns
  exactly match `end_open`.\";s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}s:11:\"startClosed\";O:8:\"stdClass\":3:{s:11:\"description\";s:130:\"If
  the start is closed, then the range includes all rows whose\nfirst `len(start_closed)`
  key columns exactly match `start_closed`.\";s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}s:9:\"startOpen\";O:8:\"stdClass\":3:{s:11:\"description\";s:120:\"If
  the start is open, then the range excludes rows whose first\n`len(start_open)` key
  columns exactly match `start_open`.\";s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:6:\"KeySet\";O:8:\"stdClass\":3:{s:11:\"description\";s:368:\"`KeySet`
  defines a collection of Cloud Spanner keys and/or key ranges. All\nthe keys are
  expected to be in the same table or index. The keys need\nnot be sorted in any particular
  way.\n\nIf the same key is specified multiple times in the set (for example\nif
  two ranges, two keys, or a key and a range overlap), Cloud Spanner\nbehaves as if
  the key were only specified once.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:3:\"all\";O:8:\"stdClass\":2:{s:11:\"description\";s:187:\"For
  convenience `all` can be set to `true` to indicate that this\n`KeySet` matches all
  keys in the table or index. Note that any keys\nspecified in `keys` or `ranges`
  are only yielded once.\";s:4:\"type\";s:7:\"boolean\";}s:4:\"keys\";O:8:\"stdClass\":3:{s:11:\"description\";s:216:\"A
  list of specific keys. Entries in `keys` should have exactly as\nmany elements as
  there are columns in the primary or index key\nwith which this `KeySet` is used.
  \ Individual key values are\nencoded as described here.\";s:5:\"items\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}s:4:\"type\";s:5:\"array\";}s:6:\"ranges\";O:8:\"stdClass\":3:{s:11:\"description\";s:87:\"A
  list of key ranges. See KeyRange for more information about\nkey range specifications.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/KeyRange\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:21:\"ListDatabasesResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"The
  response for ListDatabases.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"databases\";O:8:\"stdClass\":3:{s:11:\"description\";s:35:\"Databases
  that matched the request.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Database\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:105:\"`next_page_token`
  can be sent in a subsequent\nListDatabases call to fetch more\nof the matching databases.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:27:\"ListInstanceConfigsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:37:\"The
  response for ListInstanceConfigs.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"instanceConfigs\";O:8:\"stdClass\":3:{s:11:\"description\";s:46:\"The
  list of requested instance configurations.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/InstanceConfig\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:125:\"`next_page_token`
  can be sent in a subsequent\nListInstanceConfigs call to\nfetch more of the matching
  instance configurations.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"ListInstancesResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"The
  response for ListInstances.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"instances\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"The
  list of requested instances.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Instance\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:105:\"`next_page_token`
  can be sent in a subsequent\nListInstances call to fetch more\nof the matching instances.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:22:\"ListOperationsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"The
  response message for Operations.ListOperations.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:34:\"The
  standard List next-page token.\";s:4:\"type\";s:6:\"string\";}s:10:\"operations\";O:8:\"stdClass\":3:{s:11:\"description\";s:70:\"A
  list of operations that matches the specified filter in the request.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/Operation\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:20:\"ListSessionsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:30:\"The
  response for ListSessions.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:103:\"`next_page_token`
  can be sent in a subsequent\nListSessions call to fetch more of the matching\nsessions.\";s:4:\"type\";s:6:\"string\";}s:8:\"sessions\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"The
  list of requested sessions.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Session\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Mutation\";O:8:\"stdClass\":3:{s:11:\"description\";s:137:\"A
  modification to one or more Cloud Spanner rows.  Mutations can be\napplied to a
  Cloud Spanner database by sending them in a\nCommit call.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"delete\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Delete\";s:11:\"description\";s:78:\"Delete
  rows from a table. Succeeds whether or not the named\nrows were present.\";}s:6:\"insert\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Write\";s:11:\"description\";s:121:\"Insert
  new rows in a table. If any of the rows already exist,\nthe write or transaction
  fails with error `ALREADY_EXISTS`.\";}s:14:\"insertOrUpdate\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Write\";s:11:\"description\";s:170:\"Like
  insert, except that if the row already exists, then\nits column values are overwritten
  with the ones provided. Any\ncolumn values not explicitly written are preserved.\";}s:7:\"replace\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Write\";s:11:\"description\";s:204:\"Like
  insert, except that if the row already exists, it is\ndeleted, and the column values
  provided are inserted\ninstead. Unlike insert_or_update, this means any values not\nexplicitly
  written become `NULL`.\";}s:6:\"update\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:19:\"#/definitions/Write\";s:11:\"description\";s:121:\"Update
  existing rows in a table. If any of the rows does not\nalready exist, the transaction
  fails with error `NOT_FOUND`.\";}}s:4:\"type\";s:6:\"object\";}s:9:\"Operation\";O:8:\"stdClass\":3:{s:11:\"description\";s:91:\"This
  resource represents a long-running operation that is the result of a\nnetwork API
  call.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"done\";O:8:\"stdClass\":2:{s:11:\"description\";s:155:\"If
  the value is `false`, it means the operation is still in progress.\nIf `true`, the
  operation is completed, and either `error` or `response` is\navailable.\";s:4:\"type\";s:7:\"boolean\";}s:5:\"error\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Status\";s:11:\"description\";s:69:\"The
  error result of the operation in case of failure or cancellation.\";}s:8:\"metadata\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:11:\"description\";s:281:\"Service-specific
  metadata associated with the operation.  It typically\ncontains progress information
  and common metadata such as create time.\nSome services might not provide such metadata.
  \ Any method that returns a\nlong-running operation should document the metadata
  type, if any.\";s:4:\"type\";s:6:\"object\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:203:\"The
  server-assigned name, which is only unique within the same service that\noriginally
  returns it. If you use the default HTTP mapping, the\n`name` should have the format
  of `operations/some/unique/name`.\";s:4:\"type\";s:6:\"string\";}s:8:\"response\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:11:\"description\";s:492:\"The
  normal response of the operation in case of success.  If the original\nmethod returns
  no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.
  \ If the original method is standard\n`Get`/`Create`/`Update`, the response should
  be the resource.  For other\nmethods, the response should have the type `XxxResponse`,
  where `Xxx`\nis the original method name.  For example, if the original method name\nis
  `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.\";s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:16:\"PartialResultSet\";O:8:\"stdClass\":3:{s:11:\"description\";s:186:\"Partial
  results from a streaming read or SQL query. Streaming reads and\nSQL queries better
  tolerate large result sets, large rows, and large\nvalues, but are a little trickier
  to consume.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:12:\"chunkedValue\";O:8:\"stdClass\":2:{s:11:\"description\";s:159:\"If
  true, then the final value in values is chunked, and must\nbe combined with more
  values from subsequent `PartialResultSet`s\nto obtain a complete field value.\";s:4:\"type\";s:7:\"boolean\";}s:8:\"metadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/ResultSetMetadata\";s:11:\"description\";s:96:\"Metadata
  about the result set, such as row type information.\nOnly present in the first response.\";}s:11:\"resumeToken\";O:8:\"stdClass\":3:{s:11:\"description\";s:294:\"Streaming
  calls might be interrupted for a variety of reasons, such\nas TCP connection loss.
  If this occurs, the stream of results can\nbe resumed by re-sending the original
  request and including\n`resume_token`. Note that executing any other transaction
  in the\nsame session invalidates the token.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:5:\"stats\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/ResultSetStats\";s:11:\"description\";s:214:\"Query
  plan and execution statistics for the query that produced this\nstreaming result
  set. These can be requested by setting\nExecuteSqlRequest.query_mode and are sent\nonly
  once with the last response in the stream.\";}s:6:\"values\";O:8:\"stdClass\":3:{s:11:\"description\";s:2556:\"A
  streamed result set consists of a stream of values, which might\nbe split into many
  `PartialResultSet` messages to accommodate\nlarge rows and/or large values. Every
  N complete values defines a\nrow, where N is equal to the number of entries in\nmetadata.row_type.fields.\n\nMost
  values are encoded based on type as described\nhere.\n\nIt is possible that the
  last value in values is \"chunked\",\nmeaning that the rest of the value is sent
  in subsequent\n`PartialResultSet`(s). This is denoted by the chunked_value\nfield.
  Two or more chunked values can be merged to form a\ncomplete value as follows:\n\n
  \ * `bool/number/null`: cannot be chunked\n  * `string`: concatenate the strings\n
  \ * `list`: concatenate the lists. If the last element in a list is a\n    `string`,
  `list`, or `object`, merge it with the first element in\n    the next list by applying
  these rules recursively.\n  * `object`: concatenate the (field name, field value)
  pairs. If a\n    field name is duplicated, then apply these rules recursively\n
  \   to merge the field values.\n\nSome examples of merging:\n\n    # Strings are
  concatenated.\n    \"foo\", \"bar\" => \"foobar\"\n\n    # Lists of non-strings
  are concatenated.\n    [2, 3], [4] => [2, 3, 4]\n\n    # Lists are concatenated,
  but the last and first elements are merged\n    # because they are strings.\n    [\"a\",
  \"b\"], [\"c\", \"d\"] => [\"a\", \"bc\", \"d\"]\n\n    # Lists are concatenated,
  but the last and first elements are merged\n    # because they are lists. Recursively,
  the last and first elements\n    # of the inner lists are merged because they are
  strings.\n    [\"a\", [\"b\", \"c\"]], [[\"d\"], \"e\"] => [\"a\", [\"b\", \"cd\"],
  \"e\"]\n\n    # Non-overlapping object fields are combined.\n    {\"a\": \"1\"},
  {\"b\": \"2\"} => {\"a\": \"1\", \"b\": 2\"}\n\n    # Overlapping object fields
  are merged.\n    {\"a\": \"1\"}, {\"a\": \"2\"} => {\"a\": \"12\"}\n\n    # Examples
  of merging objects containing lists of strings.\n    {\"a\": [\"1\"]}, {\"a\": [\"2\"]}
  => {\"a\": [\"12\"]}\n\nFor a more complete example, suppose a streaming SQL query
  is\nyielding a result set whose rows contain a single string\nfield. The following
  `PartialResultSet`s might be yielded:\n\n    {\n      \"metadata\": { ... }\n      \"values\":
  [\"Hello\", \"W\"]\n      \"chunked_value\": true\n      \"resume_token\": \"Af65...\"\n
  \   }\n    {\n      \"values\": [\"orl\"]\n      \"chunked_value\": true\n      \"resume_token\":
  \"Bqp2...\"\n    }\n    {\n      \"values\": [\"d\"]\n      \"resume_token\": \"Zx1B...\"\n
  \   }\n\nThis sequence of `PartialResultSet`s encodes two rows, one\ncontaining
  the field value `\"Hello\"`, and a second containing the\nfield value `\"World\"
  = \"W\" + \"orl\" + \"d\"`.\";s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:8:\"PlanNode\";O:8:\"stdClass\":3:{s:11:\"description\";s:63:\"Node
  information for nodes appearing in a QueryPlan.plan_nodes.\";s:10:\"properties\";O:8:\"stdClass\":7:{s:10:\"childLinks\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"List
  of child node `index`es and their relationship to this parent.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/ChildLink\";}s:4:\"type\";s:5:\"array\";}s:11:\"displayName\";O:8:\"stdClass\":2:{s:11:\"description\";s:30:\"The
  display name for the node.\";s:4:\"type\";s:6:\"string\";}s:14:\"executionStats\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:25:\"Properties
  of the object.\";}s:11:\"description\";s:235:\"The execution statistics associated
  with the node, contained in a group of\nkey-value pairs. Only present if the plan
  was returned as a result of a\nprofile query. For example, number of executions,
  number of rows/time per\nexecution etc.\";s:4:\"type\";s:6:\"object\";}s:5:\"index\";O:8:\"stdClass\":3:{s:11:\"description\";s:36:\"The
  `PlanNode`'s index in node list.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"kind\";O:8:\"stdClass\":3:{s:11:\"description\";s:263:\"Used
  to determine the type of node. May be needed for visualizing\ndifferent kinds of
  nodes differently. For example, If the node is a\nSCALAR node, it will have a condensed
  representation\nwhich can be used to directly embed a description of the node in
  its\nparent.\";s:4:\"enum\";a:3:{i:0;s:16:\"KIND_UNSPECIFIED\";i:1;s:10:\"RELATIONAL\";i:2;s:6:\"SCALAR\";}s:4:\"type\";s:6:\"string\";}s:8:\"metadata\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:25:\"Properties
  of the object.\";}s:11:\"description\";s:250:\"Attributes relevant to the node contained
  in a group of key-value pairs.\nFor example, a Parameter Reference node could have
  the following\ninformation in its metadata:\n\n    {\n      \"parameter_reference\":
  \"param1\",\n      \"parameter_type\": \"array\"\n    }\";s:4:\"type\";s:6:\"object\";}s:19:\"shortRepresentation\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/ShortRepresentation\";s:11:\"description\";s:42:\"Condensed
  representation for SCALAR nodes.\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Policy\";O:8:\"stdClass\":3:{s:11:\"description\";s:910:\"Defines
  an Identity and Access Management (IAM) policy. It is used to\nspecify access control
  policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`.
  A `Binding` binds a list of\n`members` to a `role`, where the members can be user
  accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named
  list of permissions\ndefined by IAM.\n\n**Example**\n\n    {\n      \"bindings\":
  [\n        {\n          \"role\": \"roles/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n
  \           \"group:admins@example.com\",\n            \"domain:google.com\",\n
  \           \"serviceAccount:my-other-app@appspot.gserviceaccount.com\",\n          ]\n
  \       },\n        {\n          \"role\": \"roles/viewer\",\n          \"members\":
  [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\nFor a description of IAM
  and its features, see the\n[IAM developer's guide](https://cloud.google.com/iam).\";s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"bindings\";O:8:\"stdClass\":3:{s:11:\"description\";s:95:\"Associates
  a list of `members` to a `role`.\n`bindings` with no members will result in an error.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Binding\";}s:4:\"type\";s:5:\"array\";}s:4:\"etag\";O:8:\"stdClass\":3:{s:11:\"description\";s:606:\"`etag`
  is used for optimistic concurrency control as a way to help\nprevent simultaneous
  updates of a policy from overwriting each other.\nIt is strongly suggested that
  systems make use of the `etag` in the\nread-modify-write cycle to perform policy
  updates in order to avoid race\nconditions: An `etag` is returned in the response
  to `getIamPolicy`, and\nsystems are expected to put that etag in the request to
  `setIamPolicy` to\nensure that their change will be applied to the same version
  of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the
  existing\npolicy is overwritten blindly.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:7:\"version\";O:8:\"stdClass\":3:{s:11:\"description\";s:50:\"Version
  of the `Policy`. The default version is 0.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:9:\"QueryPlan\";O:8:\"stdClass\":3:{s:11:\"description\";s:62:\"Contains
  an ordered list of nodes appearing in the query plan.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"planNodes\";O:8:\"stdClass\":3:{s:11:\"description\";s:157:\"The
  nodes in the query plan. Plan nodes are returned in pre-order starting\nwith the
  plan root. Each PlanNode's `id` corresponds to its index in\n`plan_nodes`.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/PlanNode\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:8:\"ReadOnly\";O:8:\"stdClass\":3:{s:11:\"description\";s:49:\"Message
  type to initiate a read-only transaction.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:14:\"exactStaleness\";O:8:\"stdClass\":3:{s:11:\"description\";s:503:\"Executes
  all reads at a timestamp that is `exact_staleness`\nold. The timestamp is chosen
  soon after the read is started.\n\nGuarantees that all writes that have committed
  more than the\nspecified number of seconds ago are visible. Because Cloud Spanner\nchooses
  the exact timestamp, this mode works even if the client's\nlocal clock is substantially
  skewed from Cloud Spanner commit\ntimestamps.\n\nUseful for reading at nearby replicas
  without the distributed\ntimestamp negotiation overhead of `max_staleness`.\";s:6:\"format\";s:15:\"google-duration\";s:4:\"type\";s:6:\"string\";}s:12:\"maxStaleness\";O:8:\"stdClass\":3:{s:11:\"description\";s:541:\"Read
  data at a timestamp >= `NOW - max_staleness`\nseconds. Guarantees that all writes
  that have committed more\nthan the specified number of seconds ago are visible.
  Because\nCloud Spanner chooses the exact timestamp, this mode works even if\nthe
  client's local clock is substantially skewed from Cloud Spanner\ncommit timestamps.\n\nUseful
  for reading the freshest data available at a nearby\nreplica, while bounding the
  possible staleness if the local\nreplica has fallen behind.\n\nNote that this option
  can only be used in single-use\ntransactions.\";s:6:\"format\";s:15:\"google-duration\";s:4:\"type\";s:6:\"string\";}s:16:\"minReadTimestamp\";O:8:\"stdClass\":3:{s:11:\"description\";s:314:\"Executes
  all reads at a timestamp >= `min_read_timestamp`.\n\nThis is useful for requesting
  fresher data than some previous\nread, or data that is fresh enough to observe the
  effects of some\npreviously committed transaction whose timestamp is known.\n\nNote
  that this option can only be used in single-use transactions.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:13:\"readTimestamp\";O:8:\"stdClass\":3:{s:11:\"description\";s:423:\"Executes
  all reads at the given timestamp. Unlike other modes,\nreads at a specific timestamp
  are repeatable; the same read at\nthe same timestamp always returns the same data.
  If the\ntimestamp is in the future, the read will block until the\nspecified timestamp,
  modulo the read's deadline.\n\nUseful for large scale consistent reads such as mapreduces,
  or\nfor coordinating many reads against a consistent snapshot of the\ndata.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:19:\"returnReadTimestamp\";O:8:\"stdClass\":2:{s:11:\"description\";s:121:\"If
  true, the Cloud Spanner-selected read timestamp is included in\nthe Transaction
  message that describes the transaction.\";s:4:\"type\";s:7:\"boolean\";}s:6:\"strong\";O:8:\"stdClass\":2:{s:11:\"description\";s:76:\"Read
  at a timestamp where all previously committed transactions\nare visible.\";s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:11:\"ReadRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"The
  request for Read and\nStreamingRead.\";s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"columns\";O:8:\"stdClass\":3:{s:11:\"description\";s:71:\"The
  columns of table to be returned for each row matching\nthis request.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:5:\"index\";O:8:\"stdClass\":2:{s:11:\"description\";s:184:\"If
  non-empty, the name of an index on table. This index is\nused instead of the table
  primary key when interpreting key_set\nand sorting result rows. See key_set for
  further information.\";s:4:\"type\";s:6:\"string\";}s:6:\"keySet\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/KeySet\";s:11:\"description\";s:454:\"Required.
  `key_set` identifies the rows to be yielded. `key_set` names the\nprimary keys of
  the rows in table to be yielded, unless index\nis present. If index is present,
  then key_set instead names\nindex keys in index.\n\nRows are yielded in table primary
  key order (if index is empty)\nor index key order (if index is non-empty).\n\nIt
  is not an error for the `key_set` to name rows that do not\nexist in the database.
  Read yields nothing for nonexistent rows.\";}s:5:\"limit\";O:8:\"stdClass\":3:{s:11:\"description\";s:162:\"If
  greater than zero, only the first `limit` rows are yielded. If `limit`\nis zero,
  the default is no limit.\nA limit cannot be specified if partition_token is set.\";s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:6:\"string\";}s:11:\"resumeToken\";O:8:\"stdClass\":3:{s:11:\"description\";s:317:\"If
  this request is resuming a previously interrupted read,\n`resume_token` should be
  copied from the last\nPartialResultSet yielded before the interruption. Doing this\nenables
  the new read to resume where the last read left off. The\nrest of the request parameters
  must exactly match the request\nthat yielded this token.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:5:\"table\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"Required.
  The name of the table in the database to be read.\";s:4:\"type\";s:6:\"string\";}s:11:\"transaction\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/TransactionSelector\";s:11:\"description\";s:118:\"The
  transaction to use. If none is provided, the default is a\ntemporary read-only transaction
  with strong concurrency.\";}}s:4:\"type\";s:6:\"object\";}s:9:\"ReadWrite\";O:8:\"stdClass\":3:{s:11:\"description\";s:98:\"Message
  type to initiate a read-write transaction. Currently this\ntransaction type has
  no options.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:9:\"ResultSet\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Results
  from Read or\nExecuteSql.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"metadata\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/ResultSetMetadata\";s:11:\"description\";s:60:\"Metadata
  about the result set, such as row type information.\";}s:4:\"rows\";O:8:\"stdClass\":3:{s:11:\"description\";s:203:\"Each
  element in `rows` is a row whose format is defined by\nmetadata.row_type. The ith
  element\nin each row matches the ith field in\nmetadata.row_type. Elements are\nencoded
  based on type as described\nhere.\";s:5:\"items\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}s:4:\"type\";s:5:\"array\";}s:5:\"stats\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/ResultSetStats\";s:11:\"description\";s:144:\"Query
  plan and execution statistics for the query that produced this\nresult set. These
  can be requested by setting\nExecuteSqlRequest.query_mode.\";}}s:4:\"type\";s:6:\"object\";}s:17:\"ResultSetMetadata\";O:8:\"stdClass\":3:{s:11:\"description\";s:47:\"Metadata
  about a ResultSet or PartialResultSet.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"rowType\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/StructType\";s:11:\"description\";s:315:\"Indicates
  the field names and types for the rows in the result\nset.  For example, a SQL query
  like `\"SELECT UserId, UserName FROM\nUsers\"` could return a `row_type` value like:\n\n
  \   \"fields\": [\n      { \"name\": \"UserId\", \"type\": { \"code\": \"INT64\"
  } },\n      { \"name\": \"UserName\", \"type\": { \"code\": \"STRING\" } },\n    ]\";}s:11:\"transaction\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/Transaction\";s:11:\"description\";s:121:\"If
  the read or SQL query began a transaction as a side-effect, the\ninformation about
  the new transaction is yielded here.\";}}s:4:\"type\";s:6:\"object\";}s:14:\"ResultSetStats\";O:8:\"stdClass\":3:{s:11:\"description\";s:60:\"Additional
  statistics about a ResultSet or PartialResultSet.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"queryPlan\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/QueryPlan\";s:11:\"description\";s:52:\"QueryPlan
  for the query associated with this result.\";}s:10:\"queryStats\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:25:\"Properties
  of the object.\";}s:11:\"description\";s:262:\"Aggregated statistics from the execution
  of the query. Only present when\nthe query is profiled. For example, a query could
  return the statistics as\nfollows:\n\n    {\n      \"rows_returned\": \"3\",\n      \"elapsed_time\":
  \"1.22 secs\",\n      \"cpu_time\": \"1.19 secs\"\n    }\";s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:15:\"RollbackRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:25:\"The
  request for Rollback.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:13:\"transactionId\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"Required.
  The transaction to roll back.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Session\";O:8:\"stdClass\":3:{s:11:\"description\";s:35:\"A
  session in the Cloud Spanner API.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:22:\"approximateLastUseTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:124:\"Output
  only. The approximate timestamp when the session is last used. It is\ntypically
  earlier than the actual last use time.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:10:\"createTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:55:\"Output
  only. The timestamp when the session is created.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:6:\"labels\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:372:\"The
  labels for the session.\n\n * Label keys must be between 1 and 63 characters long
  and must conform to\n   the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.\n
  * Label values must be between 0 and 63 characters long and must conform\n   to
  the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.\n * No more than 20 labels
  can be associated with a given session.\";s:4:\"type\";s:6:\"object\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"The
  name of the session.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:19:\"SetIamPolicyRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:42:\"Request
  message for `SetIamPolicy` method.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"policy\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Policy\";s:11:\"description\";s:224:\"REQUIRED:
  The complete policy to be applied to the `resource`. The size of\nthe policy is
  limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud
  Platform services (such as Projects)\nmight reject them.\";}}s:4:\"type\";s:6:\"object\";}s:19:\"ShortRepresentation\";O:8:\"stdClass\":3:{s:11:\"description\";s:90:\"Condensed
  representation of a node and its subtree. Only present for\n`SCALAR` PlanNode(s).\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:70:\"A
  string representation of the expression subtree rooted at this node.\";s:4:\"type\";s:6:\"string\";}s:10:\"subqueries\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:11:\"description\";s:286:\"A
  mapping of (subquery variable name) -> (subquery node id) for cases\nwhere the `description`
  string of this node references a `SCALAR`\nsubquery contained in the expression
  subtree rooted at this node. The\nreferenced `SCALAR` subquery may not necessarily
  be a direct child of\nthis node.\";s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Status\";O:8:\"stdClass\":3:{s:11:\"description\";s:2437:\"The
  `Status` type defines a logical error model that is suitable for different\nprogramming
  environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc).
  The error model is designed to be:\n\n- Simple to use and understand for most users\n-
  Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains
  three pieces of data: error code, error message,\nand error details. The error code
  should be an enum value of\ngoogle.rpc.Code, but it may accept additional error
  codes if needed.  The\nerror message should be a developer-facing English message
  that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror
  message is needed, put the localized message in the error details or\nlocalize it
  in the client. The optional error details may contain arbitrary\ninformation about
  the error. There is a predefined set of error detail types\nin the package `google.rpc`
  that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status`
  message is the logical representation of the error model, but it\nis not necessarily
  the actual wire format. When the `Status` message is\nexposed in different client
  libraries and different wire protocols, it can be\nmapped differently. For example,
  it will likely be mapped to some exceptions\nin Java, but more likely mapped to
  some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message
  can be used in a variety of\nenvironments, either with or without APIs, to provide
  a\nconsistent developer experience across different environments.\n\nExample uses
  of this error model include:\n\n- Partial errors. If a service needs to return partial
  errors to the client,\n    it may embed the `Status` in the normal response to indicate
  the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps.
  Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations.
  If a client uses batch request and batch response, the\n    `Status` message should
  be used directly inside batch response, one for\n    each error sub-response.\n\n-
  Asynchronous operations. If an API call embeds asynchronous operation\n    results
  in its response, the status of those operations should be\n    represented directly
  using the `Status` message.\n\n- Logging. If some API errors are stored in logs,
  the message `Status` could\n    be used directly after any stripping needed for
  security/privacy reasons.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"code\";O:8:\"stdClass\":3:{s:11:\"description\";s:66:\"The
  status code, which should be an enum value of google.rpc.Code.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:7:\"details\";O:8:\"stdClass\":3:{s:11:\"description\";s:105:\"A
  list of messages that carry the error details.  There is a common set of\nmessage
  types for APIs to use.\";s:5:\"items\";O:8:\"stdClass\":2:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:7:\"message\";O:8:\"stdClass\":2:{s:11:\"description\";s:188:\"A
  developer-facing error message, which should be in English. Any\nuser-facing error
  message should be localized and sent in the\ngoogle.rpc.Status.details field, or
  localized by the client.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:10:\"StructType\";O:8:\"stdClass\":3:{s:11:\"description\";s:49:\"`StructType`
  defines the fields of a STRUCT type.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"fields\";O:8:\"stdClass\":3:{s:11:\"description\";s:341:\"The
  list of fields that make up this struct. Order is\nsignificant, because values of
  this struct type are represented as\nlists, where the order of field values matches
  the order of\nfields in the StructType. In turn, the order of fields\nmatches the
  order of columns in a read request, or the order of\nfields in the `SELECT` clause
  of a query.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Field\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:25:\"TestIamPermissionsRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:48:\"Request
  message for `TestIamPermissions` method.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"permissions\";O:8:\"stdClass\":3:{s:11:\"description\";s:151:\"REQUIRED:
  The set of permissions to check for 'resource'.\nPermissions with wildcards (such
  as '*', 'spanner.*', 'spanner.instances.*') are not allowed.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:26:\"TestIamPermissionsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:49:\"Response
  message for `TestIamPermissions` method.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"permissions\";O:8:\"stdClass\":3:{s:11:\"description\";s:76:\"A
  subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:11:\"Transaction\";O:8:\"stdClass\":3:{s:11:\"description\";s:14:\"A
  transaction.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":3:{s:11:\"description\";s:221:\"`id`
  may be used to identify the transaction in subsequent\nRead,\nExecuteSql,\nCommit,
  or\nRollback calls.\n\nSingle-use read-only transactions do not have IDs, because\nsingle-use
  transactions do not support multiple requests.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:13:\"readTimestamp\";O:8:\"stdClass\":3:{s:11:\"description\";s:163:\"For
  snapshot read-only transactions, the read timestamp chosen\nfor the transaction.
  Not returned by default: see\nTransactionOptions.ReadOnly.return_read_timestamp.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:18:\"TransactionOptions\";O:8:\"stdClass\":3:{s:11:\"description\";s:9076:\"#
  Transactions\n\n\nEach session can have at most one active transaction at a time.
  After the\nactive transaction is completed, the session can immediately be\nre-used
  for the next transaction. It is not necessary to create a\nnew session for each
  transaction.\n\n# Transaction Modes\n\nCloud Spanner supports two transaction modes:\n\n
  \ 1. Locking read-write. This type of transaction is the only way\n     to write
  data into Cloud Spanner. These transactions rely on\n     pessimistic locking and,
  if necessary, two-phase commit.\n     Locking read-write transactions may abort,
  requiring the\n     application to retry.\n\n  2. Snapshot read-only. This transaction
  type provides guaranteed\n     consistency across several reads, but does not allow\n
  \    writes. Snapshot read-only transactions can be configured to\n     read at
  timestamps in the past. Snapshot read-only\n     transactions do not need to be
  committed.\n\nFor transactions that only read, snapshot read-only transactions\nprovide
  simpler semantics and are almost always faster. In\nparticular, read-only transactions
  do not take locks, so they do\nnot conflict with read-write transactions. As a consequence
  of not\ntaking locks, they also do not abort, so retry loops are not needed.\n\nTransactions
  may only read/write data in a single database. They\nmay, however, read/write data
  in different tables within that\ndatabase.\n\n## Locking Read-Write Transactions\n\nLocking
  transactions may be used to atomically read-modify-write\ndata anywhere in a database.
  This type of transaction is externally\nconsistent.\n\nClients should attempt to
  minimize the amount of time a transaction\nis active. Faster transactions commit
  with higher probability\nand cause less contention. Cloud Spanner attempts to keep
  read locks\nactive as long as the transaction continues to do reads, and the\ntransaction
  has not been terminated by\nCommit or\nRollback.  Long periods of\ninactivity at
  the client may cause Cloud Spanner to release a\ntransaction's locks and abort it.\n\nReads
  performed within a transaction acquire locks on the data\nbeing read. Writes can
  only be done at commit time, after all reads\nhave been completed.\nConceptually,
  a read-write transaction consists of zero or more\nreads or SQL queries followed
  by\nCommit. At any time before\nCommit, the client can send a\nRollback request
  to abort the\ntransaction.\n\n### Semantics\n\nCloud Spanner can commit the transaction
  if all read locks it acquired\nare still valid at commit time, and it is able to
  acquire write\nlocks for all writes. Cloud Spanner can abort the transaction for
  any\nreason. If a commit attempt returns `ABORTED`, Cloud Spanner guarantees\nthat
  the transaction has not modified any user data in Cloud Spanner.\n\nUnless the transaction
  commits, Cloud Spanner makes no guarantees about\nhow long the transaction's locks
  were held for. It is an error to\nuse Cloud Spanner locks for any sort of mutual
  exclusion other than\nbetween Cloud Spanner transactions themselves.\n\n### Retrying
  Aborted Transactions\n\nWhen a transaction aborts, the application can choose to
  retry the\nwhole transaction again. To maximize the chances of successfully\ncommitting
  the retry, the client should execute the retry in the\nsame session as the original
  attempt. The original session's lock\npriority increases with each consecutive abort,
  meaning that each\nattempt has a slightly better chance of success than the previous.\n\nUnder
  some circumstances (e.g., many transactions attempting to\nmodify the same row(s)),
  a transaction can abort many times in a\nshort period before successfully committing.
  Thus, it is not a good\nidea to cap the number of retries a transaction can attempt;\ninstead,
  it is better to limit the total amount of wall time spent\nretrying.\n\n### Idle
  Transactions\n\nA transaction is considered idle if it has no outstanding reads
  or\nSQL queries and has not started a read or SQL query within the last 10\nseconds.
  Idle transactions can be aborted by Cloud Spanner so that they\ndon't hold on to
  locks indefinitely. In that case, the commit will\nfail with error `ABORTED`.\n\nIf
  this behavior is undesirable, periodically executing a simple\nSQL query in the
  transaction (e.g., `SELECT 1`) prevents the\ntransaction from becoming idle.\n\n##
  Snapshot Read-Only Transactions\n\nSnapshot read-only transactions provides a simpler
  method than\nlocking read-write transactions for doing several consistent\nreads.
  However, this type of transaction does not support writes.\n\nSnapshot transactions
  do not take locks. Instead, they work by\nchoosing a Cloud Spanner timestamp, then
  executing all reads at that\ntimestamp. Since they do not acquire locks, they do
  not block\nconcurrent read-write transactions.\n\nUnlike locking read-write transactions,
  snapshot read-only\ntransactions never abort. They can fail if the chosen read\ntimestamp
  is garbage collected; however, the default garbage\ncollection policy is generous
  enough that most applications do not\nneed to worry about this in practice.\n\nSnapshot
  read-only transactions do not need to call\nCommit or\nRollback (and in fact are
  not\npermitted to do so).\n\nTo execute a snapshot transaction, the client specifies
  a timestamp\nbound, which tells Cloud Spanner how to choose a read timestamp.\n\nThe
  types of timestamp bound are:\n\n  - Strong (the default).\n  - Bounded staleness.\n
  \ - Exact staleness.\n\nIf the Cloud Spanner database to be read is geographically
  distributed,\nstale read-only transactions can execute more quickly than strong\nor
  read-write transaction, because they are able to execute far\nfrom the leader replica.\n\nEach
  type of timestamp bound is discussed in detail below.\n\n### Strong\n\nStrong reads
  are guaranteed to see the effects of all transactions\nthat have committed before
  the start of the read. Furthermore, all\nrows yielded by a single read are consistent
  with each other -- if\nany part of the read observes a transaction, all parts of
  the read\nsee the transaction.\n\nStrong reads are not repeatable: two consecutive
  strong read-only\ntransactions might return inconsistent results if there are\nconcurrent
  writes. If consistency across reads is required, the\nreads should be executed within
  a transaction or at an exact read\ntimestamp.\n\nSee TransactionOptions.ReadOnly.strong.\n\n###
  Exact Staleness\n\nThese timestamp bounds execute reads at a user-specified\ntimestamp.
  Reads at a timestamp are guaranteed to see a consistent\nprefix of the global transaction
  history: they observe\nmodifications done by all transactions with a commit timestamp
  <=\nthe read timestamp, and observe none of the modifications done by\ntransactions
  with a larger commit timestamp. They will block until\nall conflicting transactions
  that may be assigned commit timestamps\n<= the read timestamp have finished.\n\nThe
  timestamp can either be expressed as an absolute Cloud Spanner commit\ntimestamp
  or a staleness relative to the current time.\n\nThese modes do not require a \"negotiation
  phase\" to pick a\ntimestamp. As a result, they execute slightly faster than the\nequivalent
  boundedly stale concurrency modes. On the other hand,\nboundedly stale reads usually
  return fresher results.\n\nSee TransactionOptions.ReadOnly.read_timestamp and\nTransactionOptions.ReadOnly.exact_staleness.\n\n###
  Bounded Staleness\n\nBounded staleness modes allow Cloud Spanner to pick the read
  timestamp,\nsubject to a user-provided staleness bound. Cloud Spanner chooses the\nnewest
  timestamp within the staleness bound that allows execution\nof the reads at the
  closest available replica without blocking.\n\nAll rows yielded are consistent with
  each other -- if any part of\nthe read observes a transaction, all parts of the
  read see the\ntransaction. Boundedly stale reads are not repeatable: two stale\nreads,
  even if they use the same staleness bound, can execute at\ndifferent timestamps
  and thus return inconsistent results.\n\nBoundedly stale reads execute in two phases:
  the first phase\nnegotiates a timestamp among all replicas needed to serve the\nread.
  In the second phase, reads are executed at the negotiated\ntimestamp.\n\nAs a result
  of the two phase execution, bounded staleness reads are\nusually a little slower
  than comparable exact staleness\nreads. However, they are typically able to return
  fresher\nresults, and are more likely to execute at the closest replica.\n\nBecause
  the timestamp negotiation requires up-front knowledge of\nwhich rows will be read,
  it can only be used with single-use\nread-only transactions.\n\nSee TransactionOptions.ReadOnly.max_staleness
  and\nTransactionOptions.ReadOnly.min_read_timestamp.\n\n### Old Read Timestamps
  and Garbage Collection\n\nCloud Spanner continuously garbage collects deleted and
  overwritten data\nin the background to reclaim storage space. This process is known\nas
  \"version GC\". By default, version GC reclaims versions after they\nare one hour
  old. Because of this, Cloud Spanner cannot perform reads\nat read timestamps more
  than one hour in the past. This\nrestriction also applies to in-progress reads and/or
  SQL queries whose\ntimestamp become too old while executing. Reads and SQL queries
  with\ntoo-old read timestamps fail with the error `FAILED_PRECONDITION`.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"readOnly\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/ReadOnly\";s:11:\"description\";s:167:\"Transaction
  will not write.\n\nAuthorization to begin a read-only transaction requires\n`spanner.databases.beginReadOnlyTransaction`
  permission\non the `session` resource.\";}s:9:\"readWrite\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/ReadWrite\";s:11:\"description\";s:174:\"Transaction
  may write.\n\nAuthorization to begin a read-write transaction requires\n`spanner.databases.beginOrRollbackReadWriteTransaction`
  permission\non the `session` resource.\";}}s:4:\"type\";s:6:\"object\";}s:19:\"TransactionSelector\";O:8:\"stdClass\":3:{s:11:\"description\";s:152:\"This
  message is used to select the transaction in which a\nRead or\nExecuteSql call runs.\n\nSee
  TransactionOptions for more information about transactions.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"begin\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/TransactionOptions\";s:11:\"description\";s:177:\"Begin
  a new transaction and execute this read or SQL query in\nit. The transaction ID
  of the new transaction is returned in\nResultSetMetadata.transaction, which is a
  Transaction.\";}s:2:\"id\";O:8:\"stdClass\":3:{s:11:\"description\";s:66:\"Execute
  the read or SQL query in a previously-started transaction.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:9:\"singleUse\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/TransactionOptions\";s:11:\"description\";s:150:\"Execute
  the read or SQL query in a temporary transaction.\nThis is the most efficient way
  to execute a transaction that\nconsists of a single SQL query.\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Type\";O:8:\"stdClass\":3:{s:11:\"description\";s:117:\"`Type`
  indicates the type of a Cloud Spanner value, as might be stored in a\ntable cell
  or returned from an SQL query.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"arrayElementType\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Type\";s:11:\"description\";s:78:\"If
  code == ARRAY, then `array_element_type`\nis the type of the array elements.\";}s:4:\"code\";O:8:\"stdClass\":3:{s:11:\"description\";s:37:\"Required.
  The TypeCode for this type.\";s:4:\"enum\";a:10:{i:0;s:21:\"TYPE_CODE_UNSPECIFIED\";i:1;s:4:\"BOOL\";i:2;s:5:\"INT64\";i:3;s:7:\"FLOAT64\";i:4;s:9:\"TIMESTAMP\";i:5;s:4:\"DATE\";i:6;s:6:\"STRING\";i:7;s:5:\"BYTES\";i:8;s:5:\"ARRAY\";i:9;s:6:\"STRUCT\";}s:4:\"type\";s:6:\"string\";}s:10:\"structType\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/StructType\";s:11:\"description\";s:88:\"If
  code == STRUCT, then `struct_type`\nprovides type information for the struct's fields.\";}}s:4:\"type\";s:6:\"object\";}s:25:\"UpdateDatabaseDdlMetadata\";O:8:\"stdClass\":3:{s:11:\"description\";s:62:\"Metadata
  type for the operation returned by\nUpdateDatabaseDdl.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:16:\"commitTimestamps\";O:8:\"stdClass\":3:{s:11:\"description\";s:163:\"Reports
  the commit timestamps of all statements that have\nsucceeded so far, where `commit_timestamps[i]`
  is the commit\ntimestamp for the statement `statements[i]`.\";s:5:\"items\";O:8:\"stdClass\":2:{s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:8:\"database\";O:8:\"stdClass\":2:{s:11:\"description\";s:28:\"The
  database being modified.\";s:4:\"type\";s:6:\"string\";}s:10:\"statements\";O:8:\"stdClass\":3:{s:11:\"description\";s:121:\"For
  an update this list contains all the statements. For an\nindividual statement, this
  list contains only that statement.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:24:\"UpdateDatabaseDdlRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:783:\"Enqueues
  the given DDL statements to be applied, in order but not\nnecessarily all at once,
  to the database schema at some point (or\npoints) in the future. The server checks
  that the statements\nare executable (syntactically valid, name tables that exist,
  etc.)\nbefore enqueueing them, but they may still fail upon\nlater execution (e.g.,
  if a statement from another batch of\nstatements is applied first and it conflicts
  in some way, or if\nthere is some data-related problem like a `NULL` value in a
  column to\nwhich `NOT NULL` would be added). If a statement fails, all\nsubsequent
  statements in the batch are automatically cancelled.\n\nEach batch of statements
  is assigned a name which can be used with\nthe Operations API to monitor\nprogress.
  See the\noperation_id field for more\ndetails.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"operationId\";O:8:\"stdClass\":2:{s:11:\"description\";s:773:\"If
  empty, the new update request is assigned an\nautomatically-generated operation
  ID. Otherwise, `operation_id`\nis used to construct the name of the resulting\nOperation.\n\nSpecifying
  an explicit operation ID simplifies determining\nwhether the statements were executed
  in the event that the\nUpdateDatabaseDdl call is replayed,\nor the return value
  is otherwise lost: the database and\n`operation_id` fields can be combined to form
  the\nname of the resulting\nlongrunning.Operation: `<database>/operations/<operation_id>`.\n\n`operation_id`
  should be unique within the database, and must be\na valid identifier: `a-z*`. Note
  that\nautomatically-generated operation IDs always begin with an\nunderscore. If
  the named operation already exists,\nUpdateDatabaseDdl returns\n`ALREADY_EXISTS`.\";s:4:\"type\";s:6:\"string\";}s:10:\"statements\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"DDL
  statements to be applied to the database.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:22:\"UpdateInstanceMetadata\";O:8:\"stdClass\":3:{s:11:\"description\";s:59:\"Metadata
  type for the operation returned by\nUpdateInstance.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:10:\"cancelTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:170:\"The
  time at which this operation was cancelled. If set, this operation is\nin the process
  of undoing itself (which is guaranteed to succeed) and\ncannot be cancelled again.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:7:\"endTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:70:\"The
  time at which this operation failed or was completed successfully.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:8:\"instance\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Instance\";s:11:\"description\";s:36:\"The
  desired end state of the update.\";}s:9:\"startTime\";O:8:\"stdClass\":3:{s:11:\"description\";s:54:\"The
  time at which UpdateInstance\nrequest was received.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:21:\"UpdateInstanceRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"The
  request for UpdateInstance.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"fieldMask\";O:8:\"stdClass\":3:{s:11:\"description\";s:323:\"Required.
  A mask specifying which fields in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.instance]
  should be updated.\nThe field mask must always be specified; this prevents any future
  fields in\n[][google.spanner.admin.instance.v1.Instance] from being erased accidentally
  by clients that do not know\nabout them.\";s:6:\"format\";s:16:\"google-fieldmask\";s:4:\"type\";s:6:\"string\";}s:8:\"instance\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:22:\"#/definitions/Instance\";s:11:\"description\";s:203:\"Required.
  The instance to update, which must always include the instance\nname.  Otherwise,
  only fields mentioned in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask]
  need be included.\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Write\";O:8:\"stdClass\":3:{s:11:\"description\";s:70:\"Arguments
  to insert, update, insert_or_update, and\nreplace operations.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"columns\";O:8:\"stdClass\":3:{s:11:\"description\";s:195:\"The
  names of the columns in table to be written.\n\nThe list of columns must contain
  enough columns to allow\nCloud Spanner to derive values for all primary key columns
  in the\nrow(s) to be modified.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:5:\"table\";O:8:\"stdClass\":2:{s:11:\"description\";s:47:\"Required.
  The table whose rows will be written.\";s:4:\"type\";s:6:\"string\";}s:6:\"values\";O:8:\"stdClass\":3:{s:11:\"description\";s:447:\"The
  values to be written. `values` can contain more than one\nlist of values. If it
  does, then multiple rows are written, one\nfor each entry in `values`. Each list
  in `values` must have\nexactly as many entries as there are entries in columns\nabove.
  Sending multiple lists is equivalent to sending multiple\n`Mutation`s, each containing
  one `values` entry and repeating\ntable and columns. Individual values in each list
  are\nencoded as described here.\";s:5:\"items\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":0:{}s:4:\"type\";s:5:\"array\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}}"
...
