---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":11:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"Google\";s:3:\"url\";s:18:\"https://google.com\";}s:11:\"description\";s:244:\"The
  Runtime Configurator allows you to dynamically configure and expose variables through
  Google Cloud Platform. In addition, you can also set Watchers and Waiters that will
  watch for changes to your data and return based on certain conditions.\";s:5:\"title\";s:27:\"Cloud
  Runtime Configuration\";s:7:\"version\";s:2:\"v1\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:37:\"https://console.developers.google.com\";}s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"cloud\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:116:\"https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:45:\"https://github.com/lucybot/api-spec-converter\";s:7:\"version\";s:5:\"2.6.2\";}s:6:\"format\";s:6:\"google\";s:3:\"url\";s:63:\"https://runtimeconfig.googleapis.com/$discovery/rest?version=v1\";s:7:\"version\";s:2:\"v1\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:14:\"googleapis.com\";s:13:\"x-serviceName\";s:13:\"runtimeconfig\";}"
host: runtimeconfig.googleapis.com
basePath: /
paths: ~
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":5:{s:22:\"CancelOperationRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"The
  request message for Operations.CancelOperation.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:5:\"Empty\";O:8:\"stdClass\":3:{s:11:\"description\";s:359:\"A
  generic empty message that you can re-use to avoid defining duplicated\nempty messages
  in your APIs. A typical example is to use it as the request\nor the response type
  of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty)
  returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is
  empty JSON object `{}`.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:22:\"ListOperationsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"The
  response message for Operations.ListOperations.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:34:\"The
  standard List next-page token.\";s:4:\"type\";s:6:\"string\";}s:10:\"operations\";O:8:\"stdClass\":3:{s:11:\"description\";s:70:\"A
  list of operations that matches the specified filter in the request.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/Operation\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:9:\"Operation\";O:8:\"stdClass\":3:{s:11:\"description\";s:91:\"This
  resource represents a long-running operation that is the result of a\nnetwork API
  call.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"done\";O:8:\"stdClass\":2:{s:11:\"description\";s:155:\"If
  the value is `false`, it means the operation is still in progress.\nIf `true`, the
  operation is completed, and either `error` or `response` is\navailable.\";s:4:\"type\";s:7:\"boolean\";}s:5:\"error\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/Status\";s:11:\"description\";s:69:\"The
  error result of the operation in case of failure or cancellation.\";}s:8:\"metadata\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:11:\"description\";s:281:\"Service-specific
  metadata associated with the operation.  It typically\ncontains progress information
  and common metadata such as create time.\nSome services might not provide such metadata.
  \ Any method that returns a\nlong-running operation should document the metadata
  type, if any.\";s:4:\"type\";s:6:\"object\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:203:\"The
  server-assigned name, which is only unique within the same service that\noriginally
  returns it. If you use the default HTTP mapping, the\n`name` should have the format
  of `operations/some/unique/name`.\";s:4:\"type\";s:6:\"string\";}s:8:\"response\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:11:\"description\";s:492:\"The
  normal response of the operation in case of success.  If the original\nmethod returns
  no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.
  \ If the original method is standard\n`Get`/`Create`/`Update`, the response should
  be the resource.  For other\nmethods, the response should have the type `XxxResponse`,
  where `Xxx`\nis the original method name.  For example, if the original method name\nis
  `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.\";s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Status\";O:8:\"stdClass\":3:{s:11:\"description\";s:2437:\"The
  `Status` type defines a logical error model that is suitable for different\nprogramming
  environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc).
  The error model is designed to be:\n\n- Simple to use and understand for most users\n-
  Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains
  three pieces of data: error code, error message,\nand error details. The error code
  should be an enum value of\ngoogle.rpc.Code, but it may accept additional error
  codes if needed.  The\nerror message should be a developer-facing English message
  that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror
  message is needed, put the localized message in the error details or\nlocalize it
  in the client. The optional error details may contain arbitrary\ninformation about
  the error. There is a predefined set of error detail types\nin the package `google.rpc`
  that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status`
  message is the logical representation of the error model, but it\nis not necessarily
  the actual wire format. When the `Status` message is\nexposed in different client
  libraries and different wire protocols, it can be\nmapped differently. For example,
  it will likely be mapped to some exceptions\nin Java, but more likely mapped to
  some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message
  can be used in a variety of\nenvironments, either with or without APIs, to provide
  a\nconsistent developer experience across different environments.\n\nExample uses
  of this error model include:\n\n- Partial errors. If a service needs to return partial
  errors to the client,\n    it may embed the `Status` in the normal response to indicate
  the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps.
  Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations.
  If a client uses batch request and batch response, the\n    `Status` message should
  be used directly inside batch response, one for\n    each error sub-response.\n\n-
  Asynchronous operations. If an API call embeds asynchronous operation\n    results
  in its response, the status of those operations should be\n    represented directly
  using the `Status` message.\n\n- Logging. If some API errors are stored in logs,
  the message `Status` could\n    be used directly after any stripping needed for
  security/privacy reasons.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"code\";O:8:\"stdClass\":3:{s:11:\"description\";s:66:\"The
  status code, which should be an enum value of google.rpc.Code.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:7:\"details\";O:8:\"stdClass\":3:{s:11:\"description\";s:105:\"A
  list of messages that carry the error details.  There is a common set of\nmessage
  types for APIs to use.\";s:5:\"items\";O:8:\"stdClass\":2:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:11:\"description\";s:61:\"Properties
  of the object. Contains field @type with type URL.\";}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:7:\"message\";O:8:\"stdClass\":2:{s:11:\"description\";s:188:\"A
  developer-facing error message, which should be in English. Any\nuser-facing error
  message should be localized and sent in the\ngoogle.rpc.Status.details field, or
  localized by the client.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}}"
...
