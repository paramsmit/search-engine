---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:5:\"title\";s:17:\"Gallop travel api\";s:7:\"version\";s:5:\"1.0.0\";}"
host: api.galback.yiilab.com
basePath: /api/v1
paths:
  /advices:
    get:
      tags:
      - Advices
      description: Get list by advices from geo-object
      produces:
      - application/json
      parameters:
      - name: geo_object_id
        in: query
        description: Id geo-object
        required: true
        type: integer
      responses:
        200:
          description: List advices
          schema:
            $ref: '#/definitions/Advice'
        404:
          description: Photos or object not found
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - Advices
      description: Add advice to geo-object
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/AdvicePost'
      responses:
        200:
          description: Created advice
          schema:
            $ref: '#/definitions/Advice'
  /advices/{id}:
    delete:
      tags:
      - Advices
      description: Delete advice from geo-object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Advice ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: Object not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of delete
  /advices/{id}/votes:
    post:
      tags:
      - Advices
      description: Set vote to advice
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Advice ID
        required: true
        type: integer
      responses:
        201:
          description: Count votes
        404:
          description: Object not found
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Advices
      description: Delete vote from advice
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Advice ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: Object not found
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/comments:
    get:
      tags:
      - Comments
      description: Get list of comments for geo object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: offset
        in: query
        description: Offset comments count
        required: true
        type: integer
      - name: count
        in: query
        description: Limit comments count
        required: true
        type: integer
      responses:
        200:
          description: List of comments for the selected geo object
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        400:
          description: Empty required query parameters
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - Comments
      description: Create a new comment for geo object
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/CommentPost'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/Comment'
        500:
          description: Error of creation
  /posts/{id}/comments:
    get:
      tags:
      - Comments
      description: Get list of comments for post
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      - name: offset
        in: query
        description: Offset comments count
        required: true
        type: integer
      - name: count
        in: query
        description: Limit comments count
        required: true
        type: integer
      responses:
        200:
          description: List of comments for the selected post
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        400:
          description: Empty required query parameters
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - Comments
      description: Create a new comment for post
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/CommentPost'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/Comment'
        500:
          description: Error of creation
          schema:
            $ref: '#/definitions/errorModel'
  /comments/{id}:
    put:
      tags:
      - Comments
      description: Update the comment by ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Comment ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/CommentPost'
      responses:
        200:
          description: Updated successful
          schema:
            $ref: '#/definitions/Comment'
        500:
          description: Error of update
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Comments
      description: Soft delete the comment by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Comment ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/favorite:
    put:
      tags:
      - Favorites
      description: Add geo object to favorites of user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: X-LANG
        in: header
        description: Language for response
        required: false
        type: string
        enum:
        - en
        - de
        - ru
        - fr
        - it
        - es
        - ar
        - jp
        - cn
      responses:
        201:
          description: Create successful
        500:
          description: Error of creation
    delete:
      tags:
      - Favorites
      description: Delete geo object from favorites of user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: X-XSRF-TOKEN
        in: header
        description: Access token
        required: true
        type: string
      - name: X-LANG
        in: header
        description: Language for response
        required: false
        type: string
        enum:
        - en
        - de
        - ru
        - fr
        - it
        - es
        - ar
        - jp
        - cn
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/note:
    put:
      tags:
      - Objects
      description: Add note from user on geo object
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/NotePut'
      responses:
        201:
          description: Create successful
        500:
          description: Error of creation
    delete:
      tags:
      - Objects
      description: Delete note from user on geo object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /objects:
    get:
      tags:
      - Objects
      description: Get list of geo objects
      produces:
      - application/json
      parameters:
      - name: parent_id
        in: query
        description: ID of parent object
        required: false
        type: integer
      - name: second_parent_id
        in: query
        description: ID of second parent object
        required: false
        type: integer
      - name: children
        in: query
        description: Show all the children
        required: false
        type: boolean
      - name: match
        in: query
        description: String for search by name
        required: false
        type: string
      - name: favorites
        in: query
        description: Select only favorite
        required: false
        type: boolean
      - name: author_id
        in: query
        description: Author ID
        required: false
        type: integer
      - name: offset
        in: query
        description: Offset of rows
        required: false
        type: integer
      - name: count
        in: query
        description: Count of rows. Default 100
        required: false
        type: integer
      - name: bounds
        in: query
        description: 'Coordinates of area for search in json (as object) with keys:
          w, s, n, e.'
        required: false
        type: string
      - name: types
        in: query
        description: 'Array of types in json (as array). Available values: geo,place,continent,region,country,city'
        required: false
        type: string
      - name: polygon
        in: query
        description: Coordinates of polygon for search in json (as array of arrays)
        required: false
        type: string
      - name: has_places
        in: query
        description: Select objects which has or not child places
        required: false
        type: boolean
      responses:
        200:
          description: List of geo objects
          schema:
            type: array
            items:
              $ref: '#/definitions/GeoObject'
    post:
      tags:
      - Objects
      description: Create a new geo object
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/GeoObjectPost'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/GeoObject'
        500:
          description: Error of creation
  /objects/{id}:
    get:
      tags:
      - Objects
      description: View geo object by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      responses:
        200:
          description: Create successful
          schema:
            $ref: '#/definitions/GeoObject'
        404:
          description: Not found
    put:
      tags:
      - Objects
      description: Update the geo object by ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/GeoObjectPost'
      responses:
        200:
          description: Updated successful
          schema:
            $ref: '#/definitions/GeoObject'
        500:
          description: Error of update
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Objects
      description: Soft delete the geo object by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/tag/{tag_id}:
    put:
      tags:
      - Objects
      description: Add tag to the object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID object
        required: true
        type: integer
      - name: tag_id
        in: path
        description: ID tag
        required: true
        type: integer
      responses:
        201:
          description: Tag was added
        404:
          description: Object not found
    delete:
      tags:
      - Objects
      description: Remove the tag from the object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID object
        required: true
        type: integer
      - name: tag_id
        in: path
        description: ID tag
        required: true
        type: integer
      responses:
        204:
          description: Tag was deleted
        404:
          description: Object not found
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /objects/grid:
    get:
      tags:
      - Objects
      description: Get list of geo objects in bounds
      produces:
      - application/json
      parameters:
      - name: parent_id
        in: query
        description: ID of parent object
        required: false
        type: integer
      - name: depth
        in: query
        description: Show all parents
        required: false
        type: boolean
      - name: match
        in: query
        description: String for search by name
        required: false
        type: string
      - name: favorites
        in: query
        description: Select only favorite
        required: false
        type: boolean
      - name: author_id
        in: query
        description: Author ID
        required: false
        type: integer
      - name: offset
        in: query
        description: Offset of rows
        required: false
        type: integer
      - name: count
        in: query
        description: Count of rows. Default 100
        required: false
        type: integer
      - name: types
        in: query
        description: 'Array of types in json (as array). Available values: geo,place,continent,region,country,city'
        required: false
        type: string
      - name: polygon
        in: query
        description: Coordinates of polygon for search in json (as array of arrays)
        required: false
        type: string
      - name: bounds
        in: query
        description: 'Coordinates of area for search in json (as array of objects)
          with keys: w, s, n, e.'
        required: false
        type: string
      - name: has_places
        in: query
        description: Select objects which has or not child places
        required: false
        type: boolean
      responses:
        200:
          description: List of geo objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Bounds'
  /objects/{id}/{type}:
    post:
      tags:
      - Objects
      description: Add like or dislike to object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: type
        in: path
        description: Like or dislike
        required: true
        type: string
        enum:
        - like
        - dislike
      responses:
        201:
          description: Add successful
          schema:
            $ref: '#/definitions/GeoObjectLikeCreate'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of removing
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Objects
      description: Remove like or dislike from object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: type
        in: path
        description: Like or dislike
        required: true
        type: string
        enum:
        - like
        - dislike
      responses:
        201:
          description: Remove successful
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of removing
          schema:
            $ref: '#/definitions/errorModel'
  /photos:
    get:
      description: Get list by photos from geo-object
      produces:
      - application/json
      parameters:
      - name: geo_object_id
        in: query
        description: Id geo-object
        required: true
        type: integer
      responses:
        200:
          description: List photos
          schema:
            $ref: '#/definitions/Photo'
        404:
          description: Photos or object not found
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/photos:
    post:
      description: Add photo to geo-object
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      - name: title
        in: formData
        required: false
        type: string
      - name: licence_url
        in: formData
        required: false
        type: string
      - name: is_author
        in: formData
        required: false
        type: integer
      - name: is_preview
        in: formData
        required: false
        type: boolean
      - name: photo
        in: formData
        required: false
        type: file
      responses:
        201:
          description: Added photo
          schema:
            $ref: '#/definitions/Photo'
        404:
          description: Photos or object not found
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/photos/{photo_id}:
    put:
      description: Update photo
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: photo_id
        in: path
        description: Photo ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/PhotoPut'
      responses:
        201:
          description: Update successful
        404:
          description: Photo not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: Delete photo from geo-object
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      - name: photo_id
        in: path
        description: Photo ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /posts:
    get:
      tags:
      - Post
      description: Get list of posts
      produces:
      - application/json
      parameters:
      - name: author_id
        in: query
        description: Author ID
        required: false
        type: integer
      - name: lang
        in: query
        description: Posts language code
        required: false
        type: string
      - name: offset
        in: query
        description: Offset of posts
        required: false
        type: integer
      - name: count
        in: query
        description: Count of posts. Default 100
        required: false
        type: integer
      - name: hashtag
        in: query
        description: ""
        required: false
        type: string
      - name: sort_by
        in: query
        description: Sort attribute (rating or created_at)
        required: false
        type: string
      - name: geo_object_ids
        in: query
        description: Array of geo objects IDs
        required: false
        type: string
      - name: draft
        in: query
        description: With draft
        required: false
        type: boolean
      - name: public
        in: query
        description: Public post
        required: false
        type: boolean
      - name: start_date
        in: query
        description: Starting date
        required: false
        type: date
        format: Y-m-d
      - name: finish_date
        in: query
        description: Finish date
        required: false
        type: date
        format: Y-m-d
      responses:
        200:
          description: List of posts
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        400:
          description: Bad request parameters
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - Post
      description: Create a new post
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/PostCreate'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/Post'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error
          schema:
            $ref: '#/definitions/errorModel'
  /posts/{id}:
    get:
      tags:
      - Post
      description: View post by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      responses:
        200:
          description: Post
          schema:
            $ref: '#/definitions/Post'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
      - Post
      description: Update the post by ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/PostCreate'
      responses:
        200:
          description: Updated successful
          schema:
            $ref: '#/definitions/Post'
        500:
          description: Error
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Post
      description: Soft delete the post by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /posts/{id}/public:
    put:
      tags:
      - Post
      description: Publish the post by ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      responses:
        200:
          description: Publish successful
          schema:
            $ref: '#/definitions/Post'
        500:
          description: Error
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /posts/{id}/favorite:
    put:
      tags:
      - Favorites
      description: Add post to favorites of user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      - name: X-XSRF-TOKEN
        in: header
        description: Access token
        required: true
        type: string
      - name: X-LANG
        in: header
        description: Language for response
        required: false
        type: string
        enum:
        - en
        - de
        - ru
        - fr
        - it
        - es
        - ar
        - jp
        - cn
      responses:
        201:
          description: Create successful
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of creation
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Favorites
      description: Delete post from favorites of user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Post ID
        required: true
        type: integer
      - name: X-XSRF-TOKEN
        in: header
        description: Access token
        required: true
        type: string
      - name: X-LANG
        in: header
        description: Language for response
        required: false
        type: string
        enum:
        - en
        - de
        - ru
        - fr
        - it
        - es
        - ar
        - jp
        - cn
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /routes:
    get:
      tags:
      - Routes
      description: Get list of routes
      produces:
      - application/json
      parameters:
      - name: tags
        in: query
        description: Array of tags ID in json (as array)
        required: false
        type: string
      - name: match
        in: query
        description: String for search by name
        required: false
        type: string
      - name: favorites
        in: query
        description: Select only favorite
        required: false
        type: boolean
      - name: author_id
        in: query
        description: Author ID
        required: false
        type: integer
      - name: offset
        in: query
        description: Offset of rows
        required: false
        type: integer
      - name: count
        in: query
        description: Count of rows. Default 100
        required: false
        type: integer
      - name: bounds
        in: query
        description: 'Coordinates of area for search in json (as object) with keys:
          w, s, n, e.'
        required: false
        type: string
      - name: polygon
        in: query
        description: Coordinates of polygon for search in json (as array of arrays)
        required: false
        type: string
      - name: parent_id
        in: query
        description: Parent geo object ID
        required: false
        type: integer
      - name: geo_object_id
        in: query
        description: Geo object ID of point
        required: false
        type: integer
      responses:
        200:
          description: List of routes
          schema:
            type: array
            items:
              $ref: '#/definitions/Route'
    post:
      tags:
      - Routes
      description: Create a new route
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/RoutePost'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/Route'
        500:
          description: Error of creation
  /routes/{id}:
    get:
      tags:
      - Routes
      description: View route by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      responses:
        200:
          description: Create successful
          schema:
            $ref: '#/definitions/Route'
        404:
          description: Not found
    put:
      tags:
      - Routes
      description: Update the route by ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/RoutePost'
      responses:
        200:
          description: Updated successful
          schema:
            $ref: '#/definitions/Route'
        500:
          description: Error of update
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Routes
      description: Soft delete the route by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /routes/{id}/days:
    post:
      tags:
      - Routes
      description: Create a new day in route
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/RouteDayPost'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/RouteDay'
        404:
          description: Route not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of creation
          schema:
            $ref: '#/definitions/errorModel'
  /routes/{id}/days/{day_id}:
    put:
      tags:
      - Routes
      description: Edit day in the route
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      - name: day_id
        in: path
        description: Route day ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        $ref: '#/definitions/RouteDayPost'
      responses:
        200:
          description: Day was updated
          schema:
            $ref: '#/definitions/RouteDay'
        404:
          description: Route not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Update error
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Routes
      description: Delete day of the route
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      - name: day_id
        in: path
        description: Route day ID
        required: true
        type: integer
      responses:
        204:
          description: Day was deleted
        404:
          description: Route not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of deletion
          schema:
            $ref: '#/definitions/errorModel'
  /routes/{id}/days/{number}:
    post:
      tags:
      - Routes
      description: Create a new point in day of route
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      - name: number
        in: path
        description: Position number of day
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/RouteObjectPost'
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/RouteGeoObject'
        404:
          description: Route not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of creation
          schema:
            $ref: '#/definitions/errorModel'
  /routes/{id}/days/{number}/object/{relation_id}:
    delete:
      tags:
      - Routes
      description: Delete points from day
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Route ID
        required: true
        type: integer
      - name: number
        in: path
        description: Position number of day
        required: true
        type: integer
      - name: relation_id
        in: path
        description: Relation ID of point and day
        required: true
        type: integer
      responses:
        204:
          description: Point was deleted
        404:
          description: Route not found
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of delete
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/similar:
    put:
      tags:
      - Objects
      description: Add place to the similar places by ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Place ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/PlacesSimilarCreate'
      responses:
        201:
          description: Create successful
        500:
          description: Error of update
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/similar/{places_id}:
    delete:
      tags:
      - Objects
      description: Delete the place from similar places
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Place ID
        required: true
        type: integer
      - name: places_id
        in: path
        description: Similar place ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /tag:
    get:
      tags:
      - Tags
      description: Get list of tags
      produces:
      - application/json
      parameters:
      - name: parent_id
        in: query
        description: ID of parent object
        required: false
        type: integer
      - name: depth
        in: query
        description: Show all parents
        required: false
        type: boolean
      - name: match
        in: query
        description: String for search by name
        required: false
        type: string
      - name: favorites
        in: query
        description: Select only favorite
        required: false
        type: boolean
      - name: author_id
        in: query
        description: Author ID
        required: false
        type: integer
      - name: offset
        in: query
        description: Offset of rows
        required: true
        type: integer
      - name: count
        in: query
        description: Count of rows
        required: true
        type: integer
      - name: bounds
        in: query
        description: 'Coordinates of area for search in json (as object) with keys:
          w, s, n, e.'
        required: false
        type: string
      - name: types
        in: query
        description: 'Array of types in json (as array). Available values: geo,place,continent,region,country,city'
        required: false
        type: string
      - name: has_places
        in: query
        description: Select objects which has or not child places
        required: false
        type: boolean
      responses:
        200:
          description: List of tags
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        404:
          description: Empty required query parameters
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - Tags
      description: Create a new tag
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: label_en
        in: formData
        description: Tag label - en
        required: false
        type: string
      - name: label_de
        in: formData
        description: Tag label - de
        required: false
        type: string
      - name: label_ru
        in: formData
        description: Tag label - ru
        required: false
        type: string
      - name: label_fr
        in: formData
        description: Tag label - fr
        required: false
        type: string
      - name: label_it
        in: formData
        description: Tag label - it
        required: false
        type: string
      - name: label_es
        in: formData
        description: Tag label - es
        required: false
        type: string
      - name: label_ar
        in: formData
        description: Tag label - ar
        required: false
        type: string
      - name: label_jp
        in: formData
        description: Tag label - jp
        required: false
        type: string
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/Tag'
        500:
          description: Error of creation
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /tag/{id}:
    put:
      tags:
      - Tags
      description: Update tag
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID label
        required: true
        type: integer
      - name: label_en
        in: formData
        description: Tag label - en
        required: false
        type: string
      - name: label_de
        in: formData
        description: Tag label - de
        required: false
        type: string
      - name: label_ru
        in: formData
        description: Tag label - ru
        required: false
        type: string
      - name: label_fr
        in: formData
        description: Tag label - fr
        required: false
        type: string
      - name: label_it
        in: formData
        description: Tag label - it
        required: false
        type: string
      - name: label_es
        in: formData
        description: Tag label - es
        required: false
        type: string
      - name: label_ar
        in: formData
        description: Tag label - ar
        required: false
        type: string
      - name: label_jp
        in: formData
        description: Tag label - jp
        required: false
        type: string
      responses:
        201:
          description: Create successful
          schema:
            $ref: '#/definitions/Tag'
        500:
          description: Error of creation
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - Tags
      description: Delete tag by ID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Tag ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /user/register:
    post:
      tags:
      - User
      description: Register a new user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserRegisterPost'
      responses:
        200:
          description: User ID and access token
          schema:
            $ref: '#/definitions/UserLogin'
        404:
          description: Error in parameters
          schema:
            $ref: '#/definitions/errorModel'
  /user/auth:
    get:
      tags:
      - User
      description: Minimal user information
      produces:
      - application/json
      responses:
        200:
          description: Minimal user information
          schema:
            $ref: '#/definitions/UserMinimal'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - User
      description: Login user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserLoginPost'
      responses:
        200:
          description: User ID and access token
          schema:
            $ref: '#/definitions/UserLogin'
        404:
          description: Error in parameters or not found user
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - User
      description: Logout user
      produces:
      - application/json
      responses:
        200:
          description: ""
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
  /user/{id}:
    get:
      tags:
      - User
      description: Get info by user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
        type: integer
      responses:
        200:
          description: User info parameters
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
    put:
      tags:
      - User
      description: Update info by user
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user ID
        required: true
        type: integer
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserPut'
      responses:
        200:
          description: User info parameters
          schema:
            $ref: '#/definitions/UserPut'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Failed to save user
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
  /user/{id}/admin:
    put:
      tags:
      - User
      description: Add admin permissions to user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        201:
          description: Permissions added
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of add permissions
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - User
      description: Revoke admin permissions from user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        type: integer
      responses:
        204:
          description: Revoke successful
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of revoke permissions
          schema:
            $ref: '#/definitions/errorModel'
  /user/login/social/{key}:
    get:
      tags:
      - User
      description: Get info by user
      produces:
      - application/json
      parameters:
      - name: key
        in: path
        description: Short name of social network to use
        required: true
        type: string
        enum:
        - vk
        - fb
      - name: redirect_url
        in: query
        required: true
        type: string
      responses:
        200:
          description: Link generated
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - User
      description: Login user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: key
        in: path
        description: 'Short name of social network to use. Example: vk'
        required: true
        type: string
        enum:
        - vk
        - fb
      - name: code
        in: query
        description: Response code from social network
        required: true
        type: string
      - name: redirect_url
        in: query
        required: true
        type: string
      responses:
        200:
          description: Login success
          schema:
            $ref: '#/definitions/UserLogin'
        201:
          description: Register success
          schema:
            $ref: '#/definitions/UserLogin'
  /user/{id}/avatar:
    post:
      tags:
      - User
      description: Upload avatar for user
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: string
      - name: src
        in: formData
        description: Image file
        required: true
        type: file
      responses:
        201:
          description: Avatar uploaded and updated
          schema:
            $ref: '#/definitions/User'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      tags:
      - User
      description: Remove avatar from user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        type: integer
      responses:
        204:
          description: Remove successful
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/errorModel'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/errorModel'
        500:
          description: Error of deletion of avatar
          schema:
            $ref: '#/definitions/errorModel'
  /objects/{id}/washere:
    put:
      tags:
      - Was here
      description: Add geo object to 'washere' of user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      responses:
        201:
          description: Create successful
        500:
          description: Error of creation
    delete:
      tags:
      - Was here
      description: Delete geo object from 'washere' of user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Geo object ID
        required: true
        type: integer
      responses:
        204:
          description: Delete successful
        500:
          description: Error of delete
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/errorModel'
produces:
- application/json
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":40:{s:6:\"Advice\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:13:\"geo_object_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"votes\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:9:\"is_delete\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:7:\"Comment\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"author\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/UserMinimal\";}}s:4:\"type\";s:6:\"object\";}s:11:\"CommentPost\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"text\";O:8:\"stdClass\":2:{s:11:\"description\";s:12:\"Comment
  text\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:11:\"PlaceCauses\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:9:\"PlaceLink\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:3:\"Geo\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":24:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:9:\"parent_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"parents\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:11:\"rating_auto\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_en\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_de\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_ru\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_fr\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_it\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_es\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_ar\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_jp\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_cn\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"parent_ids\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"preview\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"thumbnail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"photo\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"geo_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"nameSablon\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:9:\"GeoObject\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":35:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"name_eng\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"name_origin\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"name_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"desc_preview\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"desc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"base_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"washere\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"parent_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"parents\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/GeoObject\";}}s:6:\"causes\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/PlaceCauses\";}}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"link\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/PlaceLink\";}}s:9:\"work_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"visit_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"price\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"price_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:15:\"additional_info\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"author_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"photos\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Photo\";}}s:9:\"thumbnail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"tags\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/GeoObjectTag\";}}s:13:\"say_to_gallop\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"like\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"dislike\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"is_like\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"is_dislike\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:12:\"GeoObjectTag\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:7:\"NotePut\";O:8:\"stdClass\":3:{s:8:\"required\";a:2:{i:0;s:10:\"visit_time\";i:1;s:4:\"text\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:5:\"price\";O:8:\"stdClass\":2:{s:11:\"description\";s:27:\"Price
  according to the user\";s:4:\"type\";s:6:\"number\";}s:8:\"currency\";O:8:\"stdClass\":2:{s:11:\"description\";s:8:\"Currency\";s:4:\"type\";s:6:\"string\";}s:10:\"visit_time\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"Time
  to visit in seconds\";s:4:\"type\";s:7:\"integer\";}s:10:\"time_start\";O:8:\"stdClass\":2:{s:11:\"description\";s:26:\"Start
  of visits in seconds\";s:4:\"type\";s:7:\"integer\";}s:8:\"time_end\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"End
  of visit in seconds.\";s:4:\"type\";s:7:\"integer\";}s:4:\"text\";O:8:\"stdClass\":2:{s:11:\"description\";s:20:\"A
  note on the object\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Note\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":9:{s:2:\"id\";O:8:\"stdClass\":2:{s:11:\"description\";s:2:\"ID\";s:4:\"type\";s:7:\"integer\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:7:\"User
  ID\";s:4:\"type\";s:7:\"integer\";}s:13:\"geo_object_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:13:\"Geo
  object ID\";s:4:\"type\";s:7:\"integer\";}s:5:\"price\";O:8:\"stdClass\":2:{s:11:\"description\";s:27:\"Price
  according to the user\";s:4:\"type\";s:6:\"number\";}s:8:\"currency\";O:8:\"stdClass\":2:{s:11:\"description\";s:8:\"Currency\";s:4:\"type\";s:6:\"string\";}s:10:\"visit_time\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"Time
  to visit in seconds\";s:4:\"type\";s:7:\"integer\";}s:10:\"time_start\";O:8:\"stdClass\":2:{s:11:\"description\";s:26:\"Start
  of visits in seconds\";s:4:\"type\";s:7:\"integer\";}s:8:\"time_end\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"End
  of visit in seconds.\";s:4:\"type\";s:7:\"integer\";}s:4:\"text\";O:8:\"stdClass\":2:{s:11:\"description\";s:20:\"A
  note on the object\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Photo\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:3:\"src\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"license\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"author\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Post\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:5:\"title\";i:1;s:4:\"lang\";}s:10:\"properties\";O:8:\"stdClass\":18:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"lang\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:9:{i:0;s:2:\"en\";i:1;s:2:\"ru\";i:2;s:2:\"de\";i:3;s:2:\"fr\";i:4;s:2:\"es\";i:5;s:2:\"it\";i:6;s:2:\"ar\";i:7;s:2:\"jp\";i:8;s:2:\"cn\";}}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"desc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"photo\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"geo_object_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"geo_object\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/GeoObject\";}s:8:\"hashtags\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:15:\"enable_comments\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:5:\"draft\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"best_choice\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"best_deal\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"offer_gallop\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:6:\"author\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/UserMinimal\";}}}s:5:\"Route\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":22:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"name_eng\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"name_origin\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"desc_preview\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"desc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"base_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"washere\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"parent_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:9:\"author_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:5:\"price\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"price_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"thumbnail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"additional_info\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"parents\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:4:\"days\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/RouteDay\";}}s:6:\"photos\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Photo\";}}s:4:\"tags\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/GeoObjectTag\";}}s:4:\"note\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Note\";}}}s:4:\"type\";s:6:\"object\";}s:8:\"RouteDay\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"route_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"distance\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"cost\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"visit_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"number\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"points\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/RouteGeoObject\";}}}s:4:\"type\";s:6:\"object\";}s:14:\"RouteGeoObject\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":2:{s:11:\"description\";s:13:\"Geo
  object ID\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:19:\"GeoObjectLikeCreate\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"like\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:13:\"GeoObjectPost\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"For
  create or update geo object\";s:10:\"properties\";O:8:\"stdClass\":27:{s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"latitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"name_lang\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"name_en\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"name_origin\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"name_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"desc_preview\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"desc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"base_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"parent_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"link\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"work_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"visit_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"price\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"price_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"currency\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"additional_info\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"author_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"tags\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Tag\";}}s:3:\"seo\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:17:\"#/definitions/Seo\";}s:6:\"causes\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/PlacesCauses\";}}s:13:\"say_to_gallop\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:3:\"Seo\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"keywords\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"PlacesCauses\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:3:\"Tag\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:19:\"PlacesSimilarCreate\";O:8:\"stdClass\":2:{s:8:\"required\";a:1:{i:0;s:2:\"id\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:9:\"RoutePost\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:11:\"name_origin\";i:1;s:8:\"name_eng\";}s:10:\"properties\";O:8:\"stdClass\":11:{s:11:\"name_origin\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"name_eng\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"desc_preview\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"price\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"desc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:12:\"mark_edition\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"rars_rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"visit_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"distance\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"days\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/RouteDayPost\";}}}}s:12:\"RouteDayPost\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"distance\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"visit_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"cost\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:6:\"points\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/RoutePointPost\";}}}}s:14:\"RoutePointPost\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}s:15:\"RouteObjectPost\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:2:\"id\";i:1;s:8:\"distance\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"distance\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"cost\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"visit_time\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:14:\"type_transport\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:13:\"UserLoginPost\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"rememberMe\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:10:\"errorModel\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"errors\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":0:{}}}}s:10:\"AdvicePost\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"object_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:4:\"text\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Bounds\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"bounds\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":0:{}}}}s:8:\"PhotoPut\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"title\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"Title
  by photo\";s:4:\"type\";s:6:\"string\";}s:9:\"is_author\";O:8:\"stdClass\":2:{s:11:\"description\";s:36:\"Is
  the user the author of the photo?\";s:4:\"type\";s:7:\"integer\";}s:11:\"license_url\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"Url
  to license\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:12:\"UserRegister\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"result\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}}}}s:9:\"UserLogin\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:12:\"access_token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"PhotoPost\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"title\";O:8:\"stdClass\":2:{s:11:\"description\";s:14:\"Title
  by photo\";s:4:\"type\";s:6:\"string\";}s:9:\"is_author\";O:8:\"stdClass\":2:{s:11:\"description\";s:36:\"Is
  the user the author of the photo?\";s:4:\"type\";s:7:\"integer\";}s:5:\"photo\";O:8:\"stdClass\":2:{s:11:\"description\";s:10:\"Image
  file\";s:4:\"type\";s:4:\"file\";}s:11:\"license_url\";O:8:\"stdClass\":2:{s:11:\"description\";s:11:\"Url
  license\";s:4:\"type\";s:6:\"string\";}s:10:\"is_preview\";O:8:\"stdClass\":2:{s:11:\"description\";s:12:\"Preview
  flag\";s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:10:\"PostCreate\";O:8:\"stdClass\":2:{s:8:\"required\";a:1:{i:0;s:5:\"title\";}s:10:\"properties\";O:8:\"stdClass\":12:{s:4:\"lang\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:9:{i:0;s:2:\"en\";i:1;s:2:\"ru\";i:2;s:2:\"de\";i:3;s:2:\"fr\";i:4;s:2:\"es\";i:5;s:2:\"it\";i:6;s:2:\"ar\";i:7;s:2:\"jp\";i:8;s:2:\"cn\";}}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"desc\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"photo\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"geo_object_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"hashtags\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"enable_comments\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:5:\"draft\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"best_choice\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"best_deal\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:12:\"offer_gallop\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:10:\"PostFilter\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":11:{s:9:\"author_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:9:\"Author
  ID\";s:4:\"type\";s:7:\"integer\";}s:4:\"lang\";O:8:\"stdClass\":3:{s:11:\"description\";s:17:\"Language
  of posts\";s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:9:{i:0;s:2:\"en\";i:1;s:2:\"ru\";i:2;s:2:\"de\";i:3;s:2:\"fr\";i:4;s:2:\"es\";i:5;s:2:\"it\";i:6;s:2:\"ar\";i:7;s:2:\"jp\";i:8;s:2:\"cn\";}}s:6:\"offset\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"count\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"hashtag\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"sort_by\";O:8:\"stdClass\":2:{s:11:\"description\";s:17:\"Sorting
  attribute\";s:4:\"type\";s:6:\"string\";}s:14:\"geo_object_ids\";O:8:\"stdClass\":3:{s:11:\"description\";s:22:\"List
  of geo object IDs\";s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:5:\"draft\";O:8:\"stdClass\":2:{s:11:\"description\";s:21:\"To
  select only drafts\";s:4:\"type\";s:7:\"boolean\";}s:6:\"public\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"To
  select only published\";s:4:\"type\";s:7:\"boolean\";}s:10:\"start_date\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Date
  for select by creation time\";s:4:\"type\";s:4:\"date\";s:6:\"format\";s:5:\"Y-m-d\";}s:11:\"finish_date\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Date
  for select by creation time\";s:4:\"type\";s:4:\"date\";s:6:\"format\";s:5:\"Y-m-d\";}}}s:4:\"User\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":16:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"role_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"auth_key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"access_token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"logged_in_ip\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"logged_in_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"created_ip\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"updated_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"banned_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"banned_reason\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:11:\"UserMinimal\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"avatar\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"fullName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"userRule\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:7:\"UserPut\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":10:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"avatar\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"fullName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"skype\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"about_me\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"background\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"settings\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/userRule\";}}s:4:\"type\";s:6:\"object\";}s:8:\"userRule\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"showEmail\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"showSkype\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"showPosts\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"showPhone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:16:\"UserRegisterPost\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"newPassword\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}}"
...
