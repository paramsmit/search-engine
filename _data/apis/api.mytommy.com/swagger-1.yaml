---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:5:\"Tommy\";s:11:\"description\";s:313:\"The
  Tommy API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer)
  methodology, and it uses resource-oriented URLs, and common HTTP response codes
  to indicate API errors. All requests are authenticated using an `api-key` which
  can be obtained from your developer dashboard.\";}"
host: api.mytommy.com
basePath: /v1
paths:
  /accounts/search/{term}:
    get:
      summary: Search users
      description: Get all users and teams who's mobile or username match the given
        search term.
      operationId: searchAccounts
      tags:
      - Account
      parameters:
      - name: term
        in: path
        description: Account term
        required: true
        type: string
      responses:
        200:
          description: Account response
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me:
    get:
      description: Get the current user object.
      operationId: getCurrentUser
      tags:
      - User
      responses:
        200:
          description: User response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update the current user object.
      operationId: updateCurrentUser
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: UserInput request
        required: true
        schema:
          $ref: '#/definitions/UserInput'
      responses:
        200:
          description: User response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/accounts:
    get:
      description: Get all accounts belonging to the current user.
      operationId: getCurrentUserAccounts
      tags:
      - User
      responses:
        200:
          description: Account response
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/qr.png:
    get:
      description: Get the current account QR code image.
      operationId: getCurrentAccountQR
      produces:
      - image/png
      tags:
      - User
      responses:
        200:
          description: Image response
  /me/associates:
    get:
      summary: Get associated accounts
      description: Get accounts related to the current user via associated team members.
      operationId: getAssociates
      tags:
      - Contact
      responses:
        200:
          description: Account response
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/current_account:
    get:
      summary: Get the current account
      description: Get the current user account.
      operationId: getCurrentUserAccount
      tags:
      - User
      - Account
      responses:
        200:
          description: Account response
          schema:
            $ref: '#/definitions/Account'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update the current account
      description: "Update the current user account. \n              The current account
        may be a `User`, `Team`, or `TeamMember` type."
      operationId: updateCurrentUserAccount
      tags:
      - User
      - Account
      parameters:
      - name: current_account_id
        in: query
        description: The polymorphic Account ID
        required: true
        type: integer
        format: int64
      - name: current_account_type
        in: query
        description: The polymorphic Account Type (`User`, `Team`, `TeamMember`)
        required: true
        type: string
      responses:
        200:
          description: Account response
          schema:
            $ref: '#/definitions/Account'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/settings:
    get:
      summary: Get user settings
      description: Get user settings object.
      operationId: getUserSettings
      tags:
      - User
      responses:
        200:
          description: Setting response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update user settings
      description: Update user settings object.
      operationId: updateUserSettings
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: SettingData request
        required: true
        schema:
          $ref: '#/definitions/SettingData'
      responses:
        204:
          description: No content
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/settings/{key}:
    get:
      summary: Get user setting value
      description: Get a user setting value.
      operationId: getUserSettingValue
      tags:
      - User
      parameters:
      - name: key
        in: path
        description: SettingData key
        required: true
        type: string
      responses:
        200:
          description: SettingData response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update user setting value
      description: Update a user setting value.
      operationId: updateUserSettingValue
      tags:
      - User
      parameters:
      - name: key
        in: path
        description: Setting key
        required: true
        type: string
      - name: body
        in: body
        description: SettingData request
        required: true
        schema:
          $ref: '#/definitions/SettingData'
      responses:
        204:
          description: No content
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete user setting value
      description: Delete a user setting value.
      operationId: deleteUserSettingValue
      tags:
      - User
      parameters:
      - name: key
        in: path
        description: Setting key
        required: true
        type: string
      responses:
        204:
          description: No content
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    post:
      description: Create a User on the system.
      operationId: User
      tags:
      - User
      parameters:
      - name: body
        in: body
        description: UserInput request
        required: true
        schema:
          $ref: '#/definitions/UserInput'
      responses:
        201:
          description: User response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: Get all Users the authenticated User has access to.
      operationId: getUsers
      tags:
      - User
      responses:
        200:
          description: User response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/search/{term}:
    get:
      summary: Search users
      description: Get all users who's mobile number matches the given search term.
      operationId: searchUsers
      tags:
      - User
      parameters:
      - name: term
        in: path
        description: User term
        required: true
        type: string
      responses:
        200:
          description: User response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{slug}:
    get:
      summary: Get a user
      description: Get a user object by slug.
      operationId: getUser
      tags:
      - User
      parameters:
      - name: slug
        in: path
        description: User slug
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: User response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/send_verification_sms:
    post:
      summary: Send a verification SMS
      description: Send an account verification SMS to the user's mobile number.
      operationId: send_verification_sms
      tags:
      - User
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/send_verification_email:
    post:
      summary: Send a verification email
      description: Send an account verification email to the user's email address.
      operationId: send_verification_email
      tags:
      - User
      parameters:
      - name: id
        in: path
        description: User id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/verify/{pin}:
    get:
      summary: Verify a user account
      description: Verify a user account using the given pin code.
      operationId: verifyUser
      tags:
      - User
      parameters:
      - name: pin
        in: path
        description: The user pin code
        required: true
        type: string
      responses:
        200:
          description: User response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/reset_password:
    post:
      summary: Reset a user password
      description: Reset a user password for the account associated with the provided
        email address or mobile number.
      operationId: ressetUserPassword
      tags:
      - User
      parameters:
      - name: login
        in: query
        description: The user email address or mobile number
        required: true
        type: string
      responses:
        200:
          description: Success response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teams/tags:
    get:
      summary: Get team tags
      description: Get tags related to the current team.
      operationId: getTeamTags
      tags:
      - Team
      responses:
        200:
          description: Tag response
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teams:
    post:
      description: Create a team.
      operationId: createTeam
      tags:
      - Team
      responses:
        201:
          description: Team response
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teams/{slug}:
    get:
      summary: Get a teams
      description: Get a teams object by slug.
      operationId: getTeam
      tags:
      - Team
      parameters:
      - name: slug
        in: path
        description: Team slug
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Team response
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team:
    get:
      description: Get the current team object.
      operationId: getCurrentTeam
      tags:
      - Team
      responses:
        200:
          description: Team response
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update the current team object.
      operationId: updateCurrentTeam
      tags:
      - Team
      parameters:
      - name: body
        in: body
        description: TeamInput request
        required: true
        schema:
          $ref: '#/definitions/TeamInput'
      responses:
        200:
          description: Team response
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/members:
    get:
      description: Get all members belonging to the current team.
      operationId: getCurrentTeamMembers
      tags:
      - Team
      responses:
        200:
          description: TeamMember response
          schema:
            type: array
            items:
              $ref: '#/definitions/TeamMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/members/{user_id}:
    get:
      summary: Get a team member
      description: Get a single team member object by it's corresponding user ID.
      operationId: getCurrentTeamMember
      tags:
      - Team
      parameters:
      - name: user_id
        in: path
        description: User user_id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: TeamMember response
          schema:
            $ref: '#/definitions/TeamMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a team member
      description: Update a single team member object.
      operationId: updateCurrentTeamMember
      tags:
      - Team
      parameters:
      - name: user_id
        in: path
        description: User user_id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: TeamMember request
        required: true
        schema:
          $ref: '#/definitions/TeamMember'
      responses:
        200:
          description: TeamMember response
          schema:
            $ref: '#/definitions/TeamMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/members/invite:
    post:
      summary: Invite team member
      description: Invite a member to the current team.
      operationId: inviteCurrentTeamMember
      tags:
      - Team
      parameters:
      - name: body
        in: body
        description: TeamMember request
        required: true
        schema:
          $ref: '#/definitions/TeamMember'
      responses:
        200:
          description: TeamMember response
          schema:
            $ref: '#/definitions/TeamMember'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /developers:
    get:
      description: Get all developers on the system.
      operationId: getDevelopers
      tags:
      - Developer
      responses:
        200:
          description: Developer response
          schema:
            type: array
            items:
              $ref: '#/definitions/Developer'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /developers/{id}:
    get:
      summary: Get a developer
      description: Get a developer object by user ID.
      operationId: getDeveloper
      tags:
      - Developer
      parameters:
      - name: id
        in: path
        description: Developer id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Developer response
          schema:
            $ref: '#/definitions/Developer'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /developers/{id}/addons:
    get:
      summary: Get developer addons
      description: Get all addons for a specific developer.
      operationId: getDeveloperAddons
      tags:
      - Developer
      - Addon
      parameters:
      - name: id
        in: path
        description: Developer id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Addon response
          schema:
            type: array
            items:
              $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /developers/{id}/actions:
    get:
      summary: Get developer actions
      description: Get all actions for a specific developer.
      operationId: getDeveloperActions
      tags:
      - Developer
      - Action
      parameters:
      - name: id
        in: path
        description: Developer id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Action response
          schema:
            type: array
            items:
              $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats:
    post:
      summary: Create chat room
      description: Create a chat room with multiple users.
      operationId: createChat
      tags:
      - Chat
      parameters:
      - name: body
        in: body
        description: ChatInput request
        required: true
        schema:
          $ref: '#/definitions/ChatInput'
      responses:
        201:
          description: Chat response
          schema:
            $ref: '#/definitions/Chat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get chat rooms
      description: Get all chat rooms.
      operationId: getChats
      tags:
      - Chat
      responses:
        200:
          description: Chat response
          schema:
            type: array
            items:
              $ref: '#/definitions/Chat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats/initiate:
    post:
      summary: Get or create chat room
      description: Get or create a chat room with multiple given users.
      operationId: initiateChat
      tags:
      - Chat
      parameters:
      - name: body
        in: body
        description: ChatInitiateInput request
        required: true
        schema:
          $ref: '#/definitions/ChatInitiateInput'
      responses:
        200:
          description: Chat response
          schema:
            $ref: '#/definitions/Chat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats/{id}:
    get:
      summary: Get chat
      description: Get a single chat object by it's ID.
      operationId: getChat
      tags:
      - Chat
      parameters:
      - name: id
        in: path
        description: Chat id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Chat response
          schema:
            $ref: '#/definitions/Chat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update chat
      description: Update a chat object.
      operationId: updateChat
      tags:
      - Chat
      parameters:
      - name: id
        in: path
        description: Chat id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: ChatInput request
        required: true
        schema:
          $ref: '#/definitions/ChatInput'
      responses:
        200:
          description: Chat response
          schema:
            $ref: '#/definitions/Chat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete chat
      description: Delete a chat object.
      operationId: deleteChat
      tags:
      - Chat
      parameters:
      - name: id
        in: path
        description: Chat id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: Chat request
        required: true
        schema:
          $ref: '#/definitions/Chat'
      responses:
        200:
          description: Chat response
          schema:
            $ref: '#/definitions/Chat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats/{chat_id}/messages:
    get:
      summary: Get chat messages
      description: Get all messages belonging to the given chat.
      operationId: getChatMessages
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Message response
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create create message
      description: Create a chat and send it to the chat participants.
      operationId: createChatMessage
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: MessageInput request
        required: true
        schema:
          $ref: '#/definitions/MessageInput'
      responses:
        201:
          description: Message response
          schema:
            $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats/{chat_id}/messages/{id}:
    get:
      summary: Get chat message
      description: Get a chat message belonging to the given chat.
      operationId: getChatMessage
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      - name: id
        in: path
        description: Message id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Message response
          schema:
            $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete chat message
      description: Delete a chat message belonging to the given chat.
      operationId: deleteChatMessage
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      - name: id
        in: path
        description: Message id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Message response
          schema:
            $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats/{chat_id}/users:
    get:
      summary: Get chat users
      description: Get all users participating in the given chat.
      operationId: getChatUsers
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: ChatUser response
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatUser'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create chat user
      description: Create and add a user to the chat.
      operationId: createChatUser
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: UserID request
        required: true
        schema:
          $ref: '#/definitions/UserID'
      responses:
        201:
          description: ChatUser response
          schema:
            $ref: '#/definitions/ChatUser'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chats/{chat_id}/users/{user_id}:
    delete:
      summary: Delete chat user
      description: Delete a chat user.
      operationId: deleteChatUser
      tags:
      - Chat
      parameters:
      - name: chat_id
        in: path
        description: Chat chat_id
        required: true
        type: integer
        format: int64
      - name: user_id
        in: path
        description: User user_id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: ChatUser response
          schema:
            $ref: '#/definitions/ChatUser'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /messages:
    post:
      description: Create and send a chat message to the receiver.
      operationId: createMessage
      tags:
      - Chat
      parameters:
      - name: body
        in: body
        description: MessageInput request
        required: true
        schema:
          $ref: '#/definitions/MessageInput'
      responses:
        201:
          description: Message response
          schema:
            $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /messages/{id}:
    delete:
      summary: Delete message
      description: Delete a message object.
      operationId: deleteMessage
      tags:
      - Message
      parameters:
      - name: id
        in: path
        description: Message id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: Message request
        required: true
        schema:
          $ref: '#/definitions/Message'
      responses:
        200:
          description: Message response
          schema:
            $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /messages/recent:
    get:
      summary: Get recent chat messages
      description: Get recent chat messages for the current account scope.
      operationId: getRecentMessages
      tags:
      - Chat
      responses:
        200:
          description: Message response
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons:
    get:
      summary: Get all addons
      description: Get all addons available for install by the current team or user.
      operationId: getAddons
      tags:
      - Addon
      responses:
        200:
          description: Addon response
          schema:
            type: array
            items:
              $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/recommended:
    get:
      summary: Get recommended addons
      description: Get all recommended addons available for install by the current
        team or user.
      operationId: getRecommendedAddons
      tags:
      - Addon
      responses:
        200:
          description: Addon response
          schema:
            type: array
            items:
              $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/popular:
    get:
      summary: Get popular addons
      description: Get all addons in order of popularity.
      operationId: getPopularAddons
      tags:
      - Addon
      responses:
        200:
          description: Addon response
          schema:
            type: array
            items:
              $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/search/{term}:
    get:
      summary: Search addons
      description: Get all addons matching the given search term.
      operationId: searchAddons
      tags:
      - Addon
      parameters:
      - name: term
        in: path
        description: Addon term
        required: true
        type: string
      responses:
        200:
          description: Addon response
          schema:
            type: array
            items:
              $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/installed:
    get:
      summary: Get installed addons
      description: Get all addons installed for the current team or user.
      operationId: getAddonInstalls
      tags:
      - Addon
      responses:
        200:
          description: Addon response
          schema:
            type: array
            items:
              $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}:
    get:
      summary: Get an addon
      description: Get an addon by it's package name.
      operationId: getAddon
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Addon response
          schema:
            $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/addons:
    get:
      summary: Get addon actions
      description: Get all actions for an addon.
      operationId: getAddonActions
      tags:
      - Addon
      - Action
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Action response
          schema:
            type: array
            items:
              $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/report:
    post:
      summary: Report addon as inappropriate
      description: Report addon as inappropriate.
      operationId: reportAddon
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Success response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/install:
    post:
      summary: Install addon
      description: Install an addon.
      operationId: installAddon
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      - name: body
        in: body
        description: Addon request
        required: true
        schema:
          $ref: '#/definitions/Addon'
      responses:
        201:
          description: Addon response
          schema:
            $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update installed addon
      description: Update an installed addon.
      operationId: updateAddonInstall
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Addon response
          schema:
            $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get installed addon
      description: Get an installed addon.
      operationId: getAddonInstall
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Addon response
          schema:
            $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete installed addon
      description: Delete an installed addon.
      operationId: deleteAddonInstall
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Addon response
          schema:
            $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/install/settings:
    get:
      summary: Get all addon settings
      description: Get all addon settings objects.
      operationId: getAddonSettings
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Setting response
          schema:
            $ref: '#/definitions/Setting'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/install/settings/{name}:
    post:
      summary: Update addon settings
      description: Update an addon settings object.
      operationId: updateAddonSetting
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      - name: name
        in: path
        description: Setting name
        required: true
        type: string
      - name: body
        in: body
        description: Setting request
        required: true
        schema:
          $ref: '#/definitions/Setting'
      responses:
        201:
          description: Addon response
          schema:
            $ref: '#/definitions/Addon'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete addon settings
      description: Delete an addon settings object.
      operationId: deleteAddonSetting
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      - name: name
        in: path
        description: Setting name
        required: true
        type: string
      responses:
        200:
          description: Setting response
          schema:
            $ref: '#/definitions/Setting'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get addon settings
      description: Get an addon settings object.
      operationId: getAddonSetting
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      - name: name
        in: path
        description: Setting name
        required: true
        type: string
      responses:
        200:
          description: Setting response
          schema:
            $ref: '#/definitions/Setting'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/install/permissions:
    get:
      summary: Get addon permissions
      description: Get all addon permission objects.
      operationId: getAddonPermissions
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      responses:
        200:
          description: Permission response
          schema:
            $ref: '#/definitions/Permission'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /addons/{package}/install/permissions/{name}:
    put:
      summary: Update addon permission
      description: Update an addon permission object.
      operationId: updateAddonPermission
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      - name: name
        in: path
        description: Permission name
        required: true
        type: string
      - name: body
        in: body
        description: Permission request
        required: true
        schema:
          $ref: '#/definitions/Permission'
      responses:
        200:
          description: Permission response
          schema:
            $ref: '#/definitions/Permission'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get addon permission
      description: Get an addon permission object.
      operationId: getAddonPermission
      tags:
      - Addon
      parameters:
      - name: package
        in: path
        description: Addon package
        required: true
        type: string
      - name: name
        in: path
        description: Permission name
        required: true
        type: string
      responses:
        200:
          description: Permission response
          schema:
            $ref: '#/definitions/Permission'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions:
    get:
      summary: Get all actions
      description: Get all available actions.
      operationId: getActions
      tags:
      - Action
      responses:
        200:
          description: Action response
          schema:
            type: array
            items:
              $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/popular:
    get:
      summary: Get popular actions
      description: Get all actions in order of popularity.
      operationId: getPopularActions
      tags:
      - Action
      responses:
        200:
          description: Action response
          schema:
            type: array
            items:
              $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install:
    post:
      summary: Install action
      description: Install an action for the current current team or user.
      operationId: installAction
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      responses:
        201:
          description: Action response
          schema:
            $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete installed action
      description: Delete an action installed for the current current team or user.
      operationId: deleteAction
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      responses:
        200:
          description: Action response
          schema:
            $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get installed action
      description: Get an action installed for the current current team or user.
      operationId: getActionInstall
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      responses:
        200:
          description: Action response
          schema:
            $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install/run:
    get:
      summary: Run an action
      description: Run an installed action.
      operationId: runActionInstall
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      - name: body
        in: body
        description: TriggerData request
        required: true
        schema:
          $ref: '#/definitions/TriggerData'
      responses:
        200:
          description: Action response
          schema:
            $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install/history:
    get:
      summary: Get action event history
      description: Get history for an installed action.
      operationId: getActionInstallHistory
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      responses:
        200:
          description: AuditLog response
          schema:
            type: array
            items:
              $ref: '#/definitions/AuditLog'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install/settings:
    get:
      summary: Get all action settings
      description: Get all action settings objects.
      operationId: getActionSettings
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      responses:
        200:
          description: Setting response
          schema:
            $ref: '#/definitions/Setting'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install/settings/{name}:
    post:
      summary: Update action settings
      description: Update an action settings object.
      operationId: updateActionSetting
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      - name: name
        in: path
        description: Setting name
        required: true
        type: string
      - name: body
        in: body
        description: Setting request
        required: true
        schema:
          $ref: '#/definitions/Setting'
      responses:
        201:
          description: Action response
          schema:
            $ref: '#/definitions/Action'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete action settings
      description: Delete an action settings object.
      operationId: deleteActionSetting
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      - name: name
        in: path
        description: Setting name
        required: true
        type: string
      responses:
        200:
          description: Setting response
          schema:
            $ref: '#/definitions/Setting'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get action settings
      description: Get an action settings object.
      operationId: getActionSetting
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      - name: name
        in: path
        description: Setting name
        required: true
        type: string
      responses:
        200:
          description: Setting response
          schema:
            $ref: '#/definitions/Setting'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install/permissions:
    get:
      summary: Get action permissions
      description: Get all action permission objects.
      operationId: getActionPermissions
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      responses:
        200:
          description: Permission response
          schema:
            $ref: '#/definitions/Permission'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /actions/{id}/install/permissions/{name}:
    put:
      summary: Update action permission
      description: Update an action permission object.
      operationId: updateActionPermission
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      - name: name
        in: path
        description: Permission name
        required: true
        type: string
      - name: body
        in: body
        description: Permission request
        required: true
        schema:
          $ref: '#/definitions/Permission'
      responses:
        200:
          description: Permission response
          schema:
            $ref: '#/definitions/Permission'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get action permission
      description: Get an action permission object.
      operationId: getActionPermission
      tags:
      - Action
      parameters:
      - name: id
        in: path
        description: Action id
        required: true
        type: string
      - name: name
        in: path
        description: Permission name
        required: true
        type: string
      responses:
        200:
          description: Permission response
          schema:
            $ref: '#/definitions/Permission'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /fragments:
    get:
      summary: Get fragments
      description: Get all fragments.
      operationId: getFragments
      tags:
      - Fragment
      responses:
        200:
          description: Fragment response
          schema:
            type: array
            items:
              $ref: '#/definitions/Fragment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create an fragment
      description: Create an fragment
      operationId: createFragment
      tags:
      - Fragment
      responses:
        201:
          description: Fragment response
          schema:
            $ref: '#/definitions/Fragment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      parameters:
      - name: body
        in: body
        description: FragmentInput request
        required: true
        schema:
          $ref: '#/definitions/FragmentInput'
  /fragments/{id}:
    get:
      summary: Get an fragment
      description: Get an fragment object.
      operationId: getFragment
      tags:
      - Fragment
      parameters:
      - name: id
        in: path
        description: Fragment id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Fragment response
          schema:
            $ref: '#/definitions/Fragment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update an fragment
      description: Update an fragment object.
      operationId: updateFragment
      tags:
      - Fragment
      parameters:
      - name: id
        in: path
        description: Fragment id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: FragmentInput request
        required: true
        schema:
          $ref: '#/definitions/FragmentInput'
      responses:
        200:
          description: Fragment response
          schema:
            $ref: '#/definitions/Fragment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete an fragment
      description: Delete an fragment object.
      operationId: deleteFragment
      tags:
      - Fragment
      parameters:
      - name: id
        in: path
        description: Fragment id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Fragment response
          schema:
            $ref: '#/definitions/Fragment'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts:
    post:
      summary: Create contact
      description: Create a contact for a user that may not already exist on Tommy.
        The created user will be invited to join the current user or team.
      operationId: createContact
      tags:
      - Contact
      parameters:
      - name: body
        in: body
        description: ContactRequest request
        required: true
        schema:
          $ref: '#/definitions/ContactRequest'
      responses:
        201:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get contacts
      description: Get all contacts belonging to the current account.
      operationId: getContacts
      tags:
      - Contact
      responses:
        200:
          description: Contact response
          schema:
            type: array
            items:
              $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts/{friend_id}:
    get:
      summary: Get a contact
      description: Get a contact object by friend user ID.
      operationId: getContact
      tags:
      - Contact
      parameters:
      - name: friend_id
        in: path
        description: User friend_id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update a contact
      description: Update a single contact object.
      operationId: updateContact
      tags:
      - Contact
      parameters:
      - name: friend_id
        in: path
        description: User friend_id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: Contact request
        required: true
        schema:
          $ref: '#/definitions/Contact'
      responses:
        200:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts/import:
    post:
      summary: Import bulk contacts
      description: Import bulk contacts from a mobile phone or other device. Imported
        contacts must provide `first_name` and `mobile` or `email` parameters.
      operationId: importContacts
      tags:
      - Contact
      parameters:
      - name: body
        in: body
        description: Users request
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        201:
          description: Contact response
          schema:
            type: array
            items:
              $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts/{friend_id}/add:
    post:
      summary: Send contact request
      description: Send a contact request to join the given user or team.
      operationId: addContact
      tags:
      - Contact
      parameters:
      - name: friend_id
        in: path
        description: User friend_id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: TeamID request
        required: false
        schema:
          $ref: '#/definitions/TeamID'
      responses:
        201:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts/{friend_id}/invite:
    post:
      summary: Invite contact
      description: Invite the given user to become a contact of the current user or
        team.
      operationId: inviteContact
      tags:
      - Contact
      parameters:
      - name: friend_id
        in: path
        description: User friend_id
        required: true
        type: integer
        format: int64
      responses:
        201:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts/{friend_id}/accept:
    post:
      summary: Accept contact request
      description: Accept an incoming contact request from the given user.
      operationId: acceptContact
      tags:
      - Contact
      parameters:
      - name: friend_id
        in: path
        description: User friend_id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: TeamIDs request
        required: true
        schema:
          $ref: '#/definitions/TeamIDs'
      responses:
        200:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /contacts/{friend_id}/decline:
    post:
      summary: Reject contact request
      description: Reject an incoming contact request from the given user.
      operationId: declineContact
      tags:
      - Contact
      parameters:
      - name: friend_id
        in: path
        description: User friend_id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Contact response
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invitations:
    get:
      description: Get all invitations associated with the current account.
      operationId: getInvitations
      tags:
      - Invitation
      responses:
        200:
          description: Invitation response
          schema:
            type: array
            items:
              $ref: '#/definitions/Invitation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create invitation
      description: Create an invitation link for a member or non-menmer to connect
        with the current user or team.
      operationId: createInvitation
      tags:
      - Invitation
      parameters:
      - name: body
        in: body
        description: InvitationInput request
        required: true
        schema:
          $ref: '#/definitions/InvitationInput'
      responses:
        201:
          description: Invitation response
          schema:
            $ref: '#/definitions/Invitation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invitations/{token}:
    get:
      summary: Get invitations
      description: Get an invitations object by token.
      operationId: getInvitation
      tags:
      - Invitation
      parameters:
      - name: slug
        in: path
        description: Invitation slug
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Invitation response
          schema:
            $ref: '#/definitions/Invitation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invitations/{token}/accept:
    get:
      summary: Accept an invitation
      description: Accept an invitation belonging to the given token.
      operationId: acceptInvitation
      tags:
      - Invitation
      parameters:
      - name: token
        in: path
        description: Invitation token
        required: true
        type: string
      responses:
        200:
          description: Invitation response
          schema:
            $ref: '#/definitions/Invitation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /invitations/{token}/decline:
    get:
      summary: Reject an invitation
      description: Reject an invitation belonging to the given token.
      operationId: declineInvitation
      tags:
      - Invitation
      parameters:
      - name: token
        in: path
        description: Invitation token
        required: true
        type: string
      responses:
        200:
          description: Invitation response
          schema:
            $ref: '#/definitions/Invitation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /events:
    get:
      summary: Get events
      description: Get all events.
      operationId: getEvents
      tags:
      - Event
      responses:
        200:
          description: Event response
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create an event
      description: Create an event
      operationId: createEvents
      tags:
      - Event
      responses:
        201:
          description: Event response
          schema:
            $ref: '#/definitions/Event'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      parameters:
      - name: body
        in: body
        description: EventInput request
        required: true
        schema:
          $ref: '#/definitions/EventInput'
  /events/{id}:
    get:
      summary: Get an event
      description: Get an event object.
      operationId: getEvent
      tags:
      - Event
      parameters:
      - name: id
        in: path
        description: Event id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Event response
          schema:
            $ref: '#/definitions/Event'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update an event
      description: Update an event object.
      operationId: updateEvent
      tags:
      - Event
      parameters:
      - name: id
        in: path
        description: Event id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: EventInput request
        required: true
        schema:
          $ref: '#/definitions/EventInput'
      responses:
        200:
          description: Event response
          schema:
            $ref: '#/definitions/Event'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete an event
      description: Delete an event object.
      operationId: deleteEvent
      tags:
      - Event
      parameters:
      - name: id
        in: path
        description: Event id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Event response
          schema:
            $ref: '#/definitions/Event'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /sessions:
    post:
      summary: Login
      description: "This method handles users who are \n              authenticating
        with an email or phone, and password combination."
      operationId: login
      tags:
      - User
      - Session
      parameters:
      - name: body
        in: body
        description: UserCredentials request
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      responses:
        200:
          description: User response
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Logout
      description: This method destroys the current user session.
      operationId: logout
      tags:
      - User
      - Session
      responses:
        200:
          description: Success response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /geolocations:
    get:
      summary: Get geolocations
      description: Get all geolocation objects.
      operationId: getGeolocations
      tags:
      - Geolocation
      responses:
        200:
          description: Geolocation response
          schema:
            type: array
            items:
              $ref: '#/definitions/Geolocation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create geolocation
      description: Create a geolocation object
      operationId: createGeolocation
      tags:
      - Geolocation
      parameters:
      - name: body
        in: body
        description: GeolocationInput request
        required: true
        schema:
          $ref: '#/definitions/GeolocationInput'
      responses:
        201:
          description: Geolocation response
          schema:
            $ref: '#/definitions/Geolocation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /geolocations/{id}:
    get:
      summary: Get geolocation
      description: Get a geolocation object.
      operationId: getGeolocation
      tags:
      - Geolocation
      parameters:
      - name: id
        in: path
        description: Geolocation id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Geolocation response
          schema:
            $ref: '#/definitions/Geolocation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update geolocation
      description: Update a geolocation object.
      operationId: updateGeolocation
      tags:
      - Geolocation
      parameters:
      - name: id
        in: path
        description: Geolocation id
        required: true
        type: integer
        format: int64
      - name: body
        in: body
        description: GeolocationInput request
        required: true
        schema:
          $ref: '#/definitions/GeolocationInput'
      responses:
        200:
          description: Geolocation response
          schema:
            $ref: '#/definitions/Geolocation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete geolocation
      description: Delete a geolocation object.
      operationId: deleteGeolocation
      tags:
      - Geolocation
      parameters:
      - name: id
        in: path
        description: Geolocation id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Geolocation response
          schema:
            $ref: '#/definitions/Geolocation'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices:
    post:
      summary: Register a device
      description: Register a mobile device for push notifications.
      operationId: registerDevice
      tags:
      - Device
      parameters:
      - name: body
        in: body
        description: Device request
        required: true
        schema:
          $ref: '#/definitions/Device'
      responses:
        200:
          description: Device response
          schema:
            $ref: '#/definitions/Device'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /devices/{uuid}:
    delete:
      summary: Delete a device
      description: Delete a mobile device.
      operationId: deleteDevice
      tags:
      - Device
      parameters:
      - name: uuid
        in: path
        description: Device uuid
        required: true
        type: string
      responses:
        200:
          description: Success response
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":46:{s:7:\"Address\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:13:\"address_line1\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"address_line2\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"address_city\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"address_postcode\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"address_state\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"country_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:7:\"Account\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":10:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"contact_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"mobile\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"notification_count\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}s:4:\"User\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:26:\"A
  representation of a User\";s:10:\"properties\";O:8:\"stdClass\":10:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"mobile\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"dob\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"locale\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"UserInput\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"photo\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:6:\"binary\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}s:6:\"UserID\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:17:\"User
  ID parameter\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}s:4:\"Team\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:26:\"A
  representation of a Team\";s:8:\"required\";a:3:{i:0;s:2:\"id\";i:1;s:7:\"user_id\";i:2;s:4:\"name\";}s:10:\"properties\";O:8:\"stdClass\":9:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"photo\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:6:\"binary\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"phone\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"TeamInput\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Team\";}}}s:6:\"TeamID\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}s:7:\"TeamIDs\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"team_ids\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}}s:3:\"Tag\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:25:\"A
  representation of a Tag\";s:5:\"items\";O:8:\"stdClass\":0:{}}s:15:\"TeamMemberInput\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:45:\"Object
  for creating or updating a Team Member\";s:8:\"required\";a:2:{i:0;s:7:\"user_id\";i:1;s:7:\"team_id\";}s:10:\"properties\";O:8:\"stdClass\":8:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"mute\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:5:\"photo\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:6:\"binary\";}s:5:\"roles\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:42:\"Array
  of roles assigned to the Team Member\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:9:\"locations\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:46:\"Array
  of locations assigned to the Team Member\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"tags\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:41:\"Array
  of tags assigned to the Team Member\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:10:\"TeamMember\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:36:\"Object
  that represents a Team Member\";s:8:\"required\";a:2:{i:0;s:7:\"user_id\";i:1;s:7:\"team_id\";}s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/TeamMemberInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":12:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"mobile\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"manager\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:6:\"member\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"description\";s:48:\"True
  when the team member has signed up to Tommy\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"addon_links\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:80:\"Array
  of profile links accessible by the current User on the Team Member profile\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/AddonLink\";}}}}}}s:14:\"DeveloperInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:37:\"Object
  representing a Tommy developer\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"details\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"Developer\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/DeveloperInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"addons\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Addon\";}}s:7:\"actions\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Action\";}}s:9:\"solutions\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Solution\";}}}}}}s:8:\"Solution\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"developer_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"summary\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"Chat\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":9:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:11:\"description\";s:30:\"The
  user ID of the chat owner.\";}s:7:\"team_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:11:\"description\";s:12:\"The
  team ID.\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:20:\"The
  chat room title.\";}s:5:\"group\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"mute\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:21:\"unread_messages_count\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:5:\"users\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/ChatUser\";}}}}s:9:\"ChatInput\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:20:\"The
  chat room title.\";}s:5:\"group\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"mute\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"user_ids\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}}s:17:\"ChatInitiateInput\";O:8:\"stdClass\":3:{s:8:\"required\";a:1:{i:0;s:8:\"user_ids\";}s:11:\"description\";s:44:\"Array
  of user IDs to initiate the chat with.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:8:\"user_ids\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}}s:8:\"ChatUser\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:7:\"chat_id\";i:1;s:7:\"user_id\";}s:10:\"properties\";O:8:\"stdClass\":7:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"chat_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"deleted\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:12:\"MessageInput\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:9:\"sender_id\";i:1;s:4:\"body\";}s:10:\"properties\";O:8:\"stdClass\":6:{s:7:\"chat_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:9:\"sender_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:11:\"receiver_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"body\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"send_at\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";s:11:\"description\";s:38:\"Time
  in the future to send the message\";}}}s:7:\"Message\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/MessageInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"chat_title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"sender_first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"sender_last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"sender_icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"sent_at\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}}}}}s:9:\"AddonView\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"framed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:7:\"default\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:9:\"AddonLink\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"package\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:5:\"Addon\";O:8:\"stdClass\":2:{s:8:\"required\";a:3:{i:0;s:2:\"id\";i:1;s:7:\"user_id\";i:2;s:7:\"package\";}s:10:\"properties\";O:8:\"stdClass\":18:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"developer_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"package\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"author\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"version\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"homepage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"file_base_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"installed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"updated_at\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:5:\"roles\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:46:\"Array
  of roles required to install this addon.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:11:\"permissions\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}s:13:\"input_devices\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}s:9:\"languages\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:5:\"views\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/AddonView\";}}}}s:8:\"AuditLog\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"error\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"Activity\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:17:\"action_version_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:7:\"Trigger\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:17:\"action_version_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:6:\"Action\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":13:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"developer_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:17:\"action_version_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:6:\"author\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"trigger\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Trigger\";}s:8:\"activity\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Activity\";}s:12:\"dependencies\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"summary\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"installed\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:11:\"TriggerData\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"trigger_data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:19:\"Trigger
  data object\";}}}s:7:\"Setting\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:7:\"user_id\";i:1;s:4:\"data\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"account_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"account_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:21:\"Setting
  data as JSON.\";}}}s:11:\"SettingData\";O:8:\"stdClass\":2:{s:8:\"required\";a:1:{i:0;s:4:\"data\";}s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:49:\"Setting
  data as JSON, boolean, integer or string.\";}}}s:13:\"FragmentInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:44:\"Object
  for creating or updating an Fragment.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"data\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"time\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:9:\"parent_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}s:8:\"Fragment\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:35:\"Object
  that represents an Fragment.\";s:8:\"required\";a:1:{i:0;s:7:\"user_id\";}s:10:\"properties\";O:8:\"stdClass\":11:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:17:\"addons_install_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"data\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:4:\"time\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:9:\"parent_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:11:\"resource_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:13:\"resource_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"ContactInput\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:29:\"A
  representation of a Contact\";s:8:\"required\";a:1:{i:0;s:9:\"friend_id\";}s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"friend_id\";O:8:\"stdClass\":3:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";s:11:\"description\";s:14:\"Friend
  user ID\";}s:8:\"favorite\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"mute\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:8:\"personal\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:7:\"Contact\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ContactInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":10:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"first_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"last_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"icon_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"mobile\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"member\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:11:\"description\";s:43:\"True
  when the friend has signed up to Tommy\";}s:14:\"last_online_at\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}}}}}s:14:\"ContactRequest\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:3:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/User\";}i:1;O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/TeamIDs\";}i:2;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"via\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}s:15:\"InvitationInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:34:\"Object
  for creating an Invitation.\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"friend_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:10:\"invitee_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:12:\"invitee_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"Invitation\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:35:\"Invitation
  for a user to join Tommy\";s:8:\"required\";a:2:{i:0;s:5:\"token\";i:1;s:7:\"user_id\";}s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/InvitationInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":11:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"inviter\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Account\";}s:7:\"invitee\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Account\";}s:7:\"contact\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Contact\";}s:5:\"token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"link\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"times_sent\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"sent_at\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:11:\"accepted_at\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}}}}}s:10:\"EventInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:41:\"Object
  for creating or updating an Event.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"details\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"color\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:5:\"Event\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:32:\"Object
  that represents an Event.\";s:8:\"required\";a:1:{i:0;s:7:\"user_id\";}s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/EventInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:17:\"addons_install_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}}}s:15:\"UserCredentials\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:22:\"User
  login credentials\";s:8:\"required\";a:2:{i:0;s:5:\"login\";i:1;s:8:\"password\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"login\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"Permission\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":11:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"hint\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"resource_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:13:\"resource_type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"user_ids\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:29:\"Array
  of User IDs with access\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:5:\"roles\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:35:\"Array
  of roles assigned with access\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:9:\"locations\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:39:\"Array
  of locations assigned with access\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"tags\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:34:\"Array
  of tags assigned with access\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:10:\"operations\";O:8:\"stdClass\":3:{s:4:\"type\";s:5:\"array\";s:11:\"description\";s:31:\"Array
  of permissable operations\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:16:\"GeolocationInput\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:47:\"Object
  for creating or updating an Geolocation.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:8:\"latitude\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"float\";}s:9:\"longitude\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"float\";}s:9:\"timestamp\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"details\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"Geolocation\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:38:\"Object
  that represents an Geolocation.\";s:8:\"required\";a:2:{i:0;s:2:\"id\";i:1;s:7:\"user_id\";}s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/GeolocationInput\";}i:1;O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:7:\"team_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:17:\"addons_install_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}}}}}s:6:\"Device\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:11:\"description\";s:11:\"User
  device\";s:8:\"required\";a:3:{i:0;s:7:\"user_id\";i:1;s:8:\"platform\";i:2;s:4:\"uuid\";}s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"user_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int64\";}s:8:\"platform\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:3:\"ios\";i:1;s:7:\"android\";}s:11:\"description\";s:20:\"Device
  platform type\";}s:11:\"environment\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:2:{i:0;s:11:\"development\";i:1;s:10:\"production\";}s:11:\"description\";s:24:\"Device
  build environment\";}s:4:\"uuid\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:11:\"Device
  UUID\";}s:5:\"token\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:12:\"Device
  token\";}}}s:5:\"Error\";O:8:\"stdClass\":2:{s:8:\"required\";a:2:{i:0;s:4:\"code\";i:1;s:7:\"message\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"code\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:5:\"int32\";}s:7:\"message\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}"
...
