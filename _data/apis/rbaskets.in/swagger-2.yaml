---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:8:\"darklynx\";s:3:\"url\";s:27:\"https://github.com/darklynx\";}s:11:\"description\";s:294:\"RESTful
  API of [Request Baskets](https://rbaskets.in) service.\n\nRequest Baskets is an
  open source project of a service to collect HTTP requests and inspect them via RESTful\nAPI
  or web UI.\n\nCheck out the [project page](https://github.com/darklynx/request-baskets)
  for more detailed description.\n\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:3:\"MIT\";s:3:\"url\";s:63:\"https://github.com/darklynx/request-baskets/blob/master/LICENSE\";}s:5:\"title\";s:15:\"Request
  Baskets\";s:7:\"version\";s:3:\"0.8\";s:21:\"x-apisguru-categories\";a:1:{i:0;s:15:\"developer_tools\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:112:\"https://api.apis.guru/v2/cache/logo/https_raw.githubusercontent.com_darklynx_request-baskets_master_doc_logo.svg\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":3:{s:6:\"format\";s:7:\"swagger\";s:3:\"url\";s:86:\"https://raw.githubusercontent.com/darklynx/request-baskets/master/doc/api-swagger.yaml\";s:7:\"version\";s:3:\"2.0\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:11:\"rbaskets.in\";}"
host: rbaskets.in
basePath: /
paths:
  /baskets:
    get:
      description: Fetches a list of basket names managed by service. Require master
        token.
      parameters:
      - description: Maximum number of basket names to return; default 20
        in: query
        name: max
        required: false
        type: integer
      - description: Number of basket names to skip; default 0
        in: query
        name: skip
        required: false
        type: integer
      - description: Query string to filter result, only those basket names that match
          the query will be included in response
        in: query
        name: q
        required: false
        type: string
      responses:
        200:
          description: OK. Returns list of available baskets.
          schema:
            $ref: '#/definitions/Baskets'
        204:
          description: No Content. No baskets available for specified limits
        401:
          description: Unauthorized. Invalid or missing master token
      security:
      - basket_token: []
      summary: Get baskets
      tags:
      - baskets
  /baskets/{name}:
    delete:
      description: Permanently deletes this basket and all collected requests.
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      responses:
        204:
          description: No Content. Basket is deleted
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Delete basket
      tags:
      - baskets
    get:
      description: Retrieves configuration settings of this basket.
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      responses:
        200:
          description: OK. Returns basket configuration
          schema:
            $ref: '#/definitions/Config'
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get basket settings
      tags:
      - baskets
    post:
      description: Creates a new basket with this name.
      parameters:
      - description: The name of new basket
        in: path
        name: name
        required: true
        type: string
      - description: Basket configuration
        in: body
        name: config
        required: false
        schema:
          $ref: '#/definitions/Config'
      responses:
        201:
          description: Created. Indicates that basket is successfully created
          schema:
            $ref: '#/definitions/Token'
        400:
          description: Bad Request. Failed to parse JSON into basket configuration
            object.
        403:
          description: Forbidden. Indicates that basket name conflicts with reserved
            paths; e.g. `baskets`, `web`, etc.
        409:
          description: Conflict. Indicates that basket with such name already exists
        422:
          description: Unprocessable Entity. Basket configuration is not valid.
      summary: Create new basket
      tags:
      - baskets
    put:
      description: Updates configuration settings of this basket.nnSpecial configuration
        parameters for request forwarding:n  * `insecure_tls` controls certificate
        verification when forwarding requests. Setting this parameter to `true`n  allows
        to forward collected HTTP requests via HTTPS protocol even if the forward
        end-point is configured withn  self-signed TLS/SSL certificate. **Warning:**
        enabling this feature has known security implications.n  * `expand_path` changes
        the logic of constructing taget URL when forwarding requests. If this parameter
        isn  set to `true` the forward URL path will be expanded when original HTTP
        request contains compound path. Forn  example, a basket with name **server1**
        is configured to forward all requests to `http://server1.intranet:8001/myservice`n  and
        it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`n  then
        depending on `expand_path` settings the request will be forwarded to:n    *
        `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`n    *
        `false` => `GET http://server1.intranet:8001/myservice?status=OK`n
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      - description: New configuration to apply
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/Config'
      responses:
        204:
          description: No Content. Basket configuration is updated
        400:
          description: Bad Request. Failed to parse JSON into basket configuration
            object.
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
        422:
          description: Unprocessable Entity. Basket configuration is not valid.
      security:
      - basket_token: []
      summary: Update basket settings
      tags:
      - baskets
  /baskets/{name}/requests:
    delete:
      description: Deletes all requests collected by this basket.
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      responses:
        204:
          description: No Content. Basket requests are cleared
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Delete all requests
      tags:
      - requests
    get:
      description: Fetches collection of requests collected by this basket.
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      - description: Maximum number of requests to return; default 20
        in: query
        name: max
        required: false
        type: integer
      - description: Number of requests to skip; default 0
        in: query
        name: skip
        required: false
        type: integer
      - description: Query string to filter result, only requests that match the query
          will be included in response
        in: query
        name: q
        required: false
        type: string
      - description: 'Defines what is taken into account when filtering is applied:
          `body` - search in content body of collected requests,n`query` - search
          among query parameters of collected requests, `headers` - search among request
          header values,n`any` - search anywhere; default `any`n'
        enum:
        - any
        - body
        - query
        - headers
        in: query
        name: in
        required: false
        type: string
      responses:
        200:
          description: OK. Returns list of basket requests.
          schema:
            $ref: '#/definitions/Requests'
        204:
          description: No Content. No requests found for specified limits
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get collected requests
      tags:
      - requests
  /baskets/{name}/responses/{method}:
    get:
      description: Retrieves information about configured response of the basket.
        Service will reply with this response to anynHTTP request sent to the basket
        with appropriate HTTP method.nnIf nothing is configured, the default response
        is HTTP 200 - OK with empty content.n
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      - description: The HTTP method this response is configured for
        enum:
        - GET
        - HEAD
        - POST
        - PUT
        - PATCH
        - DELETE
        - CONNECT
        - OPTIONS
        - TRACE
        in: path
        name: method
        required: true
        type: string
      responses:
        200:
          description: OK. Returns configured response information
          schema:
            $ref: '#/definitions/Response'
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get response settings
      tags:
      - responses
    put:
      description: Allows to configure HTTP response of this basket. The service will
        reply with configured response to any HTTPnrequest sent to the basket with
        appropriate HTTP method.nnIf nothing is configured, the default response is
        HTTP 200 - OK with empty content.n
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        type: string
      - description: The HTTP method this response is configured for
        enum:
        - GET
        - HEAD
        - POST
        - PUT
        - PATCH
        - DELETE
        - CONNECT
        - OPTIONS
        - TRACE
        in: path
        name: method
        required: true
        type: string
      - description: HTTP response configuration
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/Response'
      responses:
        204:
          description: No Content. Response configuration is updated
        400:
          description: Bad Request. Failed to parse JSON into response configuration
            object.
        401:
          description: Unauthorized. Invalid or missing basket token
        404:
          description: Not Found. No basket with such name
        422:
          description: Unprocessable Entity. Response configuration is not valid.
      security:
      - basket_token: []
      summary: Update response settings
      tags:
      - responses
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":7:{s:7:\"Baskets\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":3:{s:5:\"count\";O:8:\"stdClass\":2:{s:11:\"description\";s:70:\"Total
  number of baskets in the system; not present if query is applied\";s:4:\"type\";s:7:\"integer\";}s:8:\"has_more\";O:8:\"stdClass\":2:{s:11:\"description\";s:44:\"Indicates
  if there are more baskets to fetch\";s:4:\"type\";s:7:\"boolean\";}s:5:\"names\";O:8:\"stdClass\":3:{s:11:\"description\";s:26:\"Collection
  of basket names\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}s:8:\"required\";a:2:{i:0;s:5:\"names\";i:1;s:8:\"has_more\";}s:4:\"type\";s:6:\"object\";}s:6:\"Config\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"capacity\";O:8:\"stdClass\":2:{s:11:\"description\";s:61:\"Baskets
  capacity, defines maximum number of requests to store\";s:4:\"type\";s:7:\"integer\";}s:11:\"expand_path\";O:8:\"stdClass\":2:{s:11:\"description\";s:105:\"If
  set to `true` the forward URL path will be expanded when original HTTP request contains
  compound path.\";s:4:\"type\";s:7:\"boolean\";}s:11:\"forward_url\";O:8:\"stdClass\":2:{s:11:\"description\";s:85:\"URL
  to forward all incoming requests of the basket, `empty` value disables forwarding\";s:4:\"type\";s:6:\"string\";}s:12:\"insecure_tls\";O:8:\"stdClass\":2:{s:11:\"description\";s:170:\"If
  set to `true` the certificate verification will be disabled if forward URL indicates
  HTTPS scheme.\n**Warning:** enabling this feature has known security implications.\n\";s:4:\"type\";s:7:\"boolean\";}s:14:\"proxy_response\";O:8:\"stdClass\":2:{s:11:\"description\";s:228:\"If
  set to `true` this basket behaves as a full proxy: responses from underlying service
  configured in `forward_url`\nare passed back to clients of original requests. The
  configuration of basket responses is ignored in this case.\n\";s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Headers\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":3:{s:11:\"description\";s:27:\"Collection
  of header values\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"description\";s:66:\"Map
  of HTTP headers, key represents name, value is array of values\";s:4:\"type\";s:6:\"object\";}s:7:\"Request\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:4:\"body\";O:8:\"stdClass\":2:{s:11:\"description\";s:23:\"Content
  of request body\";s:4:\"type\";s:6:\"string\";}s:14:\"content_length\";O:8:\"stdClass\":2:{s:11:\"description\";s:25:\"Content
  lenght of request\";s:4:\"type\";s:7:\"integer\";}s:4:\"date\";O:8:\"stdClass\":3:{s:11:\"description\";s:106:\"Date
  and time of request in Unix time ms. format (number of miliseconds elapsed since
  January 1, 1970 UTC)\";s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:7:\"integer\";}s:7:\"headers\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Headers\";}s:6:\"method\";O:8:\"stdClass\":2:{s:11:\"description\";s:22:\"HTTP
  methof of request\";s:4:\"type\";s:6:\"string\";}s:4:\"path\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"URL
  path of request\";s:4:\"type\";s:6:\"string\";}s:5:\"query\";O:8:\"stdClass\":2:{s:11:\"description\";s:27:\"Query
  parameters of request\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Requests\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"count\";O:8:\"stdClass\":2:{s:11:\"description\";s:84:\"Current
  number of collected requests hold by basket; not present if query is applied\";s:4:\"type\";s:7:\"integer\";}s:8:\"has_more\";O:8:\"stdClass\":2:{s:11:\"description\";s:65:\"Indicates
  if there are more requests collected by basket to fetch\";s:4:\"type\";s:7:\"boolean\";}s:8:\"requests\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Collection
  of collected requests\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Request\";}s:4:\"type\";s:5:\"array\";}s:11:\"total_count\";O:8:\"stdClass\":2:{s:11:\"description\";s:88:\"Total
  number of all requests passed through this basket; not present if query is applied\";s:4:\"type\";s:7:\"integer\";}}s:8:\"required\";a:2:{i:0;s:8:\"requests\";i:1;s:8:\"has_more\";}s:4:\"type\";s:6:\"object\";}s:8:\"Response\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:4:\"body\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"Content
  of response body\";s:4:\"type\";s:6:\"string\";}s:7:\"headers\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Headers\";}s:11:\"is_template\";O:8:\"stdClass\":2:{s:11:\"description\";s:138:\"If
  set to `true` the body is treated as [HTML template](https://golang.org/pkg/html/template)
  that accepts\ninput from request parameters.\n\";s:4:\"type\";s:7:\"boolean\";}s:6:\"status\";O:8:\"stdClass\":2:{s:11:\"description\";s:34:\"The
  HTTP status code to reply with\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Token\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"token\";O:8:\"stdClass\":2:{s:11:\"description\";s:54:\"Secure
  token to manage the basket, generated by system\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:5:\"token\";}s:4:\"type\";s:6:\"object\";}}"
...
