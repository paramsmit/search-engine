---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":3:{s:5:\"email\";s:16:\"support@cenit.io\";s:4:\"name\";s:16:\"Cenit
  IO Support\";s:3:\"url\";s:16:\"https://cenit.io\";}s:11:\"description\";s:71:\"Cenit
  IO is an Open Platform for Data and Business Integration (iPaaS)\n\";s:14:\"termsOfService\";s:51:\"https://cenit-portal.herokuapp.com/terms_of_service\";s:5:\"title\";s:33:\"Cenit
  IO - REST API Specification\";s:7:\"version\";s:2:\"v1\";s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:66:\"https://api.apis.guru/v2/cache/logo/https_cenit.io_images_logo.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":3:{s:6:\"format\";s:7:\"swagger\";s:3:\"url\";s:47:\"https://cenit-io.github.io/openapi/swagger.json\";s:7:\"version\";s:3:\"2.0\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:8:\"cenit.io\";s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:5:\"cenit\";s:4:\"type\";s:7:\"openapi\";}}"
host: cenit.io
basePath: /api/v1
paths:
  /setup/connection:
    get:
      description: Returns a list of connections you've previously created. The connections
        are returned in sorted order, with the most recent connection appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/connection'
            type: array
      summary: Returns a list of connections
      tags:
      - Connection
      operationId: setup.connection.get
    post:
      description: Creates or updates the specified connection by setting the values
        of the parameters passed. Any parameters not provided will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/connection'
      summary: Create or update a connection
      tags:
      - Connection
      operationId: setup.connection.post
  /setup/connection/{id}:
    delete:
      description: Permanently deletes a connection. It cannot be undone.
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a connection
      tags:
      - Connection
      operationId: setup.connection.id.delete
    get:
      description: Retrieves the details of an existing connection. You need only
        supply the unique connection identifier that was returned upon connection
        creation.
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/connection'
        404:
          description: Item not found
      summary: Retrieve an existing connection
      tags:
      - Connection
      operationId: setup.connection.id.get
  /setup/connection_role:
    get:
      description: Returns a list of connection roles you've previously created. The
        connection roles are returned in sorted order, with the most recent connection
        role appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/connection_role'
            type: array
      summary: Returns a list of connection roles
      tags:
      - Connection Role
      operationId: setup.connection_role.get
    post:
      description: Creates or updates the specified connection role by setting the
        values of the parameters passed. Any parameters not provided will be left
        unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/connection_role'
      summary: Create or update a connection role
      tags:
      - Connection Role
      operationId: setup.connection_role.post
  /setup/connection_role/{id}:
    delete:
      description: Deletes the specified connection role.
      parameters:
      - description: Connection role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a connection role.
      tags:
      - Connection Role
      operationId: setup.connection_role.id.delete
    get:
      description: Returns a connection role
      parameters:
      - description: Connection role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/connection_role'
        404:
          description: Item not found
      summary: Return a connection role
      tags:
      - Connection Role
      operationId: setup.connection_role.id.get
  /setup/data_type/:
    get:
      description: Returns a list of data types you've previously created. The data
        types are returned in sorted order, with the most recent DataType appearing
        first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/data_type'
            type: array
      summary: Returns a list of data types
      tags:
      - Data Type
      operationId: setup.data_type.get
    post:
      description: Creates or updates the specified data type by setting the values
        of the parameters passed. Any parameters not provided will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/data_type'
      summary: Create or update a data type
      tags:
      - Data Type
      operationId: setup.data_type.post
  /setup/data_type/{id}:
    delete:
      description: Deletes the specified data type.
      parameters:
      - description: data type ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a data type
      tags:
      - Data Type
      operationId: setup.data_type.id.delete
    get:
      description: Retrieves the details of an existing data type. You need only supply
        the unique data  type identifier that was returned upon DataType creation.
      parameters:
      - description: data type ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/data_type'
        404:
          description: Item not found.
      summary: Retrieve a data type
      tags:
      - Data Type
      operationId: setup.data_type.id.get
  /setup/flow/:
    get:
      description: Returns a list of flows you've previously created. The flows are
        returned in sorted order, with the most recent flow appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/flow'
            type: array
      summary: Returns a list of flows
      tags:
      - Flow
      operationId: setup.flow.get
    post:
      description: Creates or updates the specified flow. Any parameters not provided
        will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/flow'
      summary: Create or update a flow
      tags:
      - Flow
      operationId: setup.flow.post
  /setup/flow/{id}:
    delete:
      description: Deletes the specified flow.
      parameters:
      - description: Flow ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a flow.
      tags:
      - Flow
      operationId: setup.flow.id.delete
    get:
      description: Retrieves the details of an existing flow. You need only supply
        the unique flow identifier that was returned upon flow creation.
      parameters:
      - description: Flow ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/flow'
        404:
          description: Item not found.
      summary: Retrieve an existing flow
      tags:
      - Flow
      operationId: setup.flow.id.get
  /setup/namespace/:
    get:
      description: Returns a list of namespaces you've previously created. The namespaces
        are returned in sorted order, with the most recent namespace appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/namespace'
            type: array
      summary: Returns a list of namespaces
      tags:
      - Namespace
      operationId: setup.namespace.get
    post:
      description: Creates or updates the specified namespace. Any parameters not
        provided will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/namespace'
      summary: Create or update a namespace
      tags:
      - Namespace
      operationId: setup.namespace.post
  /setup/namespace/{id}:
    delete:
      description: Deletes the specified namespace.
      parameters:
      - description: Namespace ID.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a namespace
      tags:
      - Namespace
      operationId: setup.namespace.id.delete
    get:
      description: Retrieves the details of an existing namespace. You need only supply
        the unique webhook namespace that was returned upon namespace creation.
      parameters:
      - description: Namespace ID.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/namespace'
        404:
          description: Item not found.
      summary: Retrieve an existing namespace
      tags:
      - Namespace
      operationId: setup.namespace.id.get
  /setup/observer/:
    get:
      description: Returns a list of events you've previously created. The events
        are returned in sorted order, with the most recent event appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/observer'
            type: array
      summary: Returns a list of events
      tags:
      - Data Event
      operationId: setup.observer.get
    post:
      description: Creates or updates the specified event observer. Any parameters
        not provided will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/observer'
      summary: Create or update an event
      tags:
      - Data Event
      operationId: setup.observer.post
  /setup/observer/{id}:
    delete:
      description: Deletes the specified event observer.
      parameters:
      - description: Observer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete an event
      tags:
      - Data Event
      operationId: setup.observer.id.delete
    get:
      description: Retrieves the details of an existing event. You need only supply
        the unique event identifier that was returned upon event creation.
      parameters:
      - description: Observer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/observer'
        404:
          description: Item not found.
      summary: Retrieve an existing event
      tags:
      - Data Event
      operationId: setup.observer.id.get
  /setup/scheduler/:
    get:
      description: Returns a list of schedulers you've previously created. The schedulers
        are returned in sorted order, with the most recent scheduler appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/scheduler'
            type: array
      summary: Returns a list of schedulers
      tags:
      - Scheduler
      operationId: setup.scheduler.get
    post:
      description: Creates or updates the specified scheduler. Any parameters not
        provided will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/scheduler'
      summary: Create or update an scheduler
      tags:
      - Scheduler
      operationId: setup.scheduler.post
  /setup/scheduler/{id}:
    delete:
      description: Deletes the specified scheduler.
      parameters:
      - description: Scheduler ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete an schedule
      tags:
      - Scheduler
      operationId: setup.scheduler.id.delete
    get:
      description: Retrieves the details of an existing scheduler. You need only supply
        the unique scheduler identifier that was returned upon scheduler creation.
      parameters:
      - description: Scheduler ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/scheduler'
        404:
          description: Item not found.
      summary: Retrieve an existing schedule
      tags:
      - Scheduler
      operationId: setup.scheduler.id.get
  /setup/schema/:
    get:
      description: Returns a list of schemas you've previously created. The schemas
        are returned in sorted order, with the most recent schema appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/schema'
            type: array
      summary: Returns a list of schemas
      tags:
      - Schema
      operationId: setup.schema.get
    post:
      description: Creates or updates the specified schema. Any parameters not provided
        will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/schema'
      summary: Create or update an schema
      tags:
      - Schema
      operationId: setup.schema.post
  /setup/schema/{id}:
    delete:
      description: Deletes the specified schema.
      parameters:
      - description: Schema ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete an schema.
      tags:
      - Schema
      operationId: setup.schema.id.delete
    get:
      description: Retrieves the details of an existing schema. You need only supply
        the unique schema identifier that was returned upon schema creation.
      parameters:
      - description: Schema ID
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/schema'
        404:
          description: Item not found.
      summary: Retrieve an existing schema
      tags:
      - Schema
      operationId: setup.schema.id.get
  /setup/translator/:
    get:
      description: Returns a list of translators you've previously created. The translators
        are returned in sorted order, with the most recent translator appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/translator'
            type: array
      summary: Returns a list of translators
      tags:
      - Translator
      operationId: setup.translator.get
    post:
      description: Creates or updates the specified translator. Any parameters not
        provided will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/translator'
      summary: Create or update a translator
      tags:
      - Translator
      operationId: setup.translator.post
  /setup/translator/{id}:
    delete:
      description: Deletes the specified translator.
      parameters:
      - description: Translator ID.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a translator
      tags:
      - Translator
      operationId: setup.translator.id.delete
    get:
      description: Retrieves the details of an existing translator. You need only
        supply the unique translator identifier that was returned upon translator
        creation.
      parameters:
      - description: Translator ID.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/translator'
        404:
          description: Item not found.
      summary: Retrieve an existing translator
      tags:
      - Translator
      operationId: setup.translator.id.get
  /setup/webhook/:
    get:
      description: Returns a list of webhooks you've previously created. The webhooks
        are returned in sorted order, with the most recent webhook appearing first.
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/webhook'
            type: array
      summary: Returns a list of webhooks
      tags:
      - Webhook
      operationId: setup.webhook.get
    post:
      description: Creates or updates the specified webhook. Any parameters not provided
        will be left unchanged.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/webhook'
      summary: Create or update a webhook
      tags:
      - Webhook
      operationId: setup.webhook.post
  /setup/webhook/{id}:
    delete:
      description: Deletes the specified webhook.
      parameters:
      - description: Webhook ID.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
        404:
          description: Item not found
      summary: Delete a webhook
      tags:
      - Webhook
      operationId: setup.webhook.id.delete
    get:
      description: Retrieves the details of an existing webhook. You need only supply
        the unique webhook identifier that was returned upon webhook creation.
      parameters:
      - description: Webhook ID.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/webhook'
        404:
          description: Item not found.
      summary: Retrieve an existing webhook
      tags:
      - Webhook
      operationId: setup.webhook.id.get
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":10:{s:10:\"connection\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":8:{s:7:\"headers\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:10:\"parameters\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:5:\"token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:15:\"connection_role\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:10:\"connection\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/connection\";}s:4:\"type\";s:5:\"array\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:7:\"webhook\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/webhook\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:9:\"data_type\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"model_schema\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:20:\"show_navigation_link\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:4:\"flow\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":12:{s:6:\"active\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:15:\"connection_role\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/connection_role\";}s:16:\"custom_data_type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/data_type\";}s:5:\"event\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:14:\"notify_request\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:15:\"notify_response\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:19:\"response_translator\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/translator\";}s:10:\"translator\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/translator\";}s:7:\"webhook\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/webhook\";}}s:4:\"type\";s:6:\"object\";}s:9:\"namespace\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"slug\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:8:\"observer\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":6:{s:9:\"data_type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/data_type\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:8:\"triggers\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:9:\"scheduler\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:9:\"activated\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"expression\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}}s:4:\"type\";s:6:\"object\";}s:6:\"schema\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:6:\"schema\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"uri\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:10:\"translator\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":9:{s:16:\"custom_data_type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/data_type\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:16:\"source_data_type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/data_type\";}s:5:\"style\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:4:\"Ruby\";i:1;s:6:\"Liquid\";i:2;s:4:\"xslt\";}s:4:\"type\";s:6:\"string\";}s:16:\"target_data_type\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/data_type\";}s:14:\"transformation\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":2:{s:4:\"enum\";a:4:{i:0;s:6:\"Import\";i:1;s:6:\"Export\";i:2;s:7:\"Convert\";i:3;s:6:\"Update\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:7:\"webhook\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":6:{s:7:\"headers\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/namespace\";}s:10:\"parameters\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"key\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:4:\"path\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}}"
...
