---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":11:{s:7:\"contact\";O:8:\"stdClass\":2:{s:4:\"name\";s:6:\"Google\";s:3:\"url\";s:18:\"https://google.com\";}s:11:\"description\";s:50:\"Registers,
  manages, indexes, and searches beacons.\";s:5:\"title\";s:16:\"Proximity Beacon\";s:7:\"version\";s:7:\"v1beta1\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:37:\"https://console.developers.google.com\";}s:21:\"x-apisguru-categories\";a:1:{i:0;s:3:\"iot\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:116:\"https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:45:\"https://github.com/lucybot/api-spec-converter\";s:7:\"version\";s:5:\"2.6.2\";}s:6:\"format\";s:6:\"google\";s:3:\"url\";s:70:\"https://proximitybeacon.googleapis.com/$discovery/rest?version=v1beta1\";s:7:\"version\";s:2:\"v1\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:14:\"googleapis.com\";s:13:\"x-serviceName\";s:15:\"proximitybeacon\";}"
host: proximitybeacon.googleapis.com
basePath: /
paths: ~
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":21:{s:12:\"AdvertisedId\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"Defines
  a unique identifier of a beacon as broadcast by the device.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":3:{s:11:\"description\";s:331:\"The
  actual beacon identifier, as broadcast by the beacon hardware. Must be\n[base64](http://tools.ietf.org/html/rfc4648#section-4)
  encoded in HTTP\nrequests, and will be so encoded (with padding) in responses. The
  base64\nencoding should be of the binary byte-stream and not any textual (such as\nhex)
  representation thereof.\nRequired.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Specifies
  the identifier type.\nRequired.\";s:4:\"enum\";a:5:{i:0;s:16:\"TYPE_UNSPECIFIED\";i:1;s:9:\"EDDYSTONE\";i:2;s:7:\"IBEACON\";i:3;s:9:\"ALTBEACON\";i:4;s:13:\"EDDYSTONE_EID\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:14:\"AttachmentInfo\";O:8:\"stdClass\":3:{s:11:\"description\";s:130:\"A
  subset of attachment information served via the\n`beaconinfo.getforobserved` method,
  used when your users encounter your\nbeacons.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"data\";O:8:\"stdClass\":3:{s:11:\"description\";s:50:\"An
  opaque data container for client-provided data.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:17:\"maxDistanceMeters\";O:8:\"stdClass\":3:{s:11:\"description\";s:667:\"The
  distance away from the beacon at which this attachment should be\ndelivered to a
  mobile app.\n\nSetting this to a value greater than zero indicates that the app
  should\nbehave as if the beacon is \"seen\" when the mobile device is less than
  this\ndistance away from the beacon.\n\nDifferent attachments on the same beacon
  can have different max distances.\n\nNote that even though this value is expressed
  with fractional meter\nprecision, real-world behavior is likley to be much less
  precise than one\nmeter, due to the nature of current Bluetooth radio technology.\n\nOptional.
  When not set or zero, the attachment should be delivered at the\nbeacon's outer
  limit of detection.\";s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:14:\"namespacedType\";O:8:\"stdClass\":2:{s:11:\"description\";s:194:\"Specifies
  what kind of attachment this is. Tells a client how to\ninterpret the `data` field.
  Format is <var>namespace/type</var>, for\nexample <code>scrupulous-wombat-12345/welcome-message</code>\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"Beacon\";O:8:\"stdClass\":3:{s:11:\"description\";s:27:\"Details
  of a beacon device.\";s:10:\"properties\";O:8:\"stdClass\":11:{s:12:\"advertisedId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/AdvertisedId\";s:11:\"description\";s:411:\"The
  identifier of a beacon as advertised by it. This field must be\npopulated when registering.
  It may be empty when updating a beacon\nrecord because it is ignored in updates.\n\nWhen
  registering a beacon that broadcasts Eddystone-EID, this field\nshould contain a
  \"stable\" Eddystone-UID that identifies the beacon and\nlinks it to its attachments.
  The stable Eddystone-UID is only used for\nadministering the beacon.\";}s:10:\"beaconName\";O:8:\"stdClass\":2:{s:11:\"description\";s:377:\"Resource
  name of this beacon. A beacon name has the format\n\"beacons/N!beaconId\" where
  the beaconId is the base16 ID broadcast by\nthe beacon and N is a code for the beacon's
  type. Possible values are\n`3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon.\n\nThis
  field must be left empty when registering. After reading a beacon,\nclients can
  use the name for future operations.\";s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:92:\"Free
  text used to identify and describe the beacon. Maximum length 140\ncharacters.\nOptional.\";s:4:\"type\";s:6:\"string\";}s:23:\"ephemeralIdRegistration\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/EphemeralIdRegistration\";s:11:\"description\";s:302:\"Write-only
  registration parameters for beacons using Eddystone-EID\n(remotely resolved ephemeral
  ID) format. This information will not be\npopulated in API responses. When submitting
  this data, the `advertised_id`\nfield must contain an ID of type Eddystone-UID.
  Any other ID type will\nresult in an error.\";}s:17:\"expectedStability\";O:8:\"stdClass\":3:{s:11:\"description\";s:131:\"Expected
  location stability. This is set when the beacon is registered or\nupdated, not automatically
  detected in any way.\nOptional.\";s:4:\"enum\";a:5:{i:0;s:21:\"STABILITY_UNSPECIFIED\";i:1;s:6:\"STABLE\";i:2;s:8:\"PORTABLE\";i:3;s:6:\"MOBILE\";i:4;s:6:\"ROVING\";}s:4:\"type\";s:6:\"string\";}s:11:\"indoorLevel\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/IndoorLevel\";s:11:\"description\";s:101:\"The
  indoor level information for this beacon, if known. As returned by the\nGoogle Maps
  API.\nOptional.\";}s:6:\"latLng\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/LatLng\";s:11:\"description\";s:222:\"The
  location of the beacon, expressed as a latitude and longitude pair.\nThis location
  is given when the beacon is registered or updated. It does\nnot necessarily indicate
  the actual current location of the beacon.\nOptional.\";}s:7:\"placeId\";O:8:\"stdClass\":2:{s:11:\"description\";s:198:\"The
  [Google Places API](/places/place-id) Place ID of the place where\nthe beacon is
  deployed. This is given when the beacon is registered or\nupdated, not automatically
  detected in any way.\nOptional.\";s:4:\"type\";s:6:\"string\";}s:10:\"properties\";O:8:\"stdClass\":3:{s:20:\"additionalProperties\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";s:88:\"Properties
  of the beacon device, for example battery type or firmware\nversion.\nOptional.\";s:4:\"type\";s:6:\"object\";}s:15:\"provisioningKey\";O:8:\"stdClass\":3:{s:11:\"description\";s:576:\"Some
  beacons may require a user to provide an authorization key before\nchanging any
  of its configuration (e.g. broadcast frames, transmit power).\nThis field provides
  a place to store and control access to that key.\nThis field is populated in responses
  to `GET /v1beta1/beacons/3!beaconId`\nfrom users with write access to the given
  beacon. That is to say: If the\nuser is authorized to write the beacon's confidential
  data in the service,\nthe service considers them authorized to configure the beacon.
  Note\nthat this key grants nothing on the service, only on the beacon itself.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":3:{s:11:\"description\";s:39:\"Current
  status of the beacon.\nRequired.\";s:4:\"enum\";a:4:{i:0;s:18:\"STATUS_UNSPECIFIED\";i:1;s:6:\"ACTIVE\";i:2;s:14:\"DECOMMISSIONED\";i:3;s:8:\"INACTIVE\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:16:\"BeaconAttachment\";O:8:\"stdClass\":3:{s:11:\"description\";s:47:\"Project-specific
  data associated with a beacon.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:14:\"attachmentName\";O:8:\"stdClass\":2:{s:11:\"description\";s:177:\"Resource
  name of this attachment. Attachment names have the format:\n<code>beacons/<var>beacon_id</var>/attachments/<var>attachment_id</var></code>.\nLeave
  this empty on creation.\";s:4:\"type\";s:6:\"string\";}s:14:\"creationTimeMs\";O:8:\"stdClass\":3:{s:11:\"description\";s:84:\"The
  UTC time when this attachment was created, in milliseconds since the\nUNIX epoch.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}s:4:\"data\";O:8:\"stdClass\":3:{s:11:\"description\";s:201:\"An
  opaque data container for client-provided data. Must be\n[base64](http://tools.ietf.org/html/rfc4648#section-4)
  encoded in HTTP\nrequests, and will be so encoded (with padding) in responses.\nRequired.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:17:\"maxDistanceMeters\";O:8:\"stdClass\":3:{s:11:\"description\";s:717:\"The
  distance away from the beacon at which this attachment should be\ndelivered to a
  mobile app.\n\nSetting this to a value greater than zero indicates that the app
  should\nbehave as if the beacon is \"seen\" when the mobile device is less than
  this\ndistance away from the beacon.\n\nDifferent attachments on the same beacon
  can have different max distances.\n\nNote that even though this value is expressed
  with fractional meter\nprecision, real-world behavior is likley to be much less
  precise than one\nmeter, due to the nature of current Bluetooth radio technology.\n\nOptional.
  When not set or zero, the attachment should be delivered at the\nbeacon's outer
  limit of detection.\n\nNegative values are invalid and return an error.\";s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:14:\"namespacedType\";O:8:\"stdClass\":2:{s:11:\"description\";s:279:\"Specifies
  what kind of attachment this is. Tells a client how to\ninterpret the `data` field.
  Format is <var>namespace/type</var>. Namespace\nprovides type separation between
  clients. Type describes the type of\n`data`, for use by the client when parsing
  the `data` field.\nRequired.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:10:\"BeaconInfo\";O:8:\"stdClass\":3:{s:11:\"description\";s:143:\"A
  subset of beacon information served via the `beaconinfo.getforobserved`\nmethod,
  which you call when users of your app encounter your beacons.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"advertisedId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/AdvertisedId\";s:11:\"description\";s:32:\"The
  ID advertised by the beacon.\";}s:11:\"attachments\";O:8:\"stdClass\":3:{s:11:\"description\";s:95:\"Attachments
  matching the type(s) requested.\nMay be empty if no attachment types were requested.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/AttachmentInfo\";}s:4:\"type\";s:5:\"array\";}s:10:\"beaconName\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"The
  name under which the beacon is registered.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Date\";O:8:\"stdClass\":3:{s:11:\"description\";s:475:\"Represents
  a whole calendar date, e.g. date of birth. The time of day and\ntime zone are either
  specified elsewhere or are not significant. The date\nis relative to the Proleptic
  Gregorian Calendar. The day may be 0 to\nrepresent a year and month where the day
  is not significant, e.g. credit card\nexpiration date. The year may be 0 to represent
  a month and day independent\nof year, e.g. anniversary date. Related types are google.type.TimeOfDay\nand
  `google.protobuf.Timestamp`.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:3:\"day\";O:8:\"stdClass\":3:{s:11:\"description\";s:134:\"Day
  of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying
  a year/month where the day is not significant.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:5:\"month\";O:8:\"stdClass\":3:{s:11:\"description\";s:79:\"Month
  of year. Must be from 1 to 12, or 0 if specifying a date without a\nmonth.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}s:4:\"year\";O:8:\"stdClass\":3:{s:11:\"description\";s:79:\"Year
  of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:25:\"DeleteAttachmentsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"Response
  for a request to delete attachments.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"numDeleted\";O:8:\"stdClass\":3:{s:11:\"description\";s:44:\"The
  number of attachments that were deleted.\";s:6:\"format\";s:5:\"int32\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:11:\"Diagnostics\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Diagnostics
  for a single beacon.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:6:\"alerts\";O:8:\"stdClass\":3:{s:11:\"description\";s:48:\"An
  unordered list of Alerts that the beacon has.\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"enum\";a:4:{i:0;s:17:\"ALERT_UNSPECIFIED\";i:1;s:14:\"WRONG_LOCATION\";i:2;s:11:\"LOW_BATTERY\";i:3;s:12:\"LOW_ACTIVITY\";}s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:10:\"beaconName\";O:8:\"stdClass\":2:{s:11:\"description\";s:133:\"Resource
  name of the beacon. For Eddystone-EID beacons, this may\nbe the beacon's current
  EID, or the beacon's \"stable\" Eddystone-UID.\";s:4:\"type\";s:6:\"string\";}s:23:\"estimatedLowBatteryDate\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Date\";s:11:\"description\";s:183:\"The
  date when the battery is expected to be low. If the value is missing\nthen there
  is no estimate for when the battery will be low.\nThis value is only an estimate,
  not an exact date.\";}}s:4:\"type\";s:6:\"object\";}s:5:\"Empty\";O:8:\"stdClass\":3:{s:11:\"description\";s:359:\"A
  generic empty message that you can re-use to avoid defining duplicated\nempty messages
  in your APIs. A typical example is to use it as the request\nor the response type
  of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty)
  returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is
  empty JSON object `{}`.\";s:10:\"properties\";O:8:\"stdClass\":0:{}s:4:\"type\";s:6:\"object\";}s:23:\"EphemeralIdRegistration\";O:8:\"stdClass\":3:{s:11:\"description\";s:1274:\"Write-only
  registration parameters for beacons using Eddystone-EID format.\nTwo ways of securely
  registering an Eddystone-EID beacon with the service\nare supported:\n\n1. Perform
  an ECDH key exchange via this API, including a previous call\n   to `GET /v1beta1/eidparams`.
  In this case the fields\n   `beacon_ecdh_public_key` and `service_ecdh_public_key`
  should be\n   populated and `beacon_identity_key` should not be populated. This\n
  \  method ensures that only the two parties in the ECDH key exchange can\n   compute
  the identity key, which becomes a secret between them.\n2. Derive or obtain the
  beacon's identity key via other secure means\n   (perhaps an ECDH key exchange between
  the beacon and a mobile device\n   or any other secure method), and then submit
  the resulting identity key\n   to the service. In this case `beacon_identity_key`
  field should be\n   populated, and neither of `beacon_ecdh_public_key` nor\n   `service_ecdh_public_key`
  fields should be. The security of this method\n   depends on how securely the parties
  involved (in particular the\n   bluetooth client) handle the identity key, and obviously
  on how\n   securely the identity key was generated.\n\nSee [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid)
  at GitHub.\";s:10:\"properties\";O:8:\"stdClass\":6:{s:19:\"beaconEcdhPublicKey\";O:8:\"stdClass\":3:{s:11:\"description\";s:199:\"The
  beacon's public key used for the Elliptic curve Diffie-Hellman\nkey exchange. When
  this field is populated, `service_ecdh_public_key`\nmust also be populated, and
  `beacon_identity_key` must not be.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:17:\"beaconIdentityKey\";O:8:\"stdClass\":3:{s:11:\"description\";s:136:\"The
  private key of the beacon. If this field is populated,\n`beacon_ecdh_public_key`
  and `service_ecdh_public_key` must not be\npopulated.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:17:\"initialClockValue\";O:8:\"stdClass\":3:{s:11:\"description\";s:319:\"The
  initial clock value of the beacon. The beacon's clock must have\nbegun counting
  at this value immediately prior to transmitting this\nvalue to the resolving service.
  Significant delay in transmitting this\nvalue to the service risks registration
  or resolution failures. If a\nvalue is not provided, the default is zero.\";s:6:\"format\";s:6:\"uint64\";s:4:\"type\";s:6:\"string\";}s:10:\"initialEid\";O:8:\"stdClass\":3:{s:11:\"description\";s:327:\"An
  initial ephemeral ID calculated using the clock value submitted as\n`initial_clock_value`,
  and the secret key generated by the\nDiffie-Hellman key exchange using `service_ecdh_public_key`
  and\n`service_ecdh_public_key`. This initial EID value will be used by the\nservice
  to confirm that the key exchange process was successful.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:22:\"rotationPeriodExponent\";O:8:\"stdClass\":3:{s:11:\"description\";s:431:\"Indicates
  the nominal period between each rotation of the beacon's\nephemeral ID. \"Nominal\"
  because the beacon should randomize the\nactual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid)\nfor
  details. This value corresponds to a power-of-two scaler on the\nbeacon's clock:
  when the scaler value is K, the beacon will begin\nbroadcasting a new ephemeral
  ID on average every 2^K seconds.\";s:6:\"format\";s:6:\"uint32\";s:4:\"type\";s:7:\"integer\";}s:20:\"serviceEcdhPublicKey\";O:8:\"stdClass\":3:{s:11:\"description\";s:199:\"The
  service's public key used for the Elliptic curve Diffie-Hellman\nkey exchange. When
  this field is populated, `beacon_ecdh_public_key`\nmust also be populated, and `beacon_identity_key`
  must not be.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:29:\"EphemeralIdRegistrationParams\";O:8:\"stdClass\":3:{s:11:\"description\";s:266:\"Information
  a client needs to provision and register beacons that\nbroadcast Eddystone-EID format
  beacon IDs, using Elliptic curve\nDiffie-Hellman key exchange. See\n[the Eddystone
  specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at
  GitHub.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:25:\"maxRotationPeriodExponent\";O:8:\"stdClass\":3:{s:11:\"description\";s:117:\"Indicates
  the maximum rotation period supported by the service.\nSee EddystoneEidRegistration.rotation_period_exponent\";s:6:\"format\";s:6:\"uint32\";s:4:\"type\";s:7:\"integer\";}s:25:\"minRotationPeriodExponent\";O:8:\"stdClass\":3:{s:11:\"description\";s:117:\"Indicates
  the minimum rotation period supported by the service.\nSee EddystoneEidRegistration.rotation_period_exponent\";s:6:\"format\";s:6:\"uint32\";s:4:\"type\";s:7:\"integer\";}s:20:\"serviceEcdhPublicKey\";O:8:\"stdClass\":3:{s:11:\"description\";s:128:\"The
  beacon service's public key for use by a beacon to derive its\nIdentity Key using
  Elliptic Curve Diffie-Hellman key exchange.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:32:\"GetInfoForObservedBeaconsRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:111:\"Request
  for beacon and attachment information about beacons that\na mobile client has encountered
  \"in the wild\".\";s:10:\"properties\";O:8:\"stdClass\":2:{s:15:\"namespacedTypes\";O:8:\"stdClass\":3:{s:11:\"description\";s:313:\"Specifies
  what kind of attachments to include in the response.\nWhen given, the response will
  include only attachments of the given types.\nWhen empty, no attachments will be
  returned. Must be in the format\n<var>namespace/type</var>. Accepts `*` to specify
  all types in\nall namespaces owned by the client.\nOptional.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:12:\"observations\";O:8:\"stdClass\":3:{s:11:\"description\";s:72:\"The
  beacons that the client has encountered.\nAt least one must be given.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/Observation\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:33:\"GetInfoForObservedBeaconsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:78:\"Information
  about the requested beacons, optionally including attachment\ndata.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"beacons\";O:8:\"stdClass\":3:{s:11:\"description\";s:81:\"Public
  information about beacons.\nMay be empty if the request matched no beacons.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:24:\"#/definitions/BeaconInfo\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:11:\"IndoorLevel\";O:8:\"stdClass\":3:{s:11:\"description\";s:139:\"Indoor
  level, a human-readable string as returned by Google Maps APIs,\nuseful to indicate
  which floor of a building a beacon is located on.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:23:\"The
  name of this level.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:6:\"LatLng\";O:8:\"stdClass\":3:{s:11:\"description\";s:320:\"An
  object representing a latitude/longitude pair. This is expressed as a pair\nof doubles
  representing degrees latitude and degrees longitude. Unless\nspecified otherwise,
  this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>.
  Values must be within normalized ranges.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:8:\"latitude\";O:8:\"stdClass\":3:{s:11:\"description\";s:64:\"The
  latitude in degrees. It must be in the range [-90.0, +90.0].\";s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}s:9:\"longitude\";O:8:\"stdClass\":3:{s:11:\"description\";s:67:\"The
  longitude in degrees. It must be in the range [-180.0, +180.0].\";s:6:\"format\";s:6:\"double\";s:4:\"type\";s:6:\"number\";}}s:4:\"type\";s:6:\"object\";}s:29:\"ListBeaconAttachmentsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:76:\"Response
  to `ListBeaconAttachments` that contains the requested attachments.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"attachments\";O:8:\"stdClass\":3:{s:11:\"description\";s:56:\"The
  attachments that corresponded to the request params.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:30:\"#/definitions/BeaconAttachment\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:19:\"ListBeaconsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:63:\"Response
  that contains list beacon results and pagination help.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"beacons\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"The
  beacons that matched the search criteria.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Beacon\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:114:\"An
  opaque pagination token that the client may provide in their next\nrequest to retrieve
  the next page of results.\";s:4:\"type\";s:6:\"string\";}s:10:\"totalCount\";O:8:\"stdClass\":3:{s:11:\"description\";s:97:\"Estimate
  of the total number of beacons matched by the query. Higher\nvalues may be less
  accurate.\";s:6:\"format\";s:5:\"int64\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:23:\"ListDiagnosticsResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:49:\"Response
  that contains the requested diagnostics.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"diagnostics\";O:8:\"stdClass\":3:{s:11:\"description\";s:43:\"The
  diagnostics matching the given request.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/Diagnostics\";}s:4:\"type\";s:5:\"array\";}s:13:\"nextPageToken\";O:8:\"stdClass\":2:{s:11:\"description\";s:127:\"Token
  that can be used for pagination. Returned only if the\nrequest matches more beacons
  than can be returned in this response.\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:22:\"ListNamespacesResponse\";O:8:\"stdClass\":3:{s:11:\"description\";s:77:\"Response
  to ListNamespacesRequest that contains all the project's namespaces.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"namespaces\";O:8:\"stdClass\":3:{s:11:\"description\";s:56:\"The
  attachments that corresponded to the request params.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/Namespace\";}s:4:\"type\";s:5:\"array\";}}s:4:\"type\";s:6:\"object\";}s:9:\"Namespace\";O:8:\"stdClass\":3:{s:11:\"description\";s:219:\"An
  attachment namespace defines read and write access for all the attachments\ncreated
  under it. Each namespace is globally unique, and owned by one\nproject which is
  the only project that can create attachments under it.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:13:\"namespaceName\";O:8:\"stdClass\":2:{s:11:\"description\";s:112:\"Resource
  name of this namespace. Namespaces names have the format:\n<code>namespaces/<var>namespace</var></code>.\";s:4:\"type\";s:6:\"string\";}s:17:\"servingVisibility\";O:8:\"stdClass\":3:{s:11:\"description\";s:100:\"Specifies
  what clients may receive attachments under this namespace\nvia `beaconinfo.getforobserved`.\";s:4:\"enum\";a:3:{i:0;s:22:\"VISIBILITY_UNSPECIFIED\";i:1;s:8:\"UNLISTED\";i:2;s:6:\"PUBLIC\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:11:\"Observation\";O:8:\"stdClass\":3:{s:11:\"description\";s:36:\"Represents
  one beacon observed once.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:12:\"advertisedId\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/AdvertisedId\";s:11:\"description\";s:242:\"The
  ID advertised by the beacon the client has encountered.\n\nIf the submitted `advertised_id`
  type is Eddystone-EID, then the client\nmust be authorized to resolve the given
  beacon. Otherwise no data will be\nreturned for that beacon.\nRequired.\";}s:9:\"telemetry\";O:8:\"stdClass\":3:{s:11:\"description\";s:193:\"The
  array of telemetry bytes received from the beacon. The server is\nresponsible for
  parsing it. This field may frequently be empty, as\nwith a beacon that transmits
  telemetry only occasionally.\";s:6:\"format\";s:4:\"byte\";s:4:\"type\";s:6:\"string\";}s:11:\"timestampMs\";O:8:\"stdClass\":3:{s:11:\"description\";s:34:\"Time
  when the beacon was observed.\";s:6:\"format\";s:15:\"google-datetime\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}}"
...
