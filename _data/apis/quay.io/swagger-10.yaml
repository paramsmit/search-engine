---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":5:{s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:15:\"support@quay.io\";}s:11:\"description\";s:181:\"This
  API allows you to perform many of the operations required to work with Quay repositories,
  users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.\";s:14:\"termsOfService\";s:19:\"https://quay.io/tos\";s:5:\"title\";s:13:\"Quay
  Frontend\";s:7:\"version\";s:2:\"v1\";}"
host: quay.io
basePath: /
paths:
  /api/v1/app/{client_id}:
    get:
      description: Get information on the specified application.
      operationId: getApplicationInformation
      parameters:
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - organization
    parameters:
    - description: The OAuth client ID
      in: path
      name: client_id
      required: true
      type: string
    x-name: endpoints.api.organization.ApplicationInformation
    x-path: /api/v1/app/{client_id}
    x-tag: organization
  /api/v1/discovery:
    get:
      description: List all of the API endpoints available in the swagger API format.
      operationId: discovery
      parameters:
      - description: Whether to include internal APIs.
        in: query
        name: internal
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - discovery
    x-name: endpoints.api.discovery.DiscoveryResource
    x-path: /api/v1/discovery
    x-tag: discovery
  /api/v1/entities/{prefix}:
    get:
      description: Get a list of entities that match the specified prefix.
      operationId: getMatchingEntities
      parameters:
      - description: ""
        in: path
        name: prefix
        required: true
        type: string
      - description: Whether to include orgs names.
        in: query
        name: includeOrgs
        required: false
        type: boolean
      - description: Whether to include team names.
        in: query
        name: includeTeams
        required: false
        type: boolean
      - description: Namespace to use when querying for org entities.
        in: query
        name: namespace
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - search
    x-name: endpoints.api.search.EntitySearch
    x-path: /api/v1/entities/{prefix}
    x-tag: search
  /api/v1/error/{error_type}:
    get:
      description: Get a detailed description of the error
      operationId: getErrorDescription
      parameters:
      - description: The error code identifying the type of error.
        in: path
        name: error_type
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
          schema:
            $ref: '#/definitions/ApiErrorDescription'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - error
    parameters:
    - description: The error code identifying the type of error.
      in: path
      name: error_type
      required: true
      type: string
    x-name: endpoints.api.error.Error
    x-path: /api/v1/error/{error_type}
    x-tag: error
  /api/v1/find/all:
    get:
      description: Get a list of entities and resources that match the specified query.
      operationId: conductSearch
      parameters:
      - description: The search query.
        in: query
        name: query
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - search
    x-name: endpoints.api.search.ConductSearch
    x-path: /api/v1/find/all
    x-tag: search
  /api/v1/find/repositories:
    get:
      description: Get a list of apps and repositories that match the specified query.
      operationId: conductRepoSearch
      parameters:
      - description: The page.
        in: query
        name: page
        required: false
        type: integer
      - description: The search query.
        in: query
        name: query
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - search
    x-name: endpoints.api.search.ConductRepositorySearch
    x-path: /api/v1/find/repositories
    x-tag: search
  /api/v1/messages:
    get:
      description: Return a super users messages
      operationId: getGlobalMessages
      parameters: []
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - globalmessages
    post:
      description: Create a message
      operationId: createGlobalMessage
      parameters:
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateMessage'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - super:user
      tags:
      - globalmessages
    x-name: endpoints.api.globalmessages.GlobalUserMessages
    x-path: /api/v1/messages
    x-tag: globalmessages
  /api/v1/organization/:
    post:
      description: Create a new organization.
      operationId: createOrganization
      parameters:
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NewOrg'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - organization
    x-name: endpoints.api.organization.OrganizationList
    x-path: /api/v1/organization/
    x-tag: organization
  /api/v1/organization/{orgname}:
    delete:
      description: Deletes the specified organization.
      operationId: deleteAdminedOrganization
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    get:
      description: Get the details for the specified organization
      operationId: getOrganization
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    put:
      description: Change the details for the specified organization.
      operationId: changeOrganizationDetails
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdateOrg'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    x-name: endpoints.api.organization.Organization
    x-path: /api/v1/organization/{orgname}
    x-tag: organization
  /api/v1/organization/{orgname}/aggregatelogs:
    get:
      description: Gets the aggregated logs for the specified organization.
      operationId: getAggregateOrgLogs
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: Username for which to filter logs.
        in: query
        name: performer
        required: false
        type: string
      - description: Latest time to which to get logs. (%m/%d/%Y %Z)
        in: query
        name: endtime
        required: false
        type: string
      - description: Earliest time from which to get logs. (%m/%d/%Y %Z)
        in: query
        name: starttime
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - logs
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    x-name: endpoints.api.logs.OrgAggregateLogs
    x-path: /api/v1/organization/{orgname}/aggregatelogs
    x-tag: logs
  /api/v1/organization/{orgname}/applications:
    get:
      description: List the applications for the specified organization
      operationId: getOrganizationApplications
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    post:
      description: Creates a new application under this organization.
      operationId: createOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NewApp'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    x-name: endpoints.api.organization.OrganizationApplications
    x-path: /api/v1/organization/{orgname}/applications
    x-tag: organization
  /api/v1/organization/{orgname}/applications/{client_id}:
    delete:
      description: Deletes the application under this organization.
      operationId: deleteOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    get:
      description: Retrieves the application with the specified client_id under the
        specified organization
      operationId: getOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The OAuth client ID
      in: path
      name: client_id
      required: true
      type: string
    put:
      description: Updates an application under this organization.
      operationId: updateOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdateApp'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    x-name: endpoints.api.organization.OrganizationApplicationResource
    x-path: /api/v1/organization/{orgname}/applications/{client_id}
    x-tag: organization
  /api/v1/organization/{orgname}/invoices:
    get:
      description: List the invoices for the specified orgnaization.
      operationId: listOrgInvoices
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - billing
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    x-name: endpoints.api.billing.OrganizationInvoiceList
    x-path: /api/v1/organization/{orgname}/invoices
    x-tag: billing
  /api/v1/organization/{orgname}/logs:
    get:
      description: List the logs for the specified organization.
      operationId: listOrgLogs
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The page token for the next page
        in: query
        name: next_page
        required: false
        type: string
      - description: The page number for the logs
        in: query
        name: page
        required: false
        type: integer
      - description: Username for which to filter logs.
        in: query
        name: performer
        required: false
        type: string
      - description: Latest time to which to get logs. (%m/%d/%Y %Z)
        in: query
        name: endtime
        required: false
        type: string
      - description: Earliest time from which to get logs. (%m/%d/%Y %Z)
        in: query
        name: starttime
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - logs
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    x-name: endpoints.api.logs.OrgLogs
    x-path: /api/v1/organization/{orgname}/logs
    x-tag: logs
  /api/v1/organization/{orgname}/members:
    get:
      description: List the human members of the specified organization.
      operationId: getOrganizationMembers
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    x-name: endpoints.api.organization.OrganizationMemberList
    x-path: /api/v1/organization/{orgname}/members
    x-tag: organization
  /api/v1/organization/{orgname}/members/{membername}:
    delete:
      description: Removes a member from an organization, revoking all its repositoryn        priviledges
        and removing it from all teams in the organization.
      operationId: removeOrganizationMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The username of the organization member
        in: path
        name: membername
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    get:
      description: Retrieves the details of a member of the organization.
      operationId: getOrganizationMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The username of the organization member
        in: path
        name: membername
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The username of the organization member
      in: path
      name: membername
      required: true
      type: string
    x-name: endpoints.api.organization.OrganizationMember
    x-path: /api/v1/organization/{orgname}/members/{membername}
    x-tag: organization
  /api/v1/organization/{orgname}/prototypes:
    get:
      description: List the existing prototypes for this organization.
      operationId: getOrganizationPrototypePermissions
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    post:
      description: Create a new permission prototype.
      operationId: createOrganizationPrototypePermission
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NewPrototype'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
    x-name: endpoints.api.prototype.PermissionPrototypeList
    x-path: /api/v1/organization/{orgname}/prototypes
    x-tag: prototype
  /api/v1/organization/{orgname}/prototypes/{prototypeid}:
    delete:
      description: Delete an existing permission prototype.
      operationId: deleteOrganizationPrototypePermission
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The ID of the prototype
        in: path
        name: prototypeid
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The ID of the prototype
      in: path
      name: prototypeid
      required: true
      type: string
    put:
      description: Update the role of an existing permission prototype.
      operationId: updateOrganizationPrototypePermission
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The ID of the prototype
        in: path
        name: prototypeid
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/PrototypeUpdate'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
    x-name: endpoints.api.prototype.PermissionPrototype
    x-path: /api/v1/organization/{orgname}/prototypes/{prototypeid}
    x-tag: prototype
  /api/v1/organization/{orgname}/robots:
    get:
      description: List the organization's robots.
      operationId: getOrgRobots
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: Whether to include repostories and teams in which the robots
          have permission.
        in: query
        name: permissions
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    x-name: endpoints.api.robot.OrgRobotList
    x-path: /api/v1/organization/{orgname}/robots
    x-tag: robot
  /api/v1/organization/{orgname}/robots/{robot_shortname}:
    delete:
      description: Delete an existing organization robot.
      operationId: deleteOrgRobot
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    get:
      description: Returns the organization's robot with the specified name.
      operationId: getOrgRobot
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The short name for the robot, without any user or organization
        prefix
      in: path
      name: robot_shortname
      required: true
      type: string
    put:
      description: Create a new robot in the organization.
      operationId: createOrgRobot
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    x-name: endpoints.api.robot.OrgRobot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}
    x-tag: robot
  /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions:
    get:
      description: Returns the list of repository permissions for the org's robot.
      operationId: getOrgRobotPermissions
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The short name for the robot, without any user or organization
        prefix
      in: path
      name: robot_shortname
      required: true
      type: string
    x-name: endpoints.api.robot.OrgRobotPermissions
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions
    x-tag: robot
  /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate:
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The short name for the robot, without any user or organization
        prefix
      in: path
      name: robot_shortname
      required: true
      type: string
    post:
      description: Regenerates the token for an organization robot.
      operationId: regenerateOrgRobotToken
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    x-name: endpoints.api.robot.RegenerateOrgRobot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate
    x-tag: robot
  /api/v1/organization/{orgname}/team/{teamname}:
    delete:
      description: Delete the specified team.
      operationId: deleteOrganizationTeam
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The name of the team
      in: path
      name: teamname
      required: true
      type: string
    put:
      description: Update the org-wide permission for the specified team.
      operationId: updateOrganizationTeam
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TeamDescription'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    x-name: endpoints.api.team.OrganizationTeam
    x-path: /api/v1/organization/{orgname}/team/{teamname}
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/invite/{email}:
    delete:
      description: Delete an invite of an email address to join a team.
      operationId: deleteTeamMemberEmailInvite
      parameters:
      - description: ""
        in: path
        name: orgname
        required: true
        type: string
      - description: ""
        in: path
        name: email
        required: true
        type: string
      - description: ""
        in: path
        name: teamname
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    put:
      description: Invites an email address to an existing team.
      operationId: inviteTeamMemberEmail
      parameters:
      - description: ""
        in: path
        name: orgname
        required: true
        type: string
      - description: ""
        in: path
        name: email
        required: true
        type: string
      - description: ""
        in: path
        name: teamname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    x-name: endpoints.api.team.InviteTeamMember
    x-path: /api/v1/organization/{orgname}/team/{teamname}/invite/{email}
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/members:
    get:
      description: Retrieve the list of members for the specified team.
      operationId: getOrganizationTeamMembers
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        type: string
      - description: Whether to include pending members
        in: query
        name: includePending
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The name of the team
      in: path
      name: teamname
      required: true
      type: string
    x-name: endpoints.api.team.TeamMemberList
    x-path: /api/v1/organization/{orgname}/team/{teamname}/members
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/members/{membername}:
    delete:
      description: Delete a member of a team. If the user is merely invited to joinn        the
        team, then the invite is removed instead.
      operationId: deleteOrganizationTeamMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The username of the team member
        in: path
        name: membername
        required: true
        type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The username of the team member
      in: path
      name: membername
      required: true
      type: string
    - description: The name of the team
      in: path
      name: teamname
      required: true
      type: string
    put:
      description: Adds or invites a member to an existing team.
      operationId: updateOrganizationTeamMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The username of the team member
        in: path
        name: membername
        required: true
        type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    x-name: endpoints.api.team.TeamMember
    x-path: /api/v1/organization/{orgname}/team/{teamname}/members/{membername}
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/permissions:
    get:
      description: Returns the list of repository permissions for the org's team.
      operationId: getOrganizationTeamPermissions
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - team
    parameters:
    - description: The name of the organization
      in: path
      name: orgname
      required: true
      type: string
    - description: The name of the team
      in: path
      name: teamname
      required: true
      type: string
    x-name: endpoints.api.team.TeamPermissions
    x-path: /api/v1/organization/{orgname}/team/{teamname}/permissions
    x-tag: team
  /api/v1/plans/:
    get:
      description: List the avaialble plans.
      operationId: listPlans
      parameters: []
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - billing
    x-name: endpoints.api.billing.ListPlans
    x-path: /api/v1/plans/
    x-tag: billing
  /api/v1/repository:
    get:
      description: Fetch the list of repositories visible to the current user under
        a variety of situations.
      operationId: listRepos
      parameters:
      - description: The page token for the next page
        in: query
        name: next_page
        required: false
        type: string
      - description: The kind of repositories to return
        in: query
        name: repo_kind
        required: false
        type: string
      - description: Whether to include the repository's popularity metric.
        in: query
        name: popularity
        required: false
        type: boolean
      - description: Whether to include when the repository was last modified.
        in: query
        name: last_modified
        required: false
        type: boolean
      - description: Adds any repositories visible to the user by virtue of being
          public
        in: query
        name: public
        required: false
        type: boolean
      - description: Filters the repositories returned to those starred by the user
        in: query
        name: starred
        required: false
        type: boolean
      - description: Filters the repositories returned to this namespace
        in: query
        name: namespace
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
          schema:
            $ref: '#/definitions/ListRepos'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - repository
    post:
      description: Create a new repository.
      operationId: createRepo
      parameters:
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NewRepo'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:create
      tags:
      - repository
    x-name: endpoints.api.repository.RepositoryList
    x-path: /api/v1/repository
    x-tag: repository
  /api/v1/repository/{repository}:
    delete:
      description: Delete a repository.
      operationId: deleteRepository
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repository
    get:
      description: Fetch the specified repository.
      operationId: getRepo
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Whether to include action statistics
        in: query
        name: includeStats
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
          schema:
            $ref: '#/definitions/GetRepo'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - repository
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    put:
      description: Update the description in the specified repository.
      operationId: updateRepo
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/RepoUpdate'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - repository
    x-name: endpoints.api.repository.Repository
    x-path: /api/v1/repository/{repository}
    x-tag: repository
  /api/v1/repository/{repository}/aggregatelogs:
    get:
      description: Returns the aggregated logs for the specified repository.
      operationId: getAggregateRepoLogs
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Latest time to which to get logs (%m/%d/%Y %Z)
        in: query
        name: endtime
        required: false
        type: string
      - description: Earliest time from which to get logs (%m/%d/%Y %Z)
        in: query
        name: starttime
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - logs
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.logs.RepositoryAggregateLogs
    x-path: /api/v1/repository/{repository}/aggregatelogs
    x-tag: logs
  /api/v1/repository/{repository}/build/:
    get:
      description: Get the list of repository builds.
      operationId: getRepoBuilds
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Returns all builds since the given unix timecode
        in: query
        name: since
        required: false
        type: integer
      - description: The maximum number of builds to return
        in: query
        name: limit
        required: false
        type: integer
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Request that a repository be built and pushed from the specified
        input.
      operationId: requestRepoBuild
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/RepositoryBuildRequest'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - build
    x-name: endpoints.api.build.RepositoryBuildList
    x-path: /api/v1/repository/{repository}/build/
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}:
    delete:
      description: Cancels a repository build.
      operationId: cancelRepoBuild
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - build
    get:
      description: Returns information about a build.
      operationId: getRepoBuild
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    parameters:
    - description: The UUID of the build
      in: path
      name: build_uuid
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.build.RepositoryBuildResource
    x-path: /api/v1/repository/{repository}/build/{build_uuid}
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}/logs:
    get:
      description: Return the build logs for the build specified by the build uuid.
      operationId: getRepoBuildLogs
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    parameters:
    - description: The UUID of the build
      in: path
      name: build_uuid
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.build.RepositoryBuildLogs
    x-path: /api/v1/repository/{repository}/build/{build_uuid}/logs
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}/status:
    get:
      description: Return the status for the builds specified by the build uuids.
      operationId: getRepoBuildStatus
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    parameters:
    - description: The UUID of the build
      in: path
      name: build_uuid
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.build.RepositoryBuildStatus
    x-path: /api/v1/repository/{repository}/build/{build_uuid}/status
    x-tag: build
  /api/v1/repository/{repository}/changetrust:
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Change the visibility of a repository.
      operationId: changeRepoTrust
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ChangeRepoTrust'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repository
    x-name: endpoints.api.repository.RepositoryTrust
    x-path: /api/v1/repository/{repository}/changetrust
    x-tag: repository
  /api/v1/repository/{repository}/changevisibility:
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Change the visibility of a repository.
      operationId: changeRepoVisibility
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ChangeVisibility'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repository
    x-name: endpoints.api.repository.RepositoryVisibility
    x-path: /api/v1/repository/{repository}/changevisibility
    x-tag: repository
  /api/v1/repository/{repository}/image/:
    get:
      description: List the images for the specified repository.
      operationId: listRepositoryImages
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - image
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.image.RepositoryImageList
    x-path: /api/v1/repository/{repository}/image/
    x-tag: image
  /api/v1/repository/{repository}/image/{image_id}:
    get:
      description: Get the information available for the specified image.
      operationId: getImage
      parameters:
      - description: The Docker image ID
        in: path
        name: image_id
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - image
    parameters:
    - description: The Docker image ID
      in: path
      name: image_id
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.image.RepositoryImage
    x-path: /api/v1/repository/{repository}/image/{image_id}
    x-tag: image
  /api/v1/repository/{repository}/image/{imageid}/security:
    get:
      description: Fetches the features and vulnerabilities (if any) for a repository
        image.
      operationId: getRepoImageSecurity
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: The image ID
        in: path
        name: imageid
        required: true
        type: string
      - description: Include vulnerabilities informations
        in: query
        name: vulnerabilities
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
          schema:
            $ref: '#/definitions/ImageSecurity'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - secscan
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The image ID
      in: path
      name: imageid
      required: true
      type: string
    x-name: endpoints.api.secscan.RepositoryImageSecurity
    x-path: /api/v1/repository/{repository}/image/{imageid}/security
    x-tag: secscan
  /api/v1/repository/{repository}/logs:
    get:
      description: List the logs for the specified repository.
      operationId: listRepoLogs
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: The page token for the next page
        in: query
        name: next_page
        required: false
        type: string
      - description: The page number for the logs
        in: query
        name: page
        required: false
        type: integer
      - description: Latest time to which to get logs (%m/%d/%Y %Z)
        in: query
        name: endtime
        required: false
        type: string
      - description: Earliest time from which to get logs (%m/%d/%Y %Z)
        in: query
        name: starttime
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - logs
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.logs.RepositoryLogs
    x-path: /api/v1/repository/{repository}/logs
    x-tag: logs
  /api/v1/repository/{repository}/manifest/{manifestref}/labels:
    get:
      description: ""
      operationId: listManifestLabels
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: If specified, only labels matching the given prefix will be returned
        in: query
        name: filter
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - manifest
    parameters:
    - description: The digest of the manifest
      in: path
      name: manifestref
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Adds a new label into the tag manifest.
      operationId: addManifestLabel
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/AddLabel'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - manifest
    x-name: endpoints.api.manifest.RepositoryManifestLabels
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/labels
    x-tag: manifest
  /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}:
    delete:
      description: Deletes an existing label from a manifest.
      operationId: deleteManifestLabel
      parameters:
      - description: The ID of the label
        in: path
        name: labelid
        required: true
        type: string
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - manifest
    get:
      description: Retrieves the label with the specific ID under the manifest.
      operationId: getManifestLabel
      parameters:
      - description: The ID of the label
        in: path
        name: labelid
        required: true
        type: string
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - manifest
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The digest of the manifest
      in: path
      name: manifestref
      required: true
      type: string
    - description: The ID of the label
      in: path
      name: labelid
      required: true
      type: string
    x-name: endpoints.api.manifest.ManageRepositoryManifestLabel
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}
    x-tag: manifest
  /api/v1/repository/{repository}/manifest/{manifestref}/security:
    get:
      description: ""
      operationId: getRepoManifestSecurity
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Include vulnerabilities informations
        in: query
        name: vulnerabilities
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - secscan
    parameters:
    - description: The digest of the manifest
      in: path
      name: manifestref
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.secscan.RepositoryManifestSecurity
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/security
    x-tag: secscan
  /api/v1/repository/{repository}/notification/:
    get:
      description: List the notifications for the specified repository.
      operationId: listRepoNotifications
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: ""
      operationId: createRepoNotification
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NotificationCreateRequest'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    x-name: endpoints.api.repositorynotification.RepositoryNotificationList
    x-path: /api/v1/repository/{repository}/notification/
    x-tag: repositorynotification
  /api/v1/repository/{repository}/notification/{uuid}:
    delete:
      description: Deletes the specified notification.
      operationId: deleteRepoNotification
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    get:
      description: Get information for the specified notification.
      operationId: getRepoNotification
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    parameters:
    - description: The UUID of the notification
      in: path
      name: uuid
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Resets repository notification to 0 failures.
      operationId: resetRepositoryNotificationFailures
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    x-name: endpoints.api.repositorynotification.RepositoryNotification
    x-path: /api/v1/repository/{repository}/notification/{uuid}
    x-tag: repositorynotification
  /api/v1/repository/{repository}/notification/{uuid}/test:
    parameters:
    - description: The UUID of the notification
      in: path
      name: uuid
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Queues a test notification for this repository.
      operationId: testRepoNotification
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    x-name: endpoints.api.repositorynotification.TestRepositoryNotification
    x-path: /api/v1/repository/{repository}/notification/{uuid}/test
    x-tag: repositorynotification
  /api/v1/repository/{repository}/permissions/team/:
    get:
      description: List all team permission.
      operationId: listRepoTeamPermissions
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.permission.RepositoryTeamPermissionList
    x-path: /api/v1/repository/{repository}/permissions/team/
    x-tag: permission
  /api/v1/repository/{repository}/permissions/team/{teamname}:
    delete:
      description: Delete the permission for the specified team.
      operationId: deleteTeamPermissions
      parameters:
      - description: The name of the team to which the permission applies
        in: path
        name: teamname
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    get:
      description: Fetch the permission for the specified team.
      operationId: getTeamPermissions
      parameters:
      - description: The name of the team to which the permission applies
        in: path
        name: teamname
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The name of the team to which the permission applies
      in: path
      name: teamname
      required: true
      type: string
    put:
      description: Update the existing team permission.
      operationId: changeTeamPermissions
      parameters:
      - description: The name of the team to which the permission applies
        in: path
        name: teamname
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TeamPermission'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    x-name: endpoints.api.permission.RepositoryTeamPermission
    x-path: /api/v1/repository/{repository}/permissions/team/{teamname}
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/:
    get:
      description: List all user permissions.
      operationId: listRepoUserPermissions
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.permission.RepositoryUserPermissionList
    x-path: /api/v1/repository/{repository}/permissions/user/
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/{username}:
    delete:
      description: Delete the permission for the user.
      operationId: deleteUserPermissions
      parameters:
      - description: The username of the user to which the permission applies
        in: path
        name: username
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    get:
      description: Get the permission for the specified user.
      operationId: getUserPermissions
      parameters:
      - description: The username of the user to which the permission applies
        in: path
        name: username
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    parameters:
    - description: The username of the user to which the permission applies
      in: path
      name: username
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    put:
      description: Update the perimssions for an existing repository.
      operationId: changeUserPermissions
      parameters:
      - description: The username of the user to which the permission applies
        in: path
        name: username
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserPermission'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    x-name: endpoints.api.permission.RepositoryUserPermission
    x-path: /api/v1/repository/{repository}/permissions/user/{username}
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/{username}/transitive:
    get:
      description: Get the fetch the permission for the specified user.
      operationId: getUserTransitivePermission
      parameters:
      - description: The username of the user to which the permissions apply
        in: path
        name: username
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    parameters:
    - description: The username of the user to which the permissions apply
      in: path
      name: username
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.permission.RepositoryUserTransitivePermission
    x-path: /api/v1/repository/{repository}/permissions/user/{username}/transitive
    x-tag: permission
  /api/v1/repository/{repository}/signatures:
    get:
      description: Fetches the list of signed tags for the repository.
      operationId: getRepoSignatures
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - signing
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.signing.RepositorySignatures
    x-path: /api/v1/repository/{repository}/signatures
    x-tag: signing
  /api/v1/repository/{repository}/tag/:
    get:
      description: ""
      operationId: listRepoTags
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Page index for the results. Default 1.
        in: query
        name: page
        required: false
        type: integer
      - description: Limit to the number of results to return per page. Max 100.
        in: query
        name: limit
        required: false
        type: integer
      - description: Filters the tags to the specific tag.
        in: query
        name: specificTag
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
          schema:
            $ref: '#/definitions/ListRepoTags'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - tag
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.tag.ListRepositoryTags
    x-path: /api/v1/repository/{repository}/tag/
    x-tag: tag
  /api/v1/repository/{repository}/tag/{tag}:
    delete:
      description: Delete the specified repository tag.
      operationId: deleteFullTag
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - tag
    parameters:
    - description: The name of the tag
      in: path
      name: tag
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    put:
      description: Change which image a tag points to or create a new tag.
      operationId: changeTag
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ChangeTag'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - tag
    x-name: endpoints.api.tag.RepositoryTag
    x-path: /api/v1/repository/{repository}/tag/{tag}
    x-tag: tag
  /api/v1/repository/{repository}/tag/{tag}/images:
    get:
      description: List the images for the specified repository tag.
      operationId: listTagImages
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: If specified, only images wholely owned by this tag are returned.
        in: query
        name: owned
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - tag
    parameters:
    - description: The name of the tag
      in: path
      name: tag
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.tag.RepositoryTagImages
    x-path: /api/v1/repository/{repository}/tag/{tag}/images
    x-tag: tag
  /api/v1/repository/{repository}/tag/{tag}/restore:
    parameters:
    - description: The name of the tag
      in: path
      name: tag
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Restores a repository tag back to a previous image in the repository.
      operationId: restoreTag
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/RestoreTag'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - tag
    x-name: endpoints.api.tag.RestoreTag
    x-path: /api/v1/repository/{repository}/tag/{tag}/restore
    x-tag: tag
  /api/v1/repository/{repository}/tokens/:
    get:
      description: List the tokens for the specified repository.
      operationId: listRepoTokens
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    post:
      description: Create a new repository token.
      operationId: createToken
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NewToken'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    x-name: endpoints.api.repotoken.RepositoryTokenList
    x-path: /api/v1/repository/{repository}/tokens/
    x-tag: repotoken
  /api/v1/repository/{repository}/tokens/{code}:
    delete:
      description: Delete the repository token.
      operationId: deleteToken
      parameters:
      - description: The token code
        in: path
        name: code
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    get:
      description: Fetch the specified repository token information.
      operationId: getTokens
      parameters:
      - description: The token code
        in: path
        name: code
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    parameters:
    - description: The token code
      in: path
      name: code
      required: true
      type: string
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    put:
      description: Update the permissions for the specified repository token.
      operationId: changeToken
      parameters:
      - description: The token code
        in: path
        name: code
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TokenPermission'
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    x-name: endpoints.api.repotoken.RepositoryToken
    x-path: /api/v1/repository/{repository}/tokens/{code}
    x-tag: repotoken
  /api/v1/repository/{repository}/trigger/:
    get:
      description: List the triggers for the specified repository.
      operationId: listBuildTriggers
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.trigger.BuildTriggerList
    x-path: /api/v1/repository/{repository}/trigger/
    x-tag: trigger
  /api/v1/repository/{repository}/trigger/{trigger_uuid}:
    delete:
      description: Delete the specified build trigger.
      operationId: deleteBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    get:
      description: Get information for the specified build trigger.
      operationId: getBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The UUID of the build trigger
      in: path
      name: trigger_uuid
      required: true
      type: string
    x-name: endpoints.api.trigger.BuildTrigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}
    x-tag: trigger
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate:
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The UUID of the build trigger
      in: path
      name: trigger_uuid
      required: true
      type: string
    post:
      description: Activate the specified build trigger.
      operationId: activateBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/BuildTriggerActivateRequest'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    x-name: endpoints.api.trigger.BuildTriggerActivate
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate
    x-tag: trigger
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds:
    get:
      description: List the builds started by the specified trigger.
      operationId: listTriggerRecentBuilds
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: The maximum number of builds to return
        in: query
        name: limit
        required: false
        type: integer
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The UUID of the build trigger
      in: path
      name: trigger_uuid
      required: true
      type: string
    x-name: endpoints.api.trigger.TriggerBuildList
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds
    x-tag: trigger
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/start:
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    - description: The UUID of the build trigger
      in: path
      name: trigger_uuid
      required: true
      type: string
    post:
      description: Manually start a build from the specified trigger.
      operationId: manuallyStartBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/RunParameters'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    x-name: endpoints.api.trigger.ActivateBuildTrigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/start
    x-tag: trigger
  /api/v1/user/:
    get:
      description: Get user information for the authenticated user.
      operationId: getLoggedInUser
      parameters: []
      responses:
        200:
          description: Successful invocation
          schema:
            $ref: '#/definitions/UserView'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:read
      tags:
      - user
    x-name: endpoints.api.user.User
    x-path: /api/v1/user/
    x-tag: user
  /api/v1/user/aggregatelogs:
    get:
      description: Returns the aggregated logs for the current user.
      operationId: getAggregateUserLogs
      parameters:
      - description: Username for which to filter logs.
        in: query
        name: performer
        required: false
        type: string
      - description: Latest time to which to get logs. (%m/%d/%Y %Z)
        in: query
        name: endtime
        required: false
        type: string
      - description: Earliest time from which to get logs. (%m/%d/%Y %Z)
        in: query
        name: starttime
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - logs
    x-name: endpoints.api.logs.UserAggregateLogs
    x-path: /api/v1/user/aggregatelogs
    x-tag: logs
  /api/v1/user/logs:
    get:
      description: List the logs for the current user.
      operationId: listUserLogs
      parameters:
      - description: The page token for the next page
        in: query
        name: next_page
        required: false
        type: string
      - description: Username for which to filter logs.
        in: query
        name: performer
        required: false
        type: string
      - description: Latest time to which to get logs. (%m/%d/%Y %Z)
        in: query
        name: endtime
        required: false
        type: string
      - description: Earliest time from which to get logs. (%m/%d/%Y %Z)
        in: query
        name: starttime
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - logs
    x-name: endpoints.api.logs.UserLogs
    x-path: /api/v1/user/logs
    x-tag: logs
  /api/v1/user/robots:
    get:
      description: List the available robots for the user.
      operationId: getUserRobots
      parameters:
      - description: Whether to include repositories and teams in which the robots
          have permission.
        in: query
        name: permissions
        required: false
        type: boolean
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.UserRobotList
    x-path: /api/v1/user/robots
    x-tag: robot
  /api/v1/user/robots/{robot_shortname}:
    delete:
      description: Delete an existing robot.
      operationId: deleteUserRobot
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    get:
      description: Returns the user's robot with the specified name.
      operationId: getUserRobot
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    parameters:
    - description: The short name for the robot, without any user or organization
        prefix
      in: path
      name: robot_shortname
      required: true
      type: string
    put:
      description: Create a new user robot with the specified name.
      operationId: createUserRobot
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.UserRobot
    x-path: /api/v1/user/robots/{robot_shortname}
    x-tag: robot
  /api/v1/user/robots/{robot_shortname}/permissions:
    get:
      description: Returns the list of repository permissions for the user's robot.
      operationId: getUserRobotPermissions
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    parameters:
    - description: The short name for the robot, without any user or organization
        prefix
      in: path
      name: robot_shortname
      required: true
      type: string
    x-name: endpoints.api.robot.UserRobotPermissions
    x-path: /api/v1/user/robots/{robot_shortname}/permissions
    x-tag: robot
  /api/v1/user/robots/{robot_shortname}/regenerate:
    parameters:
    - description: The short name for the robot, without any user or organization
        prefix
      in: path
      name: robot_shortname
      required: true
      type: string
    post:
      description: Regenerates the token for a user's robot.
      operationId: regenerateUserRobotToken
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        type: string
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.RegenerateUserRobot
    x-path: /api/v1/user/robots/{robot_shortname}/regenerate
    x-tag: robot
  /api/v1/user/starred:
    get:
      description: List all starred repositories.
      operationId: listStarredRepos
      parameters:
      - description: The page token for the next page
        in: query
        name: next_page
        required: false
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - user
    post:
      description: Star a repository.
      operationId: createStar
      parameters:
      - description: Request body contents.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NewStarredRepository'
      responses:
        201:
          description: Successful creation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - user
    x-name: endpoints.api.user.StarredRepositoryList
    x-path: /api/v1/user/starred
    x-tag: user
  /api/v1/user/starred/{repository}:
    delete:
      description: Removes a star from a repository.
      operationId: deleteStar
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        type: string
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - user
    parameters:
    - description: The full path of the repository. e.g. namespace/name
      in: path
      name: repository
      required: true
      type: string
    x-name: endpoints.api.user.StarredRepository
    x-path: /api/v1/user/starred/{repository}
    x-tag: user
  /api/v1/users/{username}:
    get:
      description: Get user information for the specified user.
      operationId: getUserInformation
      parameters:
      - description: ""
        in: path
        name: username
        required: true
        type: string
      responses:
        200:
          description: Successful invocation
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ApiError'
        401:
          description: Session required
          schema:
            $ref: '#/definitions/ApiError'
        403:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/ApiError'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/ApiError'
      tags:
      - user
    x-name: endpoints.api.user.Users
    x-path: /api/v1/users/{username}
    x-tag: user
  /userfiles/{file_id}:
    x-name: data.userfiles.UserfilesHandlers
    x-path: /userfiles/{file_id}
    x-tag: userfiles
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":33:{s:8:\"AddLabel\";O:8:\"stdClass\":4:{s:11:\"description\";s:26:\"Adds
  a label to a manifest\";s:10:\"properties\";O:8:\"stdClass\":3:{s:3:\"key\";O:8:\"stdClass\":2:{s:11:\"description\";s:21:\"The
  key for the label\";s:4:\"type\";s:6:\"string\";}s:10:\"media_type\";O:8:\"stdClass\":3:{s:11:\"description\";s:29:\"The
  media type for this label\";s:4:\"enum\";a:2:{i:0;s:10:\"text/plain\";i:1;s:16:\"application/json\";}s:4:\"type\";s:6:\"string\";}s:5:\"value\";O:8:\"stdClass\":2:{s:11:\"description\";s:23:\"The
  value for the label\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:3:\"key\";i:1;s:5:\"value\";i:2;s:10:\"media_type\";}s:4:\"type\";s:6:\"object\";}s:8:\"ApiError\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":6:{s:6:\"detail\";O:8:\"stdClass\":2:{s:11:\"description\";s:49:\"Details
  about the specific instance of the error.\";s:4:\"type\";s:6:\"string\";}s:13:\"error_message\";O:8:\"stdClass\":2:{s:11:\"description\";s:28:\"Deprecated;
  alias for detail\";s:4:\"type\";s:6:\"string\";}s:10:\"error_type\";O:8:\"stdClass\":2:{s:11:\"description\";s:28:\"Deprecated;
  alias for detail\";s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":2:{s:11:\"description\";s:28:\"Status
  code of the response.\";s:4:\"type\";s:7:\"integer\";}s:5:\"title\";O:8:\"stdClass\":2:{s:11:\"description\";s:48:\"Unique
  error code to identify the type of error.\";s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":2:{s:11:\"description\";s:35:\"Reference
  to the type of the error.\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:6:\"status\";i:1;s:4:\"type\";i:2;s:5:\"title\";}s:4:\"type\";s:6:\"object\";}s:19:\"ApiErrorDescription\";O:8:\"stdClass\":4:{s:11:\"description\";s:23:\"Description
  of an error\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:84:\"A
  more detailed description of the error that may include help for fixing the issue.\";s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":3:{s:11:\"description\";s:75:\"The
  title of the error. Can be used to uniquely identify the kind of error.\";s:4:\"enum\";a:10:{i:0;s:16:\"downstream_issue\";i:1;s:15:\"exceeds_license\";i:2;s:13:\"expired_token\";i:3;s:24:\"external_service_timeout\";i:4;s:20:\"fresh_login_required\";i:5;s:18:\"insufficient_scope\";i:6;s:15:\"invalid_request\";i:7;s:16:\"invalid_response\";i:8;s:13:\"invalid_token\";i:9;s:9:\"not_found\";}s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":2:{s:11:\"description\";s:38:\"A
  reference to the error type resource\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:4:\"type\";i:1;s:11:\"description\";i:2;s:5:\"title\";}s:4:\"type\";s:6:\"object\";}s:27:\"BuildTriggerActivateRequest\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"config\";O:8:\"stdClass\":2:{s:11:\"description\";s:15:\"Arbitrary
  json.\";s:4:\"type\";s:6:\"object\";}s:10:\"pull_robot\";O:8:\"stdClass\":2:{s:11:\"description\";s:55:\"The
  name of the robot that will be used to pull images.\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:6:\"config\";}s:4:\"type\";s:6:\"object\";}s:15:\"ChangeRepoTrust\";O:8:\"stdClass\":4:{s:11:\"description\";s:45:\"Change
  the trust settings for the repository.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:13:\"trust_enabled\";O:8:\"stdClass\":2:{s:11:\"description\";s:53:\"Whether
  or not signing is enabled for the repository.\";s:4:\"type\";s:7:\"boolean\";}}s:8:\"required\";a:1:{i:0;s:13:\"trust_enabled\";}s:4:\"type\";s:6:\"object\";}s:9:\"ChangeTag\";O:8:\"stdClass\":3:{s:11:\"description\";s:31:\"Makes
  changes to a specific tag\";s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"expiration\";O:8:\"stdClass\":2:{s:11:\"description\";s:43:\"(If
  specified) The expiration for the image\";s:4:\"type\";a:2:{i:0;s:6:\"number\";i:1;s:4:\"null\";}}s:5:\"image\";O:8:\"stdClass\":2:{s:11:\"description\";s:61:\"(If
  specified) Image identifier to which the tag should point\";s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}}}s:4:\"type\";s:6:\"object\";}s:16:\"ChangeVisibility\";O:8:\"stdClass\":4:{s:11:\"description\";s:41:\"Change
  the visibility for the repository.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"visibility\";O:8:\"stdClass\":3:{s:11:\"description\";s:47:\"Visibility
  which the repository will start with\";s:4:\"enum\";a:2:{i:0;s:6:\"public\";i:1;s:7:\"private\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:10:\"visibility\";}s:4:\"type\";s:6:\"object\";}s:13:\"CreateMessage\";O:8:\"stdClass\":4:{s:11:\"description\";s:20:\"Create
  a new message\";s:2:\"id\";s:13:\"CreateMessage\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"message\";O:8:\"stdClass\":4:{s:11:\"description\";s:16:\"A
  single message\";s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"content\";O:8:\"stdClass\":2:{s:11:\"description\";s:18:\"The
  actual message\";s:4:\"type\";s:6:\"string\";}s:10:\"media_type\";O:8:\"stdClass\":3:{s:11:\"description\";s:29:\"The
  media type of the message\";s:4:\"enum\";a:2:{i:0;s:10:\"text/plain\";i:1;s:13:\"text/markdown\";}s:4:\"type\";s:6:\"string\";}s:8:\"severity\";O:8:\"stdClass\":3:{s:11:\"description\";s:27:\"The
  severity of the message\";s:4:\"enum\";a:3:{i:0;s:4:\"info\";i:1;s:7:\"warning\";i:2;s:5:\"error\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:7:\"content\";i:1;s:10:\"media_type\";i:2;s:8:\"severity\";}s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:7:\"GetRepo\";O:8:\"stdClass\":3:{s:11:\"description\";s:38:\"Response
  body of a successful getRepo.\";s:10:\"properties\";O:8:\"stdClass\":13:{s:9:\"can_admin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"can_write\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"is_organization\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:9:\"is_public\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"is_starred\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"status_token\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:16:\"tag_expiration_s\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"tags\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:20:\"additionalProperties\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"image_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:14:\"last_modififed\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"manifest_digest\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"size\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}}s:13:\"trust_enabled\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}s:4:\"type\";s:6:\"object\";}s:13:\"ImageSecurity\";O:8:\"stdClass\":3:{s:11:\"description\";s:32:\"Response
  body of a successful v.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"data\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:5:\"Layer\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"Features\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:7:\"AddedBy\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"NamespaceName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"Version\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"VersionFormat\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"Vulnerabilities\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:7:\"FixedBy\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"Link\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Metadata\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"NVD\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"CVSSv2\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"Score\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:7:\"Vectors\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}}}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"NamespaceName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"Severity\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}}}s:16:\"IndexedByVersion\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"Name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"NamespaceName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"ParentName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}}s:4:\"type\";s:6:\"object\";}s:9:\"ListRepos\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Response
  body of a successful listRepos.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"repositories\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:4:\"kind\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_public\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:10:\"is_starred\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}s:4:\"type\";s:6:\"object\";}s:12:\"ListRepoTags\";O:8:\"stdClass\":3:{s:11:\"description\";s:43:\"Response
  body of a successful listRepoTags.\";s:10:\"properties\";O:8:\"stdClass\":3:{s:14:\"has_additional\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"page\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"tags\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"reversion\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:15:\"manifest_digest\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:15:\"docker_image_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}s:4:\"type\";s:6:\"object\";}s:6:\"NewApp\";O:8:\"stdClass\":4:{s:11:\"description\";s:46:\"Description
  of a new organization application.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:15:\"application_uri\";O:8:\"stdClass\":2:{s:11:\"description\";s:38:\"The
  URI for the application's homepage\";s:4:\"type\";s:6:\"string\";}s:12:\"avatar_email\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"The
  e-mail address of the avatar to use for the application\";s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:50:\"The
  human-readable description for the application\";s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:27:\"The
  name of the application\";s:4:\"type\";s:6:\"string\";}s:12:\"redirect_uri\";O:8:\"stdClass\":2:{s:11:\"description\";s:44:\"The
  URI for the application's OAuth redirect\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"name\";}s:4:\"type\";s:6:\"object\";}s:6:\"NewOrg\";O:8:\"stdClass\":4:{s:11:\"description\";s:34:\"Description
  of a new organization.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":2:{s:11:\"description\";s:26:\"Organization
  contact email\";s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:21:\"Organization
  username\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"name\";}s:4:\"type\";s:6:\"object\";}s:12:\"NewPrototype\";O:8:\"stdClass\":4:{s:11:\"description\";s:30:\"Description
  of a new prototype\";s:10:\"properties\";O:8:\"stdClass\":3:{s:15:\"activating_user\";O:8:\"stdClass\":4:{s:11:\"description\";s:54:\"Repository
  creating user to whom the rule should apply\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:36:\"The
  username for the activating_user\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"name\";}s:4:\"type\";s:6:\"object\";}s:8:\"delegate\";O:8:\"stdClass\":4:{s:11:\"description\";s:66:\"Information
  about the user or team to which the rule grants access\";s:10:\"properties\";O:8:\"stdClass\":2:{s:4:\"kind\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"Whether
  the delegate is a user or a team\";s:4:\"enum\";a:2:{i:0;s:4:\"user\";i:1;s:4:\"team\";}s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:38:\"The
  name for the delegate team or user\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:4:\"name\";i:1;s:4:\"kind\";}s:4:\"type\";s:6:\"object\";}s:4:\"role\";O:8:\"stdClass\":3:{s:11:\"description\";s:43:\"Role
  that should be applied to the delegate\";s:4:\"enum\";a:3:{i:0;s:4:\"read\";i:1;s:5:\"write\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:4:\"role\";i:1;s:8:\"delegate\";}s:4:\"type\";s:6:\"object\";}s:7:\"NewRepo\";O:8:\"stdClass\":4:{s:11:\"description\";s:31:\"Description
  of a new repository\";s:10:\"properties\";O:8:\"stdClass\":5:{s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:47:\"Markdown
  encoded description for the repository\";s:4:\"type\";s:6:\"string\";}s:9:\"namespace\";O:8:\"stdClass\":2:{s:11:\"description\";s:99:\"Namespace
  in which the repository should be created. If omitted, the username of the caller
  is used\";s:4:\"type\";s:6:\"string\";}s:9:\"repo_kind\";O:8:\"stdClass\":3:{s:11:\"description\";s:22:\"The
  kind of repository\";s:4:\"enum\";a:2:{i:0;s:5:\"image\";i:1;s:11:\"application\";}s:4:\"type\";s:6:\"string\";}s:10:\"repository\";O:8:\"stdClass\":2:{s:11:\"description\";s:15:\"Repository
  name\";s:4:\"type\";s:6:\"string\";}s:10:\"visibility\";O:8:\"stdClass\":3:{s:11:\"description\";s:47:\"Visibility
  which the repository will start with\";s:4:\"enum\";a:2:{i:0;s:6:\"public\";i:1;s:7:\"private\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:10:\"repository\";i:1;s:10:\"visibility\";i:2;s:11:\"description\";}s:4:\"type\";s:6:\"object\";}s:20:\"NewStarredRepository\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"namespace\";O:8:\"stdClass\":2:{s:11:\"description\";s:41:\"Namespace
  in which the repository belongs\";s:4:\"type\";s:6:\"string\";}s:10:\"repository\";O:8:\"stdClass\":2:{s:11:\"description\";s:15:\"Repository
  name\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:9:\"namespace\";i:1;s:10:\"repository\";}s:4:\"type\";s:6:\"object\";}s:8:\"NewToken\";O:8:\"stdClass\":4:{s:11:\"description\";s:27:\"Description
  of a new token.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"friendlyName\";O:8:\"stdClass\":2:{s:11:\"description\";s:40:\"Friendly
  name to help identify the token\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:12:\"friendlyName\";}s:4:\"type\";s:6:\"object\";}s:7:\"NewUser\";O:8:\"stdClass\":4:{s:11:\"description\";s:46:\"Fields
  which must be specified for a new user.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:5:\"email\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"The
  user's email address\";s:4:\"type\";s:6:\"string\";}s:11:\"invite_code\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"The
  optional invite code\";s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"The
  user's password\";s:4:\"type\";s:6:\"string\";}s:18:\"recaptcha_response\";O:8:\"stdClass\":2:{s:11:\"description\";s:62:\"The
  (may be disabled) recaptcha response code for verification\";s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"The
  user's username\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:8:\"username\";i:1;s:8:\"password\";}s:4:\"type\";s:6:\"object\";}s:25:\"NotificationCreateRequest\";O:8:\"stdClass\":4:{s:11:\"description\";s:55:\"Information
  for creating a notification on a repository\";s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"config\";O:8:\"stdClass\":2:{s:11:\"description\";s:63:\"JSON
  config information for the specific method of notification\";s:4:\"type\";s:6:\"object\";}s:5:\"event\";O:8:\"stdClass\":2:{s:11:\"description\";s:48:\"The
  event on which the notification will respond\";s:4:\"type\";s:6:\"string\";}s:11:\"eventConfig\";O:8:\"stdClass\":2:{s:11:\"description\";s:62:\"JSON
  config information for the specific event of notification\";s:4:\"type\";s:6:\"object\";}s:6:\"method\";O:8:\"stdClass\":2:{s:11:\"description\";s:58:\"The
  method of notification (such as email or web callback)\";s:4:\"type\";s:6:\"string\";}s:5:\"title\";O:8:\"stdClass\":2:{s:11:\"description\";s:44:\"The
  human-readable title of the notification\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:4:{i:0;s:5:\"event\";i:1;s:6:\"method\";i:2;s:6:\"config\";i:3;s:11:\"eventConfig\";}s:4:\"type\";s:6:\"object\";}s:15:\"PrototypeUpdate\";O:8:\"stdClass\":4:{s:11:\"description\";s:39:\"Description
  of a the new prototype role\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"role\";O:8:\"stdClass\":3:{s:11:\"description\";s:45:\"Role
  that should be applied to the permission\";s:4:\"enum\";a:3:{i:0;s:4:\"read\";i:1;s:5:\"write\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"role\";}s:4:\"type\";s:6:\"object\";}s:10:\"RepoUpdate\";O:8:\"stdClass\":4:{s:11:\"description\";s:44:\"Fields
  which can be updated in a repository.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:47:\"Markdown
  encoded description for the repository\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:11:\"description\";}s:4:\"type\";s:6:\"object\";}s:22:\"RepositoryBuildRequest\";O:8:\"stdClass\":3:{s:11:\"description\";s:38:\"Description
  of a new repository build.\";s:10:\"properties\";O:8:\"stdClass\":7:{s:11:\"archive_url\";O:8:\"stdClass\":2:{s:11:\"description\";s:67:\"The
  URL of the .tar.gz to build. Must start with \"http\" or \"https\".\";s:4:\"type\";s:6:\"string\";}s:7:\"context\";O:8:\"stdClass\":2:{s:11:\"description\";s:57:\"Pass
  in the context for the dockerfile. This is optional.\";s:4:\"type\";s:6:\"string\";}s:11:\"docker_tags\";O:8:\"stdClass\":5:{s:11:\"description\";s:87:\"The
  tags to which the built images will be pushed. If none specified, \"latest\" is
  used.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"minItems\";i:1;s:4:\"type\";s:5:\"array\";s:11:\"uniqueItems\";b:1;}s:15:\"dockerfile_path\";O:8:\"stdClass\":2:{s:11:\"description\";s:64:\"Path
  to a dockerfile. You can only specify this or subdirectory.\";s:4:\"type\";s:6:\"string\";}s:7:\"file_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:63:\"The
  file id that was generated when the build spec was uploaded\";s:4:\"type\";s:6:\"string\";}s:10:\"pull_robot\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"Username
  of a Quay robot account to use as pull credentials\";s:4:\"type\";s:6:\"string\";}s:12:\"subdirectory\";O:8:\"stdClass\":2:{s:11:\"description\";s:95:\"Subdirectory
  in which the Dockerfile can be found. You can only specify this or dockerfile_path\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:10:\"RestoreTag\";O:8:\"stdClass\":4:{s:11:\"description\";s:34:\"Restores
  a tag to a specific image\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"image\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"Image
  identifier to which the tag should point\";s:4:\"type\";s:6:\"string\";}s:15:\"manifest_digest\";O:8:\"stdClass\":2:{s:11:\"description\";s:53:\"If
  specified, the manifest digest that should be used\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:5:\"image\";}s:4:\"type\";s:6:\"object\";}s:13:\"RunParameters\";O:8:\"stdClass\":4:{s:20:\"additionalProperties\";b:0;s:11:\"description\";s:56:\"Optional
  run parameters for activating the build trigger\";s:10:\"properties\";O:8:\"stdClass\":3:{s:11:\"branch_name\";O:8:\"stdClass\":2:{s:11:\"description\";s:57:\"(SCM
  only) If specified, the name of the branch to build.\";s:4:\"type\";s:6:\"string\";}s:10:\"commit_sha\";O:8:\"stdClass\":2:{s:11:\"description\";s:75:\"(Custom
  Only) If specified, the ref/SHA1 used to checkout a git repository.\";s:4:\"type\";s:6:\"string\";}s:4:\"refs\";O:8:\"stdClass\":2:{s:11:\"description\";s:42:\"(SCM
  Only) If specified, the ref to build.\";s:4:\"type\";a:2:{i:0;s:6:\"object\";i:1;s:4:\"null\";}}}s:4:\"type\";s:6:\"object\";}s:15:\"TeamDescription\";O:8:\"stdClass\":4:{s:11:\"description\";s:21:\"Description
  of a team\";s:10:\"properties\";O:8:\"stdClass\":2:{s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:33:\"Markdown
  description for the team\";s:4:\"type\";s:6:\"string\";}s:4:\"role\";O:8:\"stdClass\":3:{s:11:\"description\";s:50:\"Org
  wide permissions that should apply to the team\";s:4:\"enum\";a:3:{i:0;s:6:\"member\";i:1;s:7:\"creator\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"role\";}s:4:\"type\";s:6:\"object\";}s:14:\"TeamPermission\";O:8:\"stdClass\":4:{s:11:\"description\";s:33:\"Description
  of a team permission.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"role\";O:8:\"stdClass\":3:{s:11:\"description\";s:24:\"Role
  to use for the team\";s:4:\"enum\";a:3:{i:0;s:4:\"read\";i:1;s:5:\"write\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"role\";}s:4:\"type\";s:6:\"object\";}s:15:\"TokenPermission\";O:8:\"stdClass\":4:{s:11:\"description\";s:33:\"Description
  of a token permission\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"role\";O:8:\"stdClass\":3:{s:11:\"description\";s:25:\"Role
  to use for the token\";s:4:\"enum\";a:3:{i:0;s:4:\"read\";i:1;s:5:\"write\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"role\";}s:4:\"type\";s:6:\"object\";}s:9:\"UpdateApp\";O:8:\"stdClass\":4:{s:11:\"description\";s:38:\"Description
  of an updated application.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:15:\"application_uri\";O:8:\"stdClass\":2:{s:11:\"description\";s:38:\"The
  URI for the application's homepage\";s:4:\"type\";s:6:\"string\";}s:12:\"avatar_email\";O:8:\"stdClass\":2:{s:11:\"description\";s:59:\"The
  e-mail address of the avatar to use for the application\";s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":2:{s:11:\"description\";s:50:\"The
  human-readable description for the application\";s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":2:{s:11:\"description\";s:27:\"The
  name of the application\";s:4:\"type\";s:6:\"string\";}s:12:\"redirect_uri\";O:8:\"stdClass\":2:{s:11:\"description\";s:44:\"The
  URI for the application's OAuth redirect\";s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:3:{i:0;s:4:\"name\";i:1;s:12:\"redirect_uri\";i:2;s:15:\"application_uri\";}s:4:\"type\";s:6:\"object\";}s:9:\"UpdateOrg\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"Description
  of updates for an existing organization\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":2:{s:11:\"description\";s:26:\"Organization
  contact email\";s:4:\"type\";s:6:\"string\";}s:13:\"invoice_email\";O:8:\"stdClass\":2:{s:11:\"description\";s:63:\"Whether
  the organization desires to receive emails for invoices\";s:4:\"type\";s:7:\"boolean\";}s:21:\"invoice_email_address\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"The
  email address at which to receive invoices\";s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}}s:16:\"tag_expiration_s\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"The
  number of seconds for tag expiration\";s:7:\"minimum\";i:0;s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:10:\"UpdateUser\";O:8:\"stdClass\":3:{s:11:\"description\";s:38:\"Fields
  which can be updated in a user.\";s:10:\"properties\";O:8:\"stdClass\":9:{s:7:\"company\";O:8:\"stdClass\":2:{s:11:\"description\";s:41:\"The
  optional entered company for the user\";s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"The
  user's email address\";s:4:\"type\";s:6:\"string\";}s:11:\"family_name\";O:8:\"stdClass\":2:{s:11:\"description\";s:45:\"The
  optional entered family name for the user\";s:4:\"type\";s:6:\"string\";}s:10:\"given_name\";O:8:\"stdClass\":2:{s:11:\"description\";s:44:\"The
  optional entered given name for the user\";s:4:\"type\";s:6:\"string\";}s:13:\"invoice_email\";O:8:\"stdClass\":2:{s:11:\"description\";s:53:\"Whether
  the user desires to receive an invoice email.\";s:4:\"type\";s:7:\"boolean\";}s:21:\"invoice_email_address\";O:8:\"stdClass\":2:{s:11:\"description\";s:43:\"Custom
  email address for receiving invoices\";s:4:\"type\";a:2:{i:0;s:6:\"string\";i:1;s:4:\"null\";}}s:8:\"password\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"The
  user's password\";s:4:\"type\";s:6:\"string\";}s:16:\"tag_expiration_s\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"The
  number of seconds for tag expiration\";s:7:\"minimum\";i:0;s:4:\"type\";s:7:\"integer\";}s:8:\"username\";O:8:\"stdClass\":2:{s:11:\"description\";s:19:\"The
  user's username\";s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:14:\"UserPermission\";O:8:\"stdClass\":4:{s:11:\"description\";s:33:\"Description
  of a user permission.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"role\";O:8:\"stdClass\":3:{s:11:\"description\";s:24:\"Role
  to use for the user\";s:4:\"enum\";a:3:{i:0;s:4:\"read\";i:1;s:5:\"write\";i:2;s:5:\"admin\";}s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:4:\"role\";}s:4:\"type\";s:6:\"object\";}s:8:\"UserView\";O:8:\"stdClass\":4:{s:11:\"description\";s:16:\"Describes
  a user\";s:10:\"properties\";O:8:\"stdClass\":8:{s:9:\"anonymous\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"true
  if this user data represents a guest user\";s:4:\"type\";s:7:\"boolean\";}s:6:\"avatar\";O:8:\"stdClass\":2:{s:11:\"description\";s:40:\"Avatar
  data representing the user's icon\";s:4:\"type\";s:6:\"object\";}s:15:\"can_create_repo\";O:8:\"stdClass\":2:{s:11:\"description\";s:54:\"Whether
  the user has permission to create repositories\";s:4:\"type\";s:7:\"boolean\";}s:5:\"email\";O:8:\"stdClass\":2:{s:11:\"description\";s:24:\"The
  user's email address\";s:4:\"type\";s:6:\"string\";}s:6:\"logins\";O:8:\"stdClass\":3:{s:11:\"description\";s:77:\"The
  list of external login providers against which the user has authenticated\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:13:\"organizations\";O:8:\"stdClass\":3:{s:11:\"description\";s:65:\"Information
  about the organizations in which the user is a member\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"object\";}s:4:\"type\";s:5:\"array\";}s:19:\"preferred_namespace\";O:8:\"stdClass\":2:{s:11:\"description\";s:67:\"If
  true, the user's namespace is the preferred namespace to display\";s:4:\"type\";s:7:\"boolean\";}s:8:\"verified\";O:8:\"stdClass\":2:{s:11:\"description\";s:50:\"Whether
  the user's email address has been verified\";s:4:\"type\";s:7:\"boolean\";}}s:8:\"required\";a:2:{i:0;s:9:\"anonymous\";i:1;s:6:\"avatar\";}s:4:\"type\";s:6:\"object\";}}"
...
