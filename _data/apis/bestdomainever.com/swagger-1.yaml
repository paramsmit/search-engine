---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:11:\"description\";s:0:\"\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:3:\"AMI\";}"
host: bestdomainever.com
basePath: /api
paths:
  /students/all:
    get:
      tags:
      - students
      summary: Get all students
      description: Returns `count` students from offset `offset`.n
      operationId: addPet
      produces:
      - application/json
      responses:
        200:
          description: OK, return data
          schema:
            type: array
            items:
              $ref: '#/definitions/Student'
  /students/{id}:
    get:
      tags:
      - students
      summary: Get one student
      parameters:
      - name: id
        in: path
        description: ID of student to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Student'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
        404:
          description: Student not found
    patch:
      summary: Update student info
      description: Gets dictionary with student's description, then updates these
        fields in  database.n
      tags:
      - students
      parameters:
      - name: id
        in: path
        description: ID of student to return
        required: true
        type: integer
        format: int64
      - name: data
        in: body
        description: New data to store
        required: true
        schema:
          $ref: '#/components/schemas/StudentPost'
      responses:
        200:
          description: ok
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
        404:
          description: student with such id not found
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /students/new:
    post:
      tags:
      - students
      summary: Create usern
      description: Creates new user in systemn
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Student'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
      parameters:
      - name: data
        in: body
        description: New student data. n
        required: true
        schema:
          $ref: '#/components/schemas/StudentPost'
  /students/{student_id}/deadlines:
    get:
      tags:
      - students
      summary: Get all student's deadlines
      parameters:
      - name: student_id
        in: path
        description: ID of student to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Deadline'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /students/{student_id}/groups:
    get:
      tags:
      - students
      summary: Get all groups containing studnet
      parameters:
      - name: student_id
        in: path
        description: ID of student to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /groups/all:
    get:
      tags:
      - groups
      summary: Get all groups
      responses:
        200:
          description: Returns list of all available groups. In MVP does not supportnpagination,
            it returns all groups in once.n
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
  /groups/new:
    post:
      tags:
      - groups
      summary: Create new group
      parameters:
      - in: body
        name: data
        schema:
          $ref: '#/definitions/GroupBase'
        description: Data of new group to store,mn
      responses:
        200:
          description: Group successfully created
          schema:
            $ref: '#/definitions/Group'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /groups/{group_id}:
    get:
      tags:
      - groups
      summary: Get one group
      parameters:
      - in: path
        name: group_id
        description: Id of a group to retrieve information aboutn
        required: true
        type: integer
      responses:
        200:
          description: Returns information about group with id `group_id`.n
          schema:
            $ref: '#/definitions/Group'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
        404:
          description: Group not found
          schema:
            $ref: '#/components/responses/NotFound'
    patch:
      tags:
      - groups
      summary: Update group's info
      parameters:
      - in: path
        name: group_id
        description: Id of a group to retrieve information aboutn
        required: true
        type: integer
      - in: body
        name: data
        schema:
          $ref: '#/definitions/Group'
        description: JSON with new data to store in system.n
      responses:
        200:
          description: Group is successfully updatedn
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /groups/{group_id}/students:
    get:
      tags:
      - groups
      - students
      summary: Get all students that are part of group
      parameters:
      - in: path
        name: group_id
        description: Id of a group to retrieve information aboutn
        required: true
        type: integer
      responses:
        200:
          description: Returns list of students that are attended to given groupn
          schema:
            type: array
            items:
              $ref: '#/definitions/Student'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
        404:
          $ref: '#/components/responses/NotFound'
  /groups/{group_id}/deadlines:
    get:
      tags:
      - groups
      summary: Get all deadlines of group
      parameters:
      - in: path
        name: group_id
        description: Id of a group to retrieve information aboutn
        required: true
        type: integer
      responses:
        200:
          description: Returns list of deadlines that are attached to given groupn
          schema:
            type: array
            items:
              $ref: '#/definitions/Deadline'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /groups/{group_id}/deadlines/new:
    post:
      tags:
      - deadlines
      - groups
      summary: Create new deadline
      description: Create new deadline
      parameters:
      - in: path
        name: group_id
        required: true
        description: Id of a group to retrieve information aboutn
        type: integer
      - in: body
        name: data
        schema:
          $ref: '#/definitions/DeadlineBase'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Deadline'
  /deadlines/all:
    get:
      tags:
      - deadlines
      summary: Get all deadlines
      responses:
        200:
          description: Returns list of all available deadlines. In MVP does not supportnpagination,
            it returns all deadlines in once.n
          schema:
            type: array
            items:
              $ref: '#/definitions/Deadline'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  /deadlines/{deadline_id}:
    get:
      tags:
      - deadlines
      summary: Get deadline
      parameters:
      - name: deadline_id
        in: path
        description: ID of deadline to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Returns deadline with that id
          schema:
            $ref: '#/definitions/Deadline'
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
        404:
          description: Not found
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      tags:
      - deadlines
      summary: Update deadline
      description: Updates deadline
      parameters:
      - name: deadline_id
        in: path
        description: ID of deadline to update
        required: true
        type: integer
        format: int64
      - name: data
        in: body
        description: Data of deadline to be stored
        required: true
        schema:
          $ref: '#/definitions/Deadline'
      responses:
        200:
          description: OK
        400:
          description: Invalid query
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":9:{s:7:\"Student\";O:8:\"stdClass\":1:{s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/components/schemas/Id\";}i:1;O:8:\"stdClass\":1:{s:4:\"$ref\";s:32:\"#/components/schemas/StudentBase\";}}}s:9:\"GroupBase\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:9:\"full_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"short_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_hidden\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:5:\"Group\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}}}i:1;O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/GroupBase\";}}}s:4:\"File\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:3:\"url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"Material\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:8:\"group_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/components/schemas/DateTime\";}s:6:\"header\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"DeadlineBase\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:8:\"group_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/components/schemas/DateTime\";}s:6:\"header\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"valid_until\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/components/schemas/DateTime\";}}}s:8:\"Deadline\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:5:\"allOf\";a:2:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/components/schemas/Id\";}i:1;O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/DeadlineBase\";}}}s:6:\"Notify\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:8:\"group_id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/components/schemas/DateTime\";}s:6:\"header\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"content\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"StudentJar\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:6:\"format\";s:6:\"uint64\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"students\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:21:\"#/definitions/Student\";}}}}}"
...
