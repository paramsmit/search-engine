---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":11:{s:11:\"description\";s:51:\"Creates an Azure
  Data Lake Store filesystem client.\";s:5:\"title\";s:39:\"DataLakeStoreFileSystemManagementClient\";s:7:\"version\";s:10:\"2016-11-01\";s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"cloud\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:131:\"https://api.apis.guru/v2/cache/logo/https_assets.onestore.ms_cdnfiles_onestorerolling-1606-01000_shell_v3_images_logo_microsoft.png\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":3:{s:6:\"format\";s:7:\"swagger\";s:3:\"url\";s:165:\"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/datalake-store/data-plane/Microsoft.DataLakeStore/stable/2016-11-01/filesystem.json\";s:7:\"version\";s:3:\"2.0\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:9:\"azure.com\";s:13:\"x-serviceName\";s:25:\"datalake-store-filesystem\";s:6:\"x-tags\";a:2:{i:0;s:5:\"Azure\";i:1;s:9:\"Microsoft\";}s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:31:\"azure_datalake_store_filesystem\";s:4:\"type\";s:7:\"openapi\";}}"
host: azure.local
paths:
  /WebHdfsExt/{path}:
    post:
      consumes:
      - application/octet-stream
      description: 'Appends to the specified file, optionally first creating the file
        if it does not yet exist. This method supports multiple concurrent appends
        to the file. NOTE: The target must not contain data added by Create or normal
        (serial) Append. ConcurrentAppend and Append cannot be used interchangeably;
        once a target file has been modified using either of these append options,
        the other append option cannot be used on the target file. ConcurrentAppend
        does not guarantee order and can result in duplicated data landing in the
        target file.'
      operationId: FileSystem_ConcurrentAppend
      parameters:
      - description: The Data Lake Store path (starting with '/') of the file to which
          to append using concurrent append.
        in: path
        name: path
        required: true
        type: string
      - description: The file contents to include when appending to the file.
        in: body
        name: streamContents
        required: true
        schema:
          format: file
          type: object
      - description: Indicates the concurrent append call should create the file if
          it doesn't exist or just open the existing file for append
        enum:
        - autocreate
        in: query
        name: appendMode
        required: false
        type: string
        x-ms-enum:
          modelAsString: false
          name: AppendModeType
      - description: The constant value for the operation.
        enum:
        - CONCURRENTAPPEND
        in: query
        name: op
        required: true
        type: string
      - description: Indicates the data being sent to the server is being streamed
          in chunks.
        enum:
        - chunked
        in: header
        name: Transfer-Encoding
        required: true
        type: string
      - default: DATA
        description: Optionally indicates what to do after completion of the concurrent
          append. DATA indicates that more data will be sent immediately by the client,
          the file handle should remain open/locked, and file metadata (including
          file length, last modified time) should NOT get updated. METADATA indicates
          that more data will be sent immediately by the client, the file handle should
          remain open/locked, and file metadata should get updated. CLOSE indicates
          that the client is done sending data, the file handle should be closed/unlocked,
          and file metadata should get updated.
        enum:
        - DATA
        - METADATA
        - CLOSE
        in: query
        name: syncFlag
        required: false
        type: string
        x-ms-enum:
          modelAsString: false
          name: SyncFlag
      - $ref: '#/parameters/ApiVersionParameter'
      responses:
        200:
          description: OK
        default:
          description: An unexpected error from the server.
          schema:
            $ref: '#/definitions/AdlsError'
      tags:
      - FileSystem
      x-ms-examples:
        ? 'Appends to the specified file, optionally first creating the file if it
          does not yet exist. This method supports multiple concurrent appends to
          the file. NOTE: The target must not contain data added by Create or normal
          (serial) Append. ConcurrentAppend and Append cannot be used interchangeably;
          once a target file has been modified using either of these append options,
          the other append option cannot be used on the target file. ConcurrentAppend
          does not guarantee order and can result in duplicated data landing in the
          target file'
        : parameters:
            Transfer-Encoding: chunked
            accountName: contosoadla
            adlsFileSystemDnsSuffix: azuredatalakestore.net
            api-version: "2016-11-01"
            appendMode: autocreate
            op: CONCURRENTAPPEND
            path: test_file_path
            streamContents: This is actually a byte stream. This request/response
              is being presented as a string for readability in the example
            syncFlag: DATA
          responses:
            200: []
    put:
      description: Sets or removes the expiration time on the specified file. This
        operation can only be executed against files. Folders are not supported.
      operationId: FileSystem_SetFileExpiry
      parameters:
      - description: The Data Lake Store path (starting with '/') of the file on which
          to set or remove the expiration time.
        in: path
        name: path
        required: true
        type: string
      - description: 'Indicates the type of expiration to use for the file: 1. NeverExpire:
          ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in milliseconds
          representing the expiration date relative to when file expiration is updated.
          3. RelativeToCreationDate: ExpireTime is an integer in milliseconds representing
          the expiration date relative to file creation. 4. Absolute: ExpireTime is
          an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.'
        enum:
        - NeverExpire
        - RelativeToNow
        - RelativeToCreationDate
        - Absolute
        in: query
        name: expiryOption
        required: true
        type: string
        x-ms-enum:
          modelAsString: false
          name: ExpiryOptionType
      - description: The time that the file will expire, corresponding to the ExpiryOption
          that was set.
        format: int64
        in: query
        name: expireTime
        required: false
        type: integer
      - description: The constant value for the operation.
        enum:
        - SETEXPIRY
        in: query
        name: op
        required: true
        type: string
      - $ref: '#/parameters/ApiVersionParameter'
      responses:
        200:
          description: Successfully set the expiration time on the specified file.
        default:
          description: An unexpected error from the server.
          schema:
            $ref: '#/definitions/AdlsError'
      tags:
      - FileSystem
      x-ms-examples:
        ? Sets or removes the expiration time on the specified file. This operation
          can only be executed against files. Folders are not supported
        : parameters:
            accountName: contosoadla
            adlsFileSystemDnsSuffix: azuredatalakestore.net
            api-version: "2016-11-01"
            expireTime: 1
            expiryOption: NeverExpire
            op: SETEXPIRY
            path: test_file_path
          responses:
            200: []
  /webhdfs/v1/{path}:
    get:
      description: Checks if the specified access is available at the given path.
      operationId: FileSystem_CheckAccess
      parameters:
      - description: The Data Lake Store path (starting with '/') of the file or directory
          for which to check access.
        in: path
        name: path
        required: true
        type: string
      - description: File system operation read/write/execute in string form, matching
          regex pattern '[rwx-]{3}'
        in: query
        name: fsaction
        required: true
        type: string
      - description: The constant value for the operation.
        enum:
        - CHECKACCESS
        in: query
        name: op
        required: true
        type: string
      - $ref: '#/parameters/ApiVersionParameter'
      responses:
        200:
          description: OK
        default:
          description: An unexpected error from the server.
          schema:
            $ref: '#/definitions/AdlsError'
      tags:
      - FileSystem
      x-ms-examples:
        Checks if the specified access is available at the given path:
          parameters:
            accountName: contosoadla
            adlsFileSystemDnsSuffix: azuredatalakestore.net
            api-version: "2016-11-01"
            fsaction: test_fsaction
            op: CHECKACCESS
            path: test_file_path
          responses:
            200: []
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":21:{s:9:\"AclStatus\";O:8:\"stdClass\":2:{s:11:\"description\";s:66:\"Data
  Lake Store file or directory Access Control List information.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:7:\"entries\";O:8:\"stdClass\":3:{s:11:\"description\";s:51:\"the
  list of ACLSpec entries on a file or directory.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:5:\"group\";O:8:\"stdClass\":2:{s:11:\"description\";s:34:\"the
  group owner, an AAD Object ID.\";s:4:\"type\";s:6:\"string\";}s:5:\"owner\";O:8:\"stdClass\":2:{s:11:\"description\";s:33:\"the
  user owner, an AAD Object ID.\";s:4:\"type\";s:6:\"string\";}s:10:\"permission\";O:8:\"stdClass\":2:{s:11:\"description\";s:73:\"The
  octal representation of the unnamed user, mask and other permissions.\";s:4:\"type\";s:6:\"string\";}s:9:\"stickyBit\";O:8:\"stdClass\":3:{s:11:\"description\";s:53:\"the
  indicator of whether the sticky bit is on or off.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"boolean\";}}}s:15:\"AclStatusResult\";O:8:\"stdClass\":2:{s:11:\"description\";s:66:\"Data
  Lake Store file or directory Access Control List information.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:9:\"aclStatus\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/AclStatus\";s:11:\"description\";s:51:\"the
  AclStatus object for a given file or directory.\";}}}s:26:\"AdlsAccessControlException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:155:\"A
  WebHDFS exception thrown indicating that access is denied due to insufficient permissions.
  Thrown when a 403 error response code is returned (forbidden).\";s:24:\"x-ms-discriminator-value\";s:22:\"AccessControlException\";}s:22:\"AdlsBadOffsetException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:174:\"A
  WebHDFS exception thrown indicating the append or read is from a bad offset. Thrown
  when a 400 error response code is returned for append and open operations (Bad request).\";s:24:\"x-ms-discriminator-value\";s:18:\"BadOffsetException\";}s:9:\"AdlsError\";O:8:\"stdClass\":2:{s:11:\"description\";s:73:\"Data
  Lake Store filesystem error containing a specific WebHDFS exception.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:15:\"remoteException\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";s:11:\"description\";s:68:\"the
  object representing the actual WebHDFS exception being returned.\";s:8:\"readOnly\";b:1;}}}s:30:\"AdlsFileAlreadyExistsException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:135:\"A
  WebHDFS exception thrown indicating the file or folder already exists. Thrown when
  a 403 error response code is returned (forbidden).\";s:24:\"x-ms-discriminator-value\";s:26:\"FileAlreadyExistsException\";}s:25:\"AdlsFileNotFoundException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:139:\"A
  WebHDFS exception thrown indicating the file or folder could not be found. Thrown
  when a 404 error response code is returned (not found).\";s:24:\"x-ms-discriminator-value\";s:21:\"FileNotFoundException\";}s:15:\"AdlsIOException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:139:\"A
  WebHDFS exception thrown indicating there was an IO (read or write) error. Thrown
  when a 403 error response code is returned (forbidden).\";s:24:\"x-ms-discriminator-value\";s:11:\"IOException\";}s:28:\"AdlsIllegalArgumentException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:140:\"A
  WebHDFS exception thrown indicating that one more arguments is incorrect. Thrown
  when a 400 error response code is returned (bad request).\";s:24:\"x-ms-discriminator-value\";s:24:\"IllegalArgumentException\";}s:19:\"AdlsRemoteException\";O:8:\"stdClass\":4:{s:11:\"description\";s:130:\"Data
  Lake Store filesystem exception based on the WebHDFS definition for RemoteExceptions.
  This is a WebHDFS 'catch all' exception\";s:13:\"discriminator\";s:9:\"exception\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"exception\";O:8:\"stdClass\":2:{s:11:\"description\";s:75:\"the
  class name of the exception thrown, such as 'IllegalArgumentException'.\";s:4:\"type\";s:6:\"string\";}s:13:\"javaClassName\";O:8:\"stdClass\":3:{s:11:\"description\";s:99:\"the
  full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";}s:7:\"message\";O:8:\"stdClass\":3:{s:11:\"description\";s:122:\"the
  message associated with the exception that was thrown, such as 'Invalid value for
  webhdfs parameter \"permission\":...'.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:1:{i:0;s:9:\"exception\";}}s:20:\"AdlsRuntimeException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:154:\"A
  WebHDFS exception thrown when an unexpected error occurs during an operation. Thrown
  when a 500 error response code is returned (Internal server error).\";s:24:\"x-ms-discriminator-value\";s:16:\"RuntimeException\";}s:21:\"AdlsSecurityException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:126:\"A
  WebHDFS exception thrown indicating that access is denied. Thrown when a 401 error
  response code is returned (Unauthorized).\";s:24:\"x-ms-discriminator-value\";s:17:\"SecurityException\";}s:22:\"AdlsThrottledException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:152:\"A
  WebHDFS exception thrown indicating that the request is being throttled. Reducing
  the number of requests or request size helps to mitigate this error.\";s:24:\"x-ms-discriminator-value\";s:18:\"ThrottledException\";}s:33:\"AdlsUnsupportedOperationException\";O:8:\"stdClass\":3:{s:5:\"allOf\";a:1:{i:0;O:8:\"stdClass\":1:{s:4:\"$ref\";s:33:\"#/definitions/AdlsRemoteException\";}}s:11:\"description\";s:149:\"A
  WebHDFS exception thrown indicating that the requested operation is not supported.
  Thrown when a 400 error response code is returned (bad request).\";s:24:\"x-ms-discriminator-value\";s:29:\"UnsupportedOperationException\";}s:14:\"ContentSummary\";O:8:\"stdClass\":2:{s:11:\"description\";s:43:\"Data
  Lake Store content summary information\";s:10:\"properties\";O:8:\"stdClass\":4:{s:14:\"directoryCount\";O:8:\"stdClass\":4:{s:11:\"description\";s:26:\"the
  number of directories.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:9:\"fileCount\";O:8:\"stdClass\":4:{s:11:\"description\";s:20:\"the
  number of files.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:6:\"length\";O:8:\"stdClass\":4:{s:11:\"description\";s:40:\"the
  number of bytes used by the content.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:13:\"spaceConsumed\";O:8:\"stdClass\":4:{s:11:\"description\";s:39:\"the
  disk space consumed by the content.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}}}s:20:\"ContentSummaryResult\";O:8:\"stdClass\":2:{s:11:\"description\";s:64:\"Data
  Lake Store filesystem content summary information response.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:14:\"contentSummary\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:28:\"#/definitions/ContentSummary\";s:11:\"description\";s:42:\"the
  content summary for the specified path\";s:8:\"readOnly\";b:1;}}}s:19:\"FileOperationResult\";O:8:\"stdClass\":2:{s:11:\"description\";s:39:\"The
  result of the request or operation.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"boolean\";O:8:\"stdClass\":4:{s:11:\"description\";s:39:\"the
  result of the operation or request.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"boolean\";s:16:\"x-ms-client-name\";s:15:\"operationResult\";}}}s:20:\"FileStatusProperties\";O:8:\"stdClass\":2:{s:11:\"description\";s:46:\"Data
  Lake Store file or directory information.\";s:10:\"properties\";O:8:\"stdClass\":11:{s:10:\"accessTime\";O:8:\"stdClass\":4:{s:11:\"description\";s:46:\"the
  last access time as ticks since the epoch.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:6:\"aclBit\";O:8:\"stdClass\":3:{s:11:\"description\";s:46:\"flag
  to indicate if extended acls are enabled \";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"boolean\";}s:9:\"blockSize\";O:8:\"stdClass\":4:{s:11:\"description\";s:28:\"the
  block size for the file.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:5:\"group\";O:8:\"stdClass\":3:{s:11:\"description\";s:16:\"the
  group owner.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";}s:6:\"length\";O:8:\"stdClass\":4:{s:11:\"description\";s:30:\"the
  number of bytes in a file.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:16:\"modificationTime\";O:8:\"stdClass\":4:{s:11:\"description\";s:47:\"the
  modification time as ticks since the epoch.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";}s:16:\"msExpirationTime\";O:8:\"stdClass\":5:{s:11:\"description\";s:122:\"Gets
  the expiration time, if any, as ticks since the epoch. If the value is 0 or DateTime.MaxValue
  there is no expiration.\";s:6:\"format\";s:5:\"int64\";s:8:\"readOnly\";b:1;s:4:\"type\";s:7:\"integer\";s:16:\"x-ms-client-name\";s:14:\"expirationTime\";}s:5:\"owner\";O:8:\"stdClass\":3:{s:11:\"description\";s:26:\"the
  user who is the owner.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";}s:10:\"pathSuffix\";O:8:\"stdClass\":3:{s:11:\"description\";s:16:\"the
  path suffix.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";}s:10:\"permission\";O:8:\"stdClass\":3:{s:11:\"description\";s:40:\"the
  permission represented as an string.\";s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";}s:4:\"type\";O:8:\"stdClass\":5:{s:11:\"description\";s:28:\"the
  type of the path object.\";s:4:\"enum\";a:2:{i:0;s:4:\"FILE\";i:1;s:9:\"DIRECTORY\";}s:8:\"readOnly\";b:1;s:4:\"type\";s:6:\"string\";s:9:\"x-ms-enum\";O:8:\"stdClass\":2:{s:13:\"modelAsString\";b:0;s:4:\"name\";s:8:\"FileType\";}}}}s:16:\"FileStatusResult\";O:8:\"stdClass\":2:{s:11:\"description\";s:60:\"Data
  Lake Store filesystem file status information response.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"fileStatus\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:34:\"#/definitions/FileStatusProperties\";s:11:\"description\";s:58:\"the
  file status object associated with the specified path.\";s:8:\"readOnly\";b:1;}}}s:12:\"FileStatuses\";O:8:\"stdClass\":2:{s:11:\"description\";s:45:\"Data
  Lake Store file status list information.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:10:\"fileStatus\";O:8:\"stdClass\":4:{s:11:\"description\";s:58:\"the
  object containing the list of properties of the files.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/FileStatusProperties\";}s:8:\"readOnly\";b:1;s:4:\"type\";s:5:\"array\";}}}s:18:\"FileStatusesResult\";O:8:\"stdClass\":2:{s:11:\"description\";s:65:\"Data
  Lake Store filesystem file status list information response.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:12:\"fileStatuses\";O:8:\"stdClass\":3:{s:4:\"$ref\";s:26:\"#/definitions/FileStatuses\";s:11:\"description\";s:50:\"the
  object representing the list of file statuses.\";s:8:\"readOnly\";b:1;}}}}"
...
