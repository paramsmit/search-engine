---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":10:{s:7:\"contact\";O:8:\"stdClass\":3:{s:5:\"email\";s:20:\"support@receptive.io\";s:4:\"name\";s:17:\"Receptive
  Support\";s:9:\"x-twitter\";s:11:\"receptiveio\";}s:11:\"description\";s:1413:\"##
  Who is this for?\n\nThis documentation is for developers creating their own integration
  with [Receptive's](https://www.receptive.io) API. If you are doing a standard integration,
  there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app)
  that you should know about before you go to the effort of building your own integration.\n\n##
  Authentication\n\nAPI calls generally need to be authenticated. Generate an API
  Key at https://receptive.io/app/#/vendor/settings?section=integrate. This key should
  then be added to every request URL as a query parameter named 'auth-token'\n\n##
  Endpoint\n\nAPI endpoint is https://api.eu-west-1.receptive.io.\n## Notes\n\nAPI
  endpoints are being added to this documentation as needed by customers. If you don't
  see an endpoint you need please contact support and if it exists we'll publish the
  docs here. The 'try it out' feature on this documentation page will probably be
  blocked by your browser because the Access-Control-Allow-Origin header has its value
  set by the Receptive server depending on your hostname.\n\n## Generating client
  code\n\nThis documentation is automatically generated from an OpenAPI spec available
  [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to
  auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)\";s:5:\"title\";s:9:\"Receptive\";s:7:\"version\";s:5:\"1.0.0\";s:21:\"x-apisguru-categories\";a:1:{i:0;s:9:\"ecommerce\";}s:6:\"x-logo\";O:8:\"stdClass\":1:{s:3:\"url\";s:84:\"https://api.apis.guru/v2/cache/logo/https_twitter.com_receptiveio_profile_image.jpeg\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":3:{s:6:\"format\";s:7:\"swagger\";s:3:\"url\";s:49:\"http://apidoc.receptive.io/receptive.swagger.json\";s:7:\"version\";s:3:\"2.0\";}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:12:\"receptive.io\";s:10:\"x-datafire\";O:8:\"stdClass\":2:{s:4:\"name\";s:9:\"receptive\";s:4:\"type\";s:7:\"openapi\";}}"
host: api.eu-west-1.receptive.io
paths:
  /accounts:
    get:
      parameters:
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/start'
      - $ref: '#/parameters/order_dir'
      - description: The field to use for sort
        enum:
        - churned
        - last_seen
        - name
        in: query
        name: order_by
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/Account'
            type: array
      summary: Query accounts
      tags:
      - account
      operationId: accounts.get
  /accounts/{id}:
    get:
      parameters:
      - $ref: '#/parameters/accountIdInPath'
      responses:
        200:
          description: an Account
          schema:
            $ref: '#/definitions/Account'
        410:
          $ref: '#/responses/410'
      summary: Get an Account
      tags:
      - account
      operationId: accounts.id.get
    put:
      parameters:
      - $ref: '#/parameters/accountIdInPath'
      - description: Updated Account values
        in: body
        name: account
        schema:
          properties:
            monthly_value:
              format: float
              type: number
            name:
              type: string
            status:
              enum:
              - paying
              - prospect
              - not_paying
              type: string
          type: object
      responses:
        200:
          description: Success
      summary: Update an Account
      tags:
      - account
      operationId: accounts.id.put
  /accounts/{id}/tags:
    delete:
      description: Removes all custom tags associated with the Account
      parameters:
      - $ref: '#/parameters/accountIdInPath'
      responses:
        200:
          description: success
      summary: Delete custom Account tags
      tags:
      - account
      operationId: accounts.id.tags.delete
    get:
      parameters:
      - $ref: '#/parameters/accountIdInPath'
      responses:
        200:
          description: Returns an array of maps specifying tags under each tag group,
            for example:nn[nn{'impacts' => ['sales']},nn{'resources' => ['dev', 'test',
            'support']}nn]
        404:
          description: Account not found
      summary: Get custom Account tags
      tags:
      - account
      operationId: accounts.id.tags.get
    post:
      parameters:
      - $ref: '#/parameters/accountIdInPath'
      - description: An array of maps specifying tags under each tag group, for example:nn[nn{'impacts'
          => ['sales']},nn{'resources' => ['dev', 'test', 'support']}nn]
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/Tags'
      responses:
        200:
          description: Updated Account tags
        404:
          description: Account not found
      summary: Overwrite current custom Account tags with the given tags
      tags:
      - account
      operationId: accounts.id.tags.post
  /features:
    get:
      parameters:
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/start'
      - $ref: '#/parameters/order_dir'
      - description: Filter by whether the features are shown/hidden from customer,
          if supplied.
        in: query
        name: is_private
        required: false
        type: boolean
      - description: Filter by User ID, if supplied.
        in: query
        name: wanted_by
        required: false
        type: integer
      - description: The field to use for sort
        enum:
        - title
        - created_at
        - updated_at
        - declined_at
        - developing_at
        - planned_at
        - released_at
        - waiting_at
        - deleted_at
        in: query
        name: order_by
        required: false
        type: string
      responses:
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/Feature'
            type: array
      summary: Query features
      tags:
      - feature
      operationId: features.get
  /features/{id}:
    get:
      parameters:
      - description: ID of the feature
        in: path
        name: id
        required: true
        type: integer
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/Feature'
      summary: Get a Feature by ID
      tags:
      - feature
      operationId: features.id.get
  /features/{id}/tags:
    delete:
      description: Removes all custom tags associated with the Feature
      parameters:
      - description: Receptive's Feature ID
        in: path
        name: id
        required: true
        type: number
      responses:
        200:
          description: success
      summary: Delete custom Feature tags
      tags:
      - feature
      operationId: features.id.tags.delete
    get:
      parameters:
      - $ref: '#/parameters/accountIdInPath'
      responses:
        200:
          description: Returns an array of maps specifying tags under each tag group,
            for example:nn[nn{'impacts' => ['sales']},nn{'resources' => ['dev', 'test',
            'support']}nn]
        404:
          description: Feature not found
      summary: Get custom Feature tags
      tags:
      - feature
      operationId: features.id.tags.get
    post:
      parameters:
      - description: Receptive's Feature ID
        in: path
        name: id
        required: true
        type: number
      - in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/Tags'
      responses:
        200:
          description: Updated Feature tags
        404:
          description: Feature not found
      summary: Overwrite current custom Feature tags with the given tags
      tags:
      - feature
      operationId: features.id.tags.post
  /health-check/ping:
    get:
      description: Provides a response for automatic checks that the API and load
        balancers are healthy
      responses:
        200:
          description: API is healthy
        503:
          description: Load balancers cannot route a request to a healthy API server
      security: []
      summary: Health check for API
      tags:
      - system
      operationId: health_check.ping.get
  /users:
    get:
      description: get a list of User records
      parameters:
      - description: role
        enum:
        - endUser
        - vendorUser
        in: query
        name: role
        required: true
        type: string
      - description: Filter by Account ID, if supplied. Only useful if role param
          is endUser
        in: query
        name: account
        required: false
        type: integer
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/order_by'
      - $ref: '#/parameters/order_dir'
      responses:
        200:
          description: User records
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
      summary: fetch User records
      tags:
      - user
      operationId: users.get
    post:
      consumes:
      - application/json
      description: Replicates much of the functionality of the widget ping, allowing
        callers to create or update User records for End Users. If you call this with
        a new User and/or Account, the record will be created. If you call for an
        existing User/Account, the record will be updated. You can also call this
        at EndUser login time, or more frequently, to notify Receptive that the EndUser
        has been seen. This keeps Receptive's 'last seen' data fresh and updates your
        reporting. This endpoint is used by our Zapier integration. The only value
        allowed in user.roles is 'endUser'. The id you supply here for the User and
        Account should be your own unique id, which Receptive calls external_id. This
        probably isn't the same as Receptive's id seen elsewhere in the API.
      parameters:
      - description: the account and user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/EndUserPing'
      responses:
        200:
          description: Success
      summary: Ping to create or update an EndUser and Account in one call
      tags:
      - user
      operationId: users.post
  /users/invite_end_user:
    post:
      parameters:
      - in: body
        name: data
        required: true
        schema:
          properties:
            account_external_id:
              type: string
            account_name:
              type: string
            account_status:
              enum:
              - prospect
              - not_paying
              - paying
              type: string
            email:
              type: string
            full_name:
              type: string
            monthly_value:
              format: float
              type: number
            send_invite:
              type: boolean
            user_external_id:
              type: string
          required:
          - account_status
          type: object
      responses:
        200:
          description: success
      summary: Invite an EndUser (customer)
      tags:
      - user
      operationId: users.invite_end_user.post
  /users/invite_vendor_user:
    post:
      consumes:
      - application/json
      parameters:
      - in: body
        name: data
        required: true
        schema:
          properties:
            email:
              type: string
            external_id:
              type: string
            full_name:
              type: string
            permission_group_id:
              format: integer
              type: number
            team:
              type: string
          required:
          - email
          - full_name
          type: object
      responses:
        200:
          description: success
      summary: Invite a VendorUser (Team member)
      tags:
      - user
      - team
      operationId: users.invite_vendor_user.post
  /users/search:
    get:
      parameters:
      - description: Find using your external ID, rather than the ID generated by
          Receptive
        in: query
        name: external_id
        required: false
        type: string
      - description: Find user by their email address. Role param must be specified
          when using this option
        in: query
        name: email
        required: false
        type: string
      - description: Users role ('vendorUser' or 'endUser'). Only useful when finding
          a user by their email address
        enum:
        - endUser
        - vendorUser
        in: query
        name: role
        type: string
      responses:
        200:
          description: the User record
          schema:
            $ref: '#/definitions/User'
        410:
          description: User has been deleted
      summary: Find a User with a query
      tags:
      - user
      operationId: users.search.get
  /users/{id}:
    delete:
      description: This removes most traces of a User's existence from the system.
        For an EndUser you might want to consider just letting them churn after a
        period of inactivity.
      parameters:
      - in: path
        name: id
        required: true
        type: number
      responses:
        200:
          description: the deleted User
          schema:
            $ref: '#/definitions/User'
      summary: Delete a User
      tags:
      - user
      operationId: users.id.delete
    get:
      parameters:
      - in: path
        name: id
        required: true
        type: number
      responses:
        200:
          description: the User record
          schema:
            $ref: '#/definitions/User'
        410:
          description: User has been deleted
      summary: Get a User record
      tags:
      - user
      operationId: users.id.get
    put:
      parameters:
      - description: Receptive's User ID
        in: path
        name: id
        required: true
        type: number
      - in: body
        name: user
        schema:
          properties:
            email:
              type: string
            external_id:
              type: string
            name:
              type: string
            permission_group_id:
              description: only valid for users with role 'vendorUser'
              format: integer
              type: number
          type: object
      responses:
        200:
          description: updated User
          schema:
            $ref: '#/definitions/User'
      summary: Update a User
      tags:
      - user
      operationId: users.id.put
  /users/{id}/tags:
    delete:
      description: Removes all custom tags associated with the User
      parameters:
      - description: Receptive's User ID
        in: path
        name: id
        required: true
        type: number
      responses:
        200:
          description: success
      summary: Delete custom User tags
      tags:
      - user
      operationId: users.id.tags.delete
    get:
      parameters:
      - description: Receptive's User ID
        in: path
        name: id
        required: true
        type: number
      responses:
        200:
          description: Returns an array of maps specifying tags under each tag group,
            for example:nn[nn{'impacts' => ['sales']},nn{'resources' => ['dev', 'test',
            'support']}nn]
        404:
          description: User not found
      summary: Get custom User tags
      tags:
      - user
      operationId: users.id.tags.get
    post:
      parameters:
      - description: Receptive's User ID
        in: path
        name: id
        required: true
        type: number
      - description: An array of maps specifying tags under each tag group, for example:nn[nn{'impacts'
          => ['sales']},nn{'resources' => ['dev', 'test', 'support']}nn]
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/Tags'
      responses:
        200:
          description: Updated User tags
        404:
          description: User not found
      summary: Overwrite current custom User tags with the given tags
      tags:
      - user
      operationId: users.id.tags.post
  /vendor_users:
    post:
      consumes:
      - application/json
      description: the POST /vendor_users is very similar to the POST /users/invite_vendor_user
        but /vendor_users is intended for consumers to refresh team member data periodically,
        rather than just a one-off user creation.
      parameters:
      - in: body
        name: data
        required: true
        schema:
          properties:
            email:
              type: string
            external_id:
              type: string
            full_name:
              type: string
            permission_group_id:
              format: integer
              type: number
            team:
              description: A comma seperated list of teams the user belongs to
              type: string
          type: object
      responses:
        200:
          description: success
      summary: Create or update a team member by their external_id
      tags:
      - user
      - team
      operationId: vendor_users.post
  /votes:
    get:
      parameters:
      - description: Include only votes by User that voted on a feature.
        in: query
        name: user_id
        required: false
        type: integer
      - description: Include only votes for Feature with this Feature ID
        in: query
        name: feature_id
        required: false
        type: integer
      - description: Include only votes that are positive
        in: query
        name: positive
        required: false
        type: boolean
      - description: Include only votes that are negative
        in: query
        name: negative
        required: false
        type: boolean
      - description: Offset to start at
        in: query
        minimum: 0
        name: start
        required: false
        type: number
      - description: Limit the number of records returned
        in: query
        minimum: 0
        name: limit
        required: false
        type: number
      responses:
        200:
          description: Vote records
          schema:
            items:
              $ref: '#/definitions/Vote'
            type: array
      tags:
      - votes
      operationId: votes.get
    post:
      description: Automatically subscribes/unsubscribes the User to the specifed
        feature depending on the quantity value
      parameters:
      - in: body
        name: data
        required: true
        schema:
          properties:
            user_id:
              type: string
            votes:
              items:
                $ref: '#/definitions/FeatureVote'
              type: array
          type: object
      responses:
        200:
          description: Updated votes
      summary: update specified votes for a User
      tags:
      - votes
      operationId: votes.post
produces:
- application/json
schemes:
- https
definitions: !php/object "O:8:\"stdClass\":10:{s:7:\"Account\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:10:\"created_at\";O:8:\"stdClass\":2:{s:6:\"format\";s:8:\"dateTime\";s:4:\"type\";s:6:\"string\";}s:11:\"external_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:54:\"ID
  for the Account, provided by the Receptive Customer\";s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_paying\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"monthly_value\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:15:\"AccountWithTags\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:10:\"created_at\";O:8:\"stdClass\":2:{s:6:\"format\";s:8:\"dateTime\";s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"is_paying\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:13:\"monthly_value\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"tags\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Tags\";}}s:4:\"type\";s:6:\"object\";}s:11:\"EndUserPing\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"account\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:29:\"#/definitions/AccountWithTags\";}s:10:\"return_url\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"user\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:16:\"allowed_products\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Products\";}s:10:\"created_at\";O:8:\"stdClass\":2:{s:6:\"format\";s:8:\"dateTime\";s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"full_name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"roles\";O:8:\"stdClass\":2:{s:4:\"enum\";a:1:{i:0;s:7:\"endUser\";}s:4:\"type\";s:6:\"string\";}s:4:\"tags\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Tags\";}}s:4:\"type\";s:6:\"object\";}}s:4:\"type\";s:6:\"object\";}s:7:\"Feature\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":26:{s:7:\"app_url\";O:8:\"stdClass\":2:{s:11:\"description\";s:20:\"URL
  for this Feature\";s:4:\"type\";s:6:\"string\";}s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"created_by_user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:11:\"declined_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"developing_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"effort\";O:8:\"stdClass\":2:{s:11:\"description\";s:87:\"How
  much Effort is assigned to the development of this Feature. Not visible to EndUsers\";s:4:\"type\";s:7:\"integer\";}s:10:\"form_entry\";O:8:\"stdClass\":2:{s:11:\"description\";s:99:\"a
  JSON serialized version of the Form containing the description and other fields
  for this Feature.\";s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"is_private\";O:8:\"stdClass\":2:{s:11:\"description\";s:37:\"Is
  this Feature hidden from EndUsers?\";s:4:\"type\";s:7:\"boolean\";}s:20:\"merged_to_feature_id\";O:8:\"stdClass\":2:{s:11:\"description\";s:72:\"If
  this Feature was merged into another, the ID of the preserved Feature\";s:4:\"type\";s:7:\"integer\";}s:10:\"planned_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"products\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":2:{s:11:\"description\";s:37:\"Products
  associated with this Feature\";s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"released_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"resolution\";O:8:\"stdClass\":2:{s:11:\"description\";s:43:\"The
  latest Resolution set by the VendorUser\";s:4:\"type\";s:6:\"string\";}s:19:\"resolved_by_user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"enum\";a:6:{i:0;s:3:\"new\";i:1;s:7:\"waiting\";i:2;s:7:\"planned\";i:3;s:10:\"developing\";i:4;s:8:\"released\";i:5;s:8:\"declined\";}s:4:\"type\";s:6:\"string\";}s:17:\"status_changed_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"tags\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:18:\"#/definitions/Tags\";}s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"updated_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"updated_by_user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:7:\"uploads\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:9:\"vendor_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:10:\"view_count\";O:8:\"stdClass\":2:{s:11:\"description\";s:100:\"How
  many times has this Feature been viewed. May only be visible to VendorUsers, depending
  on config\";s:4:\"type\";s:7:\"integer\";}s:10:\"waiting_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:11:\"FeatureVote\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:10:\"feature_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"quantity\";O:8:\"stdClass\":2:{s:11:\"description\";s:92:\"Value
  between -1 and 1000000. -1 indicates that the User is \"Not Interested\" in the
  feature.\";s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}s:8:\"Products\";O:8:\"stdClass\":3:{s:11:\"description\";s:288:\"Supplied
  as an array of maps where each map describes an existing or new product e.g [{id:exising_product_id,
  name:existing name}, {id:new_product_id, name: new product name}]. \nExisting product
  id/names held in your account can be referenced at https://receptive.io/app/#/vendor/products\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:4:\"Tags\";O:8:\"stdClass\":3:{s:11:\"description\";s:289:\"Simple
  tags are supplied as an array of Strings e.g ['Foo', 'Bar']. \nTo put the tags in
  categories replace the Strings with maps of using tag category as the key and tag
  value as the value, e.g \n\n[\n{Color:Red}, {Flavor:Cherry}\n]. Simple and categorised
  tags can be mixed in the same array.\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:4:\"User\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"account\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:25:\"#/definitions/UserAccount\";}s:10:\"created_at\";O:8:\"stdClass\":2:{s:6:\"format\";s:8:\"dateTime\";s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"external_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"roles\";O:8:\"stdClass\":2:{s:4:\"enum\";a:1:{i:0;s:7:\"endUser\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:11:\"UserAccount\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"monthly_value\";O:8:\"stdClass\":2:{s:6:\"format\";s:5:\"float\";s:4:\"type\";s:6:\"number\";}s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"enum\";a:3:{i:0;s:6:\"paying\";i:1;s:8:\"prospect\";i:2;s:10:\"not_paying\";}s:4:\"type\";s:6:\"string\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Vote\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":5:{s:10:\"created_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"feature_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:8:\"quantity\";O:8:\"stdClass\":2:{s:11:\"description\";s:162:\"A
  negative number indicates that the User has indicated \"Not Interested\" in a Features.
  Between 0 and 1000000 is the User's current prioritization of the Feature.\";s:4:\"type\";s:7:\"integer\";}s:10:\"updated_at\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"user_id\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}s:4:\"type\";s:6:\"object\";}}"
...
