---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":2:{s:7:\"version\";s:5:\"0.0.1\";s:5:\"title\";s:10:\"CrowdSauce\";}"
host: localhost:3000
basePath: /
paths:
  /api/posts/trending/:
    get:
      operationId: get trending
      tags:
      - posts
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/PostTrending'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook userId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - in: header
        default: 3
        name: numposts
        type: integer
        description: Number of posts to provide
      description: Get the top X most favorited posts in the past week (not necessarily
        made by friends)
  /api/posts/feed/:
    get:
      operationId: get feed
      tags:
      - posts
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/PostFeed'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: string
        description: The userId used to retrieve list of friends
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - in: header
        default: 10
        name: numposts
        type: integer
        description: Number of posts to provide
      - in: header
        default: 0
        name: offset
        type: integer
        description: Number of posts to skip
      description: Get the list of the most recent posts from the given user's friends
  /api/posts/:
    put:
      operationId: update post
      tags:
      - posts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: number
        description: 'AUTHENTICATION: The facebook userId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        description: Post data
        name: body
        schema:
          $ref: '#/definitions/PostUpdate'
      description: Update a post with any new data except postId which is a primary
        key, which is a required field in the body of the request.
    post:
      operationId: create post
      tags:
      - posts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: The userId of the user creating the post.
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        description: Post data
        name: body
        schema:
          $ref: '#/definitions/Post'
      description: Create a new post
    get:
      operationId: get posts
      tags:
      - posts
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/Post'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: number
        description: 'AUTHENTICATION: The facebook userId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: false
        type: string
        description: 'QUERY: notes to filter the response on.'
        in: query
        name: notes
      - required: false
        type: integer
        description: 'QUERY: rating to filter the response on.'
        in: query
        name: rating
      - required: false
        type: string
        description: 'QUERY: postId to filter the response on.'
        in: query
        name: postId
      - required: false
        type: string
        description: 'QUERY: images to filter the response on.'
        in: query
        name: images
      - required: false
        type: string
        description: 'QUERY: recipeLink to filter the response on.'
        in: query
        name: recipeLink
      - required: false
        type: integer
        description: 'QUERY: userId to filter the response on.'
        in: query
        name: userId
      description: 'Returns a list of all the posts. Note: Currently only query on
        one thing.'
    delete:
      operationId: delete post
      tags:
      - posts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: string
        description: 'AUTHENTICATION: The facebook userId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        name: body
        schema:
          $ref: '#/definitions/PostDelete'
      description: Delete a post by postId (userId is required to make sure it's your
        post). All favorites on the post are also deleted, all tagHistory on the post
        are also deleted, and if any tagHistory on this post is the last of that tag,
        the tag object itself is also deleted
  /swagger:
    x-swagger-pipe: swagger_raw
  /api/shoppinglist/items/:
    post:
      operationId: Create shoppinglist items
      tags:
      - shoppinglist
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account to create
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        description: Post data
        name: body
        schema:
          $ref: '#/definitions/Shoppinglist'
      description: Add items to a shoppinglist without overwriting previous ones
    x-swagger-router-controller: hello_world
    delete:
      operationId: delete shoppinglist items
      tags:
      - shoppinglist
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account to delete
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        description: Post data
        name: body
        schema:
          $ref: '#/definitions/Shoppinglist'
      description: Delete specific items from a shoppinglist
  /api/shoppinglist/:
    get:
      operationId: get shoppinglist
      tags:
      - shoppinglist
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/Shoppinglist'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: number
        description: The facebook userId of the user to get shoppinglist of.
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      description: 'Returns a list of all the accounts currently stored. Note: currently
        only query on one item at once.'
    post:
      operationId: Create shoppinglist
      tags:
      - shoppinglist
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account to create
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        description: Post data
        name: body
        schema:
          $ref: '#/definitions/Shoppinglist'
      description: Create new shoppinglist for a user
    x-swagger-router-controller: hello_world
    delete:
      operationId: delete shoppinglist
      tags:
      - shoppinglist
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account to delete
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      description: Delete a shoppinglist
  /api/accounts/:
    put:
      operationId: update account
      tags:
      - accounts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: number
        description: The userId of the account that needs to be updated
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        in: body
        description: Account data
        name: body
        schema:
          $ref: '#/definitions/AccountUpdate'
      description: Update an account with any new data except userId which is a primary
        key.
    get:
      operationId: get accounts
      tags:
      - accounts
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/Account'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: number
        description: 'AUTHENTICATION: The facebook userId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: false
        type: number
        description: 'QUERY: email to filter the response on.'
        in: query
        name: email
      - required: false
        type: number
        description: 'QUERY: name to filter the response on.'
        in: query
        name: name
      - required: false
        type: number
        description: 'QUERY: picture to filter the response on.'
        in: query
        name: picture
      - required: false
        type: number
        description: 'QUERY: userId to filter the response on.'
        in: query
        name: userId
      description: 'Returns a list of all the accounts currently stored. Note: currently
        only query on one item at once.'
    post:
      operationId: create account
      tags:
      - accounts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account to create
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      description: Create new account
    x-swagger-router-controller: hello_world
    delete:
      operationId: delete account
      tags:
      - accounts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account to delete
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      description: Delete account by userid, all posts made by the user are deleted,
        all favorites made by the user are deleted, all favorites on the deleted posts
        are deleted, all tagHistory on the deleted posts are deleted, and if any of
        these tagHistory is the last of that tag, the tag object itself is also deleted
  /api/accounts/block/:
    post:
      operationId: block
      tags:
      - accounts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account doing the blocking
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        description: Contains the user to block
        in: body
        name: body
        schema:
          $ref: '#/definitions/BlockUser'
      description: Block a user
    delete:
      operationId: unblock
      tags:
      - accounts
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for the account doing the unblocking
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        description: Contains the user to unblock
        in: body
        name: body
        schema:
          $ref: '#/definitions/BlockUser'
      description: Unblock a user
  /api/tags/:
    get:
      operationId: add a tag
      tags:
      - tags
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/Tag'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: integer
        description: 'AUTHENTICATION: The facebook userId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      description: Gets all the tags in the database.
    post:
      operationId: add a tag
      tags:
      - tags
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/TagReturn'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: integer
        description: 'AUTHENTICATION: The usedId to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        description: Contains data about the tag to be posted
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddTag'
      description: This will add a tag (does not have to be an existing tag) to a
        specific post.
    delete:
      operationId: delete tag
      tags:
      - tags
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: integer
        description: 'AUTHENTICATION: The userId of to be authenticated.'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        description: Contains data about the tag to be deleted
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddTag'
      description: 'If a postId and a tagName are specified in the body of the request
        only tagHistory matching those two parameters will be removed. If exclusively
        one of them is specified it will delete all tagHistory matching that specified
        field. Also if a tagHistory is the last of a tag, that tag is also deleted. '
  /api/tags/post/:
    get:
      operationId: Add an existing tag to a post
      tags:
      - tags
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/TagReturn'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: integer
        description: UserID for user
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        type: string
        description: The postId of which we want to get all TagHistory objects.
        in: query
        name: postId
      description: This will return all the tags for a specific post. The postId must
        be specified in the query.
  /api/tags/feed/:
    get:
      operationId: get feed
      tags:
      - tags
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/PostFeed'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: string
        description: Used to get all friends to generate a feed.
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - in: header
        default: 10
        name: numposts
        type: integer
        description: Number of posts to provide
      - in: header
        default: 0
        name: offset
        type: integer
        description: Number of posts to skip
      - required: true
        in: query
        name: tagNames
        type: array
        description: The tags to generate a feed of results on.
      description: This will return a feed (with posts) for a given tag names which
        is specified as query.
  /api/favorites/:
    post:
      operationId: add a favorite
      tags:
      - favorites
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID of user doing the favoriting
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        description: Contains the post to favorite
        in: body
        name: body
        schema:
          $ref: '#/definitions/FavoritePost'
      description: This creates a favorite object that associates a userId with a
        postId and vice versa.
    delete:
      operationId: delete favorite
      tags:
      - favorites
      responses:
        default:
          description: Error
        200:
          description: Success
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: integer
        description: 'AUTHENTICATION: UserID for user doing the unfavoriting'
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        description: Contains the post to unfavorite
        in: body
        name: body
        schema:
          $ref: '#/definitions/FavoriteDelete'
      description: If a userId and a postId are passed in then a single favorite object
        will be deleted. If only a userId all the favorites of that userId will be
        deleted, if only a postId is specified all the favorite objects containing
        that postId will be deleted.
  /api/favorites/user/:
    get:
      operationId: get user favorites
      tags:
      - favorites
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/FavoriteReturnUser'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: true
        type: integer
        description: UserID for user
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - in: header
        default: 10
        name: numposts
        type: integer
        description: Number of posts to provide
      - in: header
        default: 0
        name: offset
        type: integer
        description: Number of posts to skip
      description: This will return favorite objects containing postId and userId
        of a given user.
  /api/favorites/post/:
    get:
      operationId: get post favorites
      tags:
      - favorites
      responses:
        default:
          description: Error
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/FavoriteReturnPost'
            type: array
        401:
          description: Unauthorized
      parameters:
      - required: false
        type: integer
        description: UserID for user
        in: header
        name: userid
      - required: false
        type: string
        description: 'AUTHENTICATION: The facebook accesstoken of the user to be authenticated.'
        in: header
        name: accesstoken
      - required: true
        type: string
        description: The post to get a favorites for
        in: query
        name: postId
      description: Get all the favorite objects containing userIds and the postId
        of a given post, for all users who liked the post.
produces:
- application/json
schemes:
- http
- https
definitions: !php/object "O:8:\"stdClass\":16:{s:10:\"PostDelete\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:8:\"PostFeed\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":11:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"prepTime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"difficulty\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:4:\"easy\";i:1;s:6:\"medium\";i:2;s:4:\"hard\";}}s:10:\"directions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"ingredients\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"images\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"notes\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"recipeLink\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"PostTrending\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":10:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:9:\"favorites\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"directions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"ingredients\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"images\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"notes\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"recipeLink\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:10:\"PostUpdate\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":10:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"prepTime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"difficulty\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:4:\"easy\";i:1;s:6:\"medium\";i:2;s:4:\"hard\";}}s:10:\"directions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"ingredients\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"images\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"notes\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"recipeLink\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:4:\"Post\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":9:{s:5:\"title\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"prepTime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"difficulty\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:4:\"easy\";i:1;s:6:\"medium\";i:2;s:4:\"hard\";}}s:10:\"directions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"ingredients\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"images\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:5:\"notes\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"recipeLink\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:12:\"Shoppinglist\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:11:\"ingredients\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}}}s:7:\"Account\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:13:\"AccountUpdate\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":4:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"picture\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"notification\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:12:\"FavoritePost\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:14:\"FavoriteDelete\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:6:\"AddTag\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"tagName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:3:\"Tag\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"tagName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"TagReturn\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:7:\"tagName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:18:\"FavoriteReturnUser\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":10:{s:6:\"rating\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"prepTime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"difficulty\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:4:\"enum\";a:3:{i:0;s:4:\"easy\";i:1;s:6:\"medium\";i:2;s:4:\"hard\";}}s:10:\"directions\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:11:\"ingredients\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"type\";s:5:\"array\";}s:6:\"images\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"notes\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"recipeLink\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"user\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}}}s:18:\"FavoriteReturnPost\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"userId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"postId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:9:\"BlockUser\";O:8:\"stdClass\":1:{s:10:\"properties\";O:8:\"stdClass\":1:{s:6:\"userid\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}}}}"
...
