---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":4:{s:7:\"version\";s:2:\"v1\";s:5:\"title\";s:22:\"Yupi
  Emulator REST API\";s:11:\"description\";s:2433:\"Yupi Emulator is an open-source
  HH Emulator, being designed and writed in C#.\nYupi will have a new ultimate feature,
  the Emulator REST API.\nYou will know now for what this API is deserved and its
  intentions.\n\n## Reason\nThis API deserve to be a way of external commands communication
  with the Emulator.\nThe intention it's that the Emulator Database (SQL) will not
  be editable by the end-user, or the developer. Since the Emulator is totally controlled
  with reactive datas and using an ORM way of service providing. The main intention
  of this API it's the ability of serve native commands to change any database table
  content, with a MVC engine provided by the Emulator, with an interaction system,
  able to handle those commands and decide with action need to be taken. As an example,
  editing a room, will make that a specific controller handle it, after the alteration
  of the data and abling to the room being reloaded (packets). In other way this API
  will serve RCON commands, like \"broadcast\", and such other commands.\n\nThrough
  the REST API you will be able to edit any data related to in-game things. Like Navigator,
  Catalogue, Furniture, Users, User Permissions, Groups, Bots, Pets and more. This
  API it's totally **experimental**, and being designed.\n\n## Server Facts\nThe HTTP
  Request will be handled by the REST Module of the Emulator. Every Actor of the system
  (Eg.: Users) will have a desired Controller module that will Handler a specific
  Interaction. In case of Users, the Handler will send a Composer to the Client updating
  user information. And send a message to REST Module like \"Edited User Data Successfully\"
  (converted to jSON with HTTP Codes). NHibernate will update the Models and send
  it back to Database through Transactions.\n\n#### HTTP Codes\nThe REST API will
  follow HTTP codes, like {200, 404, 500, and others} and also it owns Response Codes,
  in HTTP Header.\n\n## Security\nThe server will be obrigatory using TLS connection.
  (HTTPS:// Wrapper). You can disable it in the Settings of the Emulator, but is not
  recommended. The Emulator will only answer Requests through a White List in the
  Emulator Settings. Also the Authentication will be made by a Token.\n\n#### Token\nThe
  token will be a BASE64 + MCRYPT 24 Bit Length Shared Key. The Key will be stored
  in the Application (Like CMS) and in the Emulator.\nFuturely each application will
  have an own Token.\nThe connection will be secure by TLS 1.2 + RC4 Encryption\n\";s:14:\"termsOfService\";s:20:\"http://yupi-emu.xyz/\";}"
host: youremulator:8080
basePath: /api
paths:
  /auth/{auth-token}:
    parameters:
    - $ref: '#/parameters/auth-token'
    get:
      tags:
      - Check Token
      description: Check if Token is Valid
      responses:
        200:
          description: 200 OK Created Token
          schema:
            type: object
            properties:
              message:
                type: string
              auth-code:
                type: string
        403:
          description: Invalid Token
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: Token not Found
          schema:
            type: object
            properties:
              message:
                type: string
    post:
      tags:
      - Create Token
      description: Create a new token providing Administrator Token
      responses:
        200:
          description: 200 OK Created Token
          schema:
            type: object
            properties:
              message:
                type: string
              auth-code:
                type: string
        403:
          description: Invalid Token
          schema:
            type: object
            properties:
              message:
                type: string
  /sso/{user-id}:
    parameters:
    - $ref: '#/parameters/token'
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - SSO Auth
      description: Auth user in client to return SSO code
      responses:
        200:
          description: The SSO object
          schema:
            type: object
            properties:
              sso:
                type: string
  /user/{user-id}:
    parameters:
    - $ref: '#/parameters/token'
    - $ref: '#/parameters/user-id'
    get:
      tags:
      - Gather user Data
      description: Get User Data
      responses:
        200:
          description: User Data
          schema:
            type: object
            properties:
              user-id:
                type: number
              user-name:
                type: string
              user-look:
                type: string
              user-rank:
                type: number
              user-sex:
                type: string
        403:
          description: Not Allowed (Invalid or Expired Token)
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: Not Found (User not Found)
          schema:
            type: object
            properties:
              message:
                type: string
    put:
      parameters:
      - name: user-name
        in: query
        description: The user name
        type: string
      - name: user-look
        in: query
        description: The user look
        type: string
      - name: user-rank
        in: query
        description: The user rank
        type: number
      - name: user-mail
        in: query
        description: The user Mail
        type: string
      - name: user-sex
        in: body
        description: The user sex parameter
        schema:
          type: string
          enum:
          - male
          - female
      tags:
      - Edit User
      description: Edit user Data
      responses:
        200:
          description: OK Response
          schema:
            type: object
            properties:
              message:
                type: string
        403:
          description: Not Allowed (Invalid or Expired Token)
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: Not Found (User not Found)
          schema:
            type: object
            properties:
              message:
                type: string
    post:
      parameters:
      - name: user-name
        in: query
        description: The user name
        type: string
        required: true
      - name: user-look
        in: query
        description: The user look
        type: string
        required: true
      - name: user-rank
        in: query
        description: The user rank
        type: number
        required: true
      - name: user-sex
        in: body
        description: The user sex parameter
        required: true
        schema:
          type: string
          enum:
          - male
          - female
      - name: user-mail
        in: query
        description: The user Mail
        type: string
        required: true
      tags:
      - Create User
      description: Create a new User
      responses:
        200:
          description: OK Response
          schema:
            type: object
            properties:
              message:
                type: string
              user-id:
                type: number
        402:
          description: User already exists
          schema:
            type: object
            properties:
              message:
                type: string
        403:
          description: Not Allowed (Invalid or Expired Token)
          schema:
            type: object
            properties:
              message:
                type: string
produces:
- application/json
schemes:
- http
...
