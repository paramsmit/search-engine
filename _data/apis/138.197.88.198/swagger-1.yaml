---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":3:{s:11:\"description\";s:66:\"API Development
  Document with current endpoints hosted on l2lc-dev\";s:7:\"version\";s:5:\"1.0.1\";s:5:\"title\";s:8:\"l2lc
  API\";}"
host: 138.197.88.198:8080
basePath: /l2lc/api
paths:
  /employee/create:
    post:
      tags:
      - Employee
      summary: Add a new employee
      description: ""
      operationId: addEmployee
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Employee object to be added to database
        required: true
        schema:
          $ref: '#/definitions/Create_Employee_Input'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Create_Employee_Output'
        406:
          description: Not Acceptable input
          schema:
            $ref: '#/definitions/Error'
  /employee/{id}/update:
    post:
      tags:
      - Employee
      summary: Add a new employee
      description: ""
      operationId: updateEmployeeById
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: Numeric Id of the employee
      - in: body
        name: body
        description: Employee object to be added to database
        required: true
        schema:
          $ref: '#/definitions/Create_Employee_Input'
      responses:
        200:
          description: OK, update successful
          schema:
            $ref: '#/definitions/Create_Employee_Output'
        404:
          description: Not Found
        406:
          description: Not Acceptable input
          schema:
            $ref: '#/definitions/Error'
  /employee/{id}:
    get:
      tags:
      - Employee
      summary: Get an employee's information from their id
      operationId: getEmployeeById
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: Numeric Id of the employee
      responses:
        200:
          description: Employee was successfully retrieved
          schema:
            $ref: '#/definitions/Create_Employee_Output'
        404:
          description: Employee Not found
  /employee/{id}/remove:
    delete:
      tags:
      - Employee
      summary: Remove an employee
      operationId: removeEmployeeById
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: integer
        required: true
        description: Numeric Id of the employee
      responses:
        200:
          description: OK
        404:
          description: Employee Not Found
  /employee:
    get:
      tags:
      - Employee
      summary: Get All Employees
      operationId: getAllEmployees
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        type: integer
        required: false
        description: The amount of maximum amount of items to be returned
      - in: query
        name: offset
        type: integer
        required: false
        description: The offset to be used when obtaining items.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              limit:
                type: integer
                example: 50
              offset:
                type: integer
                example: 0
              items:
                type: array
                items:
                  $ref: '#/definitions/Create_Employee_Output'
  /customer/create:
    post:
      tags:
      - Customer
      summary: Create a customer
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/Create_Customer_Input'
      responses:
        201:
          description: Customer created
          schema:
            $ref: '#/definitions/Create_Customer_Output'
        406:
          description: Not Acceptable input
          schema:
            $ref: '#/definitions/Error'
  /customer/{id}:
    get:
      tags:
      - Customer
      summary: Get customer information
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: OK, customer was found
          schema:
            $ref: '#/definitions/Create_Customer_Output'
        404:
          description: Customer not found
  /customer/{id}/update:
    post:
      tags:
      - Customer
      summary: Update a customer
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: body
        name: in_body
        schema:
          $ref: '#/definitions/Create_Customer_Input'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Create_Customer_Output'
        404:
          description: Not Found
        406:
          description: Not Acceptable
  /customer:
    get:
      tags:
      - Customer
      summary: Get all customers
      parameters:
      - in: query
        name: limit
        type: integer
        required: false
        description: The amount of maximum amount of items to be returned
      - in: query
        name: offset
        type: integer
        required: false
        description: The offset to be used when obtaining items.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              limit:
                type: integer
                example: 50
              offset:
                type: integer
                example: 0
              items:
                type: array
                items:
                  $ref: '#/definitions/Create_Customer_Output'
  /customer/{id}/remove:
    delete:
      tags:
      - Customer
      summary: Delete a customer
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      responses:
        200:
          description: OK
        404:
          description: Not Found
  /user/create:
    post:
      tags:
      - User
      summary: Create a new User
      parameters:
      - in: body
        name: in_body
        schema:
          $ref: '#/definitions/Create_User_Input'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Create_User_Output'
        406:
          description: Not_Acceptable
          schema:
            $ref: '#/definitions/Error'
  /user/login:
    post:
      tags:
      - User
      summary: validate a username and password combination
      parameters:
      - in: body
        name: in_body
        schema:
          properties:
            username:
              type: string
              example: jlbornemann
            password:
              type: string
              example: thisismytuxpassword
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Create_User_Output'
        401:
          description: UNAUTHORIZED
  /user/{id}:
    get:
      tags:
      - User
      summary: Get User by Id
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Create_User_Output'
        404:
          description: NOT_FOUND
  /user/enum/station:
    get:
      tags:
      - Enum
      summary: Get all registered stations
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
              example: Receiving
  /project/enum/cost-center:
    get:
      tags:
      - Enum
      summary: Get all Cost Centers
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
              example: APC
  /project/enum/status:
    get:
      tags:
      - Enum
      summary: Get project status enum
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
              example: Completed
  /project/enum/priority:
    get:
      tags:
      - Enum
      summary: Get project priority enum
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
              example: Low
  /project/enum/jobtype:
    get:
      tags:
      - Enum
      summary: Get all project jobtypes
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: string
              example: Piston
  /project/create:
    post:
      tags:
      - Project
      summary: Create a new project
      produces:
      - application/json
      parameters:
      - in: body
        name: in_body
        schema:
          $ref: '#/definitions/Create_Project_Input'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Create_Project_Output'
        406:
          description: Not Acceptable
          schema:
            $ref: '#/definitions/Error'
  /project/{id}:
    get:
      tags:
      - Project
      summary: Get project by id
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: integer
        description: The id of the project
        required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Create_Project_Output'
        404:
          description: Project Not Found
  /project:
    get:
      tags:
      - Project
      summary: Get A page of projects
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
        required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              limit:
                type: integer
                example: 50
              offset:
                type: integer
                example: 0
              items:
                type: array
                items:
                  $ref: '#/definitions/Create_Project_Output'
  /project/{id}/update:
    post:
      summary: Update project by id
      tags:
      - Project
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: body
        name: in_body
        schema:
          $ref: '#/definitions/Create_Project_Input'
      responses:
        202:
          description: Accepted
          schema:
            $ref: '#/definitions/Create_Project_Output'
        406:
          description: Not Acceptable
          schema:
            $ref: '#/definitions/Error'
  /project/{id}/status:
    post:
      tags:
      - Project
      summary: Change status of project
      parameters:
      - in: path
        name: id
        type: integer
        required: true
      - in: query
        name: status
        type: string
        description: Acceptable values include (Recieved, In Progress, Completed)
        required: true
      responses:
        202:
          description: Accepted
        404:
          description: Project Not Found
        406:
          description: Not Acceptable
          schema:
            $ref: '#/definitions/Error'
  /project/{id}/time-entry/create:
    post:
      tags:
      - Time Entry
      summary: Add a time entry to a project
      parameters:
      - in: path
        description: the project id
        name: id
        type: integer
        required: true
      - in: query
        name: employeeId
        type: string
        required: true
      - in: query
        name: station
        type: string
        required: true
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Time_Entry'
        406:
          description: Not Acceptable
          schema:
            $ref: '#/definitions/Error'
  /project/{id}/time-entry:
    get:
      tags:
      - Time Entry
      summary: Get all time entries for a project
      parameters:
      - in: path
        description: the project Id
        name: id
        type: integer
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Time_Entry'
        404:
          description: Project Not Found
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":12:{s:21:\"Create_Employee_Input\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"object\";s:8:\"required\";a:2:{i:0;s:9:\"firstName\";i:1;s:8:\"lastName\";}s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"firstName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"Joel\";}s:8:\"lastName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:9:\"Bornemann\";}}}s:22:\"Create_Employee_Output\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:12;}s:9:\"firstName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:4:\"Joel\";}s:8:\"lastName\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:9:\"Bornemann\";}}}s:21:\"Create_Customer_Input\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:37:\"Jeff
  Salvage's Scooter Racing Company\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:18:\"salvage@drexel.edu\";}s:7:\"website\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:19:\"salvagescooters.com\";}s:12:\"shippingAddr\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/Address_Input\";}s:11:\"billingAddr\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:27:\"#/definitions/Address_Input\";}s:9:\"isPastDue\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"example\";b:0;}s:11:\"phoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:3:\"911\";}}}s:22:\"Create_Customer_Output\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:12;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:37:\"Jeff
  Salvage's Scooter Racing Company\";}s:5:\"email\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:18:\"salvage@drexel.edu\";}s:7:\"website\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:19:\"salvagescooters.com\";}s:12:\"shippingAddr\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/Address_Output\";}s:11:\"billingAddr\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:28:\"#/definitions/Address_Output\";}s:9:\"isPastDue\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"example\";b:0;}s:11:\"phoneNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:3:\"911\";}}}s:14:\"Address_Output\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:2;}s:6:\"street\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:11:\"123
  fake st\";}s:4:\"city\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:12:\"Philadelphia\";}s:5:\"state\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:2:\"PA\";}s:7:\"country\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:3:\"USA\";}s:3:\"zip\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:5:\"19104\";}}}s:13:\"Address_Input\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:6:\"street\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:11:\"123
  fake st\";}s:4:\"city\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:12:\"Philadelphia\";}s:5:\"state\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:2:\"PA\";}s:7:\"country\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:3:\"USA\";}s:3:\"zip\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:5:\"19104\";}}}s:17:\"Create_User_Input\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:8:\"username\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:11:\"jlbornemann\";}s:8:\"password\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:17:\"thismytuxpassword\";}s:5:\"admin\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"example\";b:1;}s:9:\"stationId\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:4;}}}s:18:\"Create_User_Output\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:12;}s:8:\"username\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:11:\"jlbornemann\";}s:5:\"admin\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"example\";b:1;}s:9:\"stationId\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:4;}}}s:20:\"Create_Project_Input\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:8:\"customer\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:666;}}}s:7:\"jobType\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"Piston\";}s:10:\"costCenter\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:11:\"description\";s:118:\"Acceptable
  values include: (APC, Decorative, Maintenance, Administration, Production, Research
  and Development, Other)\";s:7:\"example\";s:3:\"APC\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:15:\"This
  is a title\";}s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:17:\"freowkfoerqkpofer\";}s:8:\"priority\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:3:\"Low\";}s:9:\"partCount\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:32;}s:9:\"refNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:8:\"43049304\";}}}s:21:\"Create_Project_Output\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":11:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:12;}s:8:\"customer\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:666;}s:4:\"name\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:37:\"Jeff
  Salvage's Scooter Racing Company\";}}}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:1518553113959;}s:13:\"projectStatus\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:8:\"Recieved\";}s:7:\"jobType\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:6:\"Piston\";}s:10:\"costCenter\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:10:\"CostCenter\";}s:5:\"title\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:15:\"This
  is a title\";}s:11:\"description\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:17:\"freowkfoerqkpofer\";}s:8:\"priority\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:3:\"Low\";}s:9:\"partCount\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:32;}s:9:\"refNumber\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:8:\"43049304\";}}}s:10:\"Time_Entry\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":5:{s:2:\"id\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:3;}s:9:\"projectId\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:5;}s:10:\"employeeId\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:2;}s:7:\"station\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:9:\"Receiving\";}s:7:\"created\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"integer\";s:7:\"example\";i:1518645459489;}}}s:5:\"Error\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:14:\"NOT_ACCEPTABLE\";}s:13:\"errorMessages\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:7:\"example\";s:18:\"Some
  Error Message\";}}}}}"
...
