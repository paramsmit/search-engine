---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":6:{s:11:\"description\";s:203:\"This is the documentation
  of the APIs we used in our RiderTrack Application.  You can find out more about
  \   RiderTrack at [https://ridertrack-app.herokuapp.com/]( https://ridertrack-app.herokuapp.com/).\";s:7:\"version\";s:5:\"1.0.0\";s:5:\"title\";s:18:\"Swagger
  RiderTrack\";s:14:\"termsOfService\";s:24:\"http://swagger.io/terms/\";s:7:\"contact\";O:8:\"stdClass\":1:{s:5:\"email\";s:27:\"ridertrackproject@gmail.com\";}s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:10:\"Apache
  2.0\";s:3:\"url\";s:47:\"http://www.apache.org/licenses/LICENSE-2.0.html\";}}"
host: ridertrack-app.herokuapp.com
paths:
  /api/events/save/:
    post:
      security:
      - bearerAuth:[]
      tags:
      - Event
      summary: Save an event to database
      description: Save an event to database
      operationId: save
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Event
        description: Event that needs to be added to the db
        required: true
        schema:
          $ref: '#/definitions/Events'
      responses:
        200:
          description: successful operation
  /api/events/register/:
    get:
      security:
      - bearerAuth:[]
      tags:
      - Event
      summary: Gets all registered events for that user
      description: gives all events in the form of an array
      operationId: registerEvent
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: id of event
        required: true
        type: string
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Events'
  /api/events/register_events/:
    get:
      security:
      - bearerAuth:[]
      tags:
      - Event
      summary: Gets all registered events for that user
      description: gives all events in the form of an array
      operationId: registered_events
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: id of event
        required: true
        type: string
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Events'
  /api/events/unregister/:
    post:
      security:
      - bearerAuth:[]
      tags:
      - Event
      summary: Unregisted from Events
      description: Have to be logged in to unregister
      operationId: unregister
      responses:
        200:
          description: successfully unregistered from event
          schema:
            $ref: '#/definitions/Result'
  /api/events/{eventID}:
    get:
      tags:
      - Event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventbyID
      produces:
      - application/json
      - application/xml
      parameters:
      - name: eventID
        in: path
        description: ID of event to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Events'
        404:
          description: event not found
  /api/events/:
    get:
      tags:
      - Event
      summary: Get all events
      description: Return all  events
      operationId: getEvent
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Events'
  /api/users/forgotpwd/:
    post:
      tags:
      - Rider
      summary: Forgot Password route
      description: Sends a password reset link to the user's email id
      operationId: forgotPass
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: successfully sent email
          schema:
            $ref: '#/definitions/Result'
  /api/users/getEventStats/:
    get:
      security:
      - bearerAuth:[]
      tags:
      - Rider
      summary: Get user statistics
      description: Shows stats suchs as max speed average speed etc
      operationId: showStats
      produces:
      - application/json
      responses:
        200:
          description: Retrieved stats successfully
          schema:
            $ref: '#/definitions/RaceStats'
  /api/users/eventplotpoints/:
    get:
      security:
      - bearerAuth:[]
      tags:
      - Rider
      summary: Get points for the graphs
      description: Gets the points for the graph to show on the user dashboard
      operationId: eventPlot
      produces:
      - application/json
      responses:
        200:
          description: Retrieved stat plots successfully
  /api/users/:
    post:
      tags:
      - Rider
      summary: Register new user
      description: Provide username, pass and email id
      operationId: registerRider
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: credentials
        in: body
        description: username, pass, email
        required: true
        schema:
          $ref: '#/definitions/CreateUserCredentials'
      responses:
        200:
          description: User successfully registered
  /api/users/login/:
    post:
      tags:
      - Rider
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      consumes:
      - application/json
      produces:
      - application/xml
      - application/json
      parameters:
      - name: credentials
        in: body
        description: The user name for login
        required: true
        schema:
          $ref: '#/definitions/LoginCredentials'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Events'
        422:
          description: Unprocessable Entity
  /api/tracking/saveloc/:
    post:
      security:
      - bearerAuth:[]
      tags:
      - AthleteTracking
      summary: Post athlete location
      description: Send athlete's location via Apple Watch
      operationId: saveLoc
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: gpsStats
        in: body
        description: racing stats sent
        required: true
        schema:
          $ref: '#/definitions/RaceStats'
      responses:
        200:
          description: OK
  /api/tracking/getLoc/:
    get:
      security:
      - bearerAuth:[]
      tags:
      - AthleteTracking
      summary: Get athlete's location
      description: Get's athlete's location and displays it on dashboard
      operationId: getLoc
      produces:
      - application/json
      parameters:
      - name: eventId
        in: path
        description: eventId of the event the user is participating in
        required: true
        type: string
      responses:
        200:
          description: Fetched the location
          schema:
            $ref: '#/definitions/RaceStats'
schemes:
- http
definitions: !php/object "O:8:\"stdClass\":8:{s:6:\"Events\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":14:{s:4:\"name\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"image\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:11:\"description\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"date\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:4:\"date\";}s:8:\"location\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"startTime\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:7:\"endTime\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"string\";s:6:\"format\";s:9:\"date-time\";}s:9:\"trackFile\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"track\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":3:{s:9:\"elevation\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:6:\"lenght\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:10:\"difficulty\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:11:\"eventRiders\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Rider\";}}s:11:\"raceWinners\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Rider\";}}s:12:\"statusOfRace\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:13:\"startLocation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"lat\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"long\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:11:\"endLocation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"lat\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:4:\"long\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}}s:8:\"required\";a:6:{i:0;s:4:\"name\";i:1;s:11:\"description\";i:2;s:4:\"date\";i:3;s:8:\"location\";i:4;s:9:\"startTime\";i:5;s:7:\"endTime\";}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:6:\"Events\";}}s:5:\"Rider\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":20:{s:5:\"email\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:7:\"pattern\";s:36:\"^[a-z0-9._%+-]+@[a-z0-9._]+\\.[a-z]+$\";s:11:\"uniqueItems\";b:1;}s:8:\"username\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"string\";s:7:\"pattern\";s:14:\"^[a-zA-Z0-9]+$\";s:11:\"uniqueItems\";b:1;}s:9:\"firstName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"lastName\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:6:\"height\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:6:\"weight\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:6:\"gender\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"bio\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"phoneNo\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"address\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"image\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:9:\"following\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:19:\"#/definitions/Rider\";}}s:16:\"registeredEvents\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:20:\"#/definitions/Events\";}}s:10:\"activities\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:7:\"eventId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:10:\"activityId\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}s:10:\"statistics\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":10:{s:19:\"participantioncount\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"avgspeed\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"maxspeed\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:13:\"totaldistance\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;}s:15:\"longestdistance\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;}s:12:\"maxelevation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;}s:16:\"averageelevation\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;}s:8:\"wincount\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;}s:15:\"totalmovingtime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:17:\"longestmovingtime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:5:\"admin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:4:\"hash\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:4:\"salt\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:18:\"resetPasswordToken\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:20:\"resetPasswordExpires\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:8:\"required\";a:2:{i:0;s:5:\"email\";i:1;s:8:\"username\";}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:5:\"Rider\";}}s:8:\"Activity\";O:8:\"stdClass\":4:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":7:{s:7:\"riderid\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"eventid\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"latestcoordinates\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:3:\"lat\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:3:\"lng\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:9:\"gps_stats\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:23:\"#/definitions/GPS_Stats\";}}s:11:\"currentRace\";O:8:\"stdClass\":2:{s:4:\"type\";s:5:\"array\";s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}s:9:\"completed\";O:8:\"stdClass\":2:{s:4:\"type\";s:7:\"boolean\";s:7:\"default\";b:0;}s:9:\"racestats\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:4:\"$ref\";s:23:\"#/definitions/RaceStats\";}}s:8:\"required\";a:2:{i:0;s:7:\"riderid\";i:1;s:7:\"eventid\";}s:3:\"xml\";O:8:\"stdClass\":1:{s:4:\"name\";s:8:\"Activity\";}}s:9:\"GPS_Stats\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":6:{s:9:\"timestamp\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:3:\"lat\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:3:\"lng\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:5:\"speed\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"distLeft\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:8:\"altitude\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:16:\"LoginCredentials\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}s:21:\"CreateUserCredentials\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":4:{s:5:\"email\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"password\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:8:\"username\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:5:\"admin\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}}}s:9:\"RaceStats\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":8:{s:12:\"averagespeed\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;s:7:\"maximum\";i:100;}s:8:\"maxspeed\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;s:7:\"maximum\";i:100;}s:9:\"lastspeed\";O:8:\"stdClass\":3:{s:4:\"type\";s:6:\"number\";s:7:\"minimum\";i:0;s:7:\"maximum\";i:100;}s:13:\"totaldistance\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:16:\"currentelevation\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:12:\"maxelevation\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:16:\"averageelevation\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}s:11:\"elapsedtime\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"number\";}}}s:6:\"Result\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":2:{s:6:\"result\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"boolean\";}s:6:\"status\";O:8:\"stdClass\":2:{s:4:\"type\";s:6:\"object\";s:10:\"properties\";O:8:\"stdClass\":1:{s:3:\"msg\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}}}}}}"
...
