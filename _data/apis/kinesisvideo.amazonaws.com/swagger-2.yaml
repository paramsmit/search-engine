---
swagger: "2.0"
info: !php/object "O:8:\"stdClass\":14:{s:7:\"contact\";O:8:\"stdClass\":4:{s:5:\"email\";s:23:\"mike.ralphson@gmail.com\";s:4:\"name\";s:13:\"Mike
  Ralphson\";s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:9:\"x-twitter\";s:12:\"PermittedSoc\";}s:11:\"description\";s:4:\"<p/>\";s:7:\"license\";O:8:\"stdClass\":2:{s:4:\"name\";s:18:\"Apache
  2.0 License\";s:3:\"url\";s:31:\"http://www.apache.org/licenses/\";}s:14:\"termsOfService\";s:37:\"https://aws.amazon.com/service-terms/\";s:5:\"title\";s:43:\"Amazon
  Kinesis Video Streams Archived Media\";s:7:\"version\";s:10:\"2017-09-30\";s:23:\"x-apiClientRegistration\";O:8:\"stdClass\":1:{s:3:\"url\";s:79:\"https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\";}s:21:\"x-apisguru-categories\";a:1:{i:0;s:5:\"cloud\";}s:6:\"x-logo\";O:8:\"stdClass\":2:{s:15:\"backgroundColor\";s:7:\"#FFFFFF\";s:3:\"url\";s:81:\"https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg\";}s:8:\"x-origin\";a:1:{i:0;O:8:\"stdClass\":4:{s:11:\"contentType\";s:16:\"application/json\";s:9:\"converter\";O:8:\"stdClass\":2:{s:3:\"url\";s:38:\"https://github.com/mermade/aws2openapi\";s:7:\"version\";s:5:\"1.0.0\";}s:3:\"url\";s:112:\"https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-archived-media-2017-09-30.normal.json\";s:17:\"x-apisguru-direct\";b:1;}}s:11:\"x-preferred\";b:1;s:14:\"x-providerName\";s:13:\"amazonaws.com\";s:9:\"x-release\";s:2:\"v4\";s:13:\"x-serviceName\";s:28:\"kinesis-video-archived-media\";}"
host: kinesisvideo.amazonaws.com
basePath: /
paths: ~
produces:
- application/json
schemes:
- https
- http
definitions: !php/object "O:8:\"stdClass\":37:{s:28:\"ClientLimitExceededException\";O:8:\"stdClass\":3:{s:11:\"description\";s:135:\"Kinesis
  Video Streams has throttled the request because you have exceeded the limit of allowed
  client calls. Try making the call later.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:11:\"ContentType\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:128;s:9:\"minLength\";i:1;s:7:\"pattern\";s:19:\"^[a-zA-Z0-9_\\.\\-]+$\";s:4:\"type\";s:6:\"string\";}s:17:\"DiscontinuityMode\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:6:\"ALWAYS\";i:1;s:5:\"NEVER\";}s:4:\"type\";s:6:\"string\";}s:12:\"ErrorMessage\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:7:\"Expires\";O:8:\"stdClass\":3:{s:7:\"maximum\";i:43200;s:7:\"minimum\";i:300;s:4:\"type\";s:7:\"integer\";}s:8:\"Fragment\";O:8:\"stdClass\":3:{s:11:\"description\";s:59:\"Represents
  a segment of video or other time-delimited data.\";s:10:\"properties\";O:8:\"stdClass\":5:{s:28:\"FragmentLengthInMilliseconds\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Long\";s:11:\"description\";s:71:\"The
  playback duration or other time value associated with the fragment.\";}s:14:\"FragmentNumber\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:32:\"The
  index value of the fragment.\";}s:19:\"FragmentSizeInBytes\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:18:\"#/definitions/Long\";s:11:\"description\";s:91:\"The
  total fragment size, including information about the fragment and contained media
  data.\";}s:17:\"ProducerTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:63:\"The
  time stamp from the producer corresponding to the fragment.\";}s:15:\"ServerTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:65:\"The
  time stamp from the AWS server corresponding to the fragment.\";}}s:4:\"type\";s:6:\"object\";}s:12:\"FragmentList\";O:8:\"stdClass\":2:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:22:\"#/definitions/Fragment\";}s:4:\"type\";s:5:\"array\";}s:18:\"FragmentNumberList\";O:8:\"stdClass\":4:{s:5:\"items\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:34:\"#/definitions/FragmentNumberString\";}s:8:\"maxItems\";i:1000;s:8:\"minItems\";i:1;s:4:\"type\";s:5:\"array\";}s:20:\"FragmentNumberString\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:128;s:9:\"minLength\";i:1;s:7:\"pattern\";s:8:\"^[0-9]+$\";s:4:\"type\";s:6:\"string\";}s:16:\"FragmentSelector\";O:8:\"stdClass\":4:{s:11:\"description\";s:77:\"Describes
  the time stamp range and time stamp origin of a range of fragments.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:20:\"FragmentSelectorType\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:34:\"#/definitions/FragmentSelectorType\";s:11:\"description\";s:58:\"The
  origin of the time stamps to use (Server or Producer).\";}s:14:\"TimestampRange\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:28:\"#/definitions/TimestampRange\";s:11:\"description\";s:35:\"The
  range of time stamps to return.\";}}s:8:\"required\";a:2:{i:0;s:20:\"FragmentSelectorType\";i:1;s:14:\"TimestampRange\";}s:4:\"type\";s:6:\"object\";}s:20:\"FragmentSelectorType\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:18:\"PRODUCER_TIMESTAMP\";i:1;s:16:\"SERVER_TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:30:\"GetHLSStreamingSessionURLInput\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":7:{s:17:\"DiscontinuityMode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/DiscontinuityMode\";s:11:\"description\";s:1111:\"<p>Specifies
  when flags marking discontinuities between fragments will be added to the media
  playlists. The default is <code>ALWAYS</code> when <a>HLSFragmentSelector</a> is
  <code>SERVER_TIMESTAMP</code>, and <code>NEVER</code> when it is <code>PRODUCER_TIMESTAMP</code>.</p>
  <p>Media players typically build a timeline of media content to play, based on the
  time stamps of each fragment. This means that if there is any overlap between fragments
  (as is typical if <a>HLSFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>),
  the media player timeline has small gaps between fragments in some places, and overwrites
  frames in other places. When there are discontinuity flags between fragments, the
  media player is expected to reset the timeline, resulting in the fragment being
  played immediately after the previous fragment. We recommend that you always have
  discontinuity flags between fragments if the fragment time stamps are not accurate
  or if fragments might be missing. You should not place discontinuity flags between
  fragments for the player timeline to accurately map to the producer time stamps.</p>\";}s:7:\"Expires\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Expires\";s:11:\"description\";s:381:\"<p>The
  time in seconds until the requested session expires. This value can be between 300
  (5 minutes) and 43200 (12 hours).</p> <p>When a session expires, no new calls to
  <code>GetHLSMasterPlaylist</code>, <code>GetHLSMediaPlaylist</code>, <code>GetMP4InitFragment</code>,
  or <code>GetMP4MediaFragment</code> can be made for that session.</p> <p>The default
  is 300 (5 minutes).</p>\";}s:19:\"HLSFragmentSelector\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:33:\"#/definitions/HLSFragmentSelector\";s:11:\"description\";s:547:\"<p>The
  time range of the requested fragment, and the source of the time stamps.</p> <p>This
  parameter is required if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. This
  parameter is optional if <code>PlaybackMode</code> is <code>LIVE</code>. If <code>PlaybackMode</code>
  is <code>LIVE</code>, the <code>FragmentSelectorType</code> can be set, but the
  <code>TimestampRange</code> should not be set. If <code>PlaybackMode</code> is <code>ON_DEMAND</code>,
  both <code>FragmentSelectorType</code> and <code>TimestampRange</code> must be set.</p>\";}s:31:\"MaxMediaPlaylistFragmentResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/PageLimit\";s:11:\"description\";s:1071:\"<p>The
  maximum number of fragments that are returned in the HLS media playlists.</p> <p>When
  the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments are
  returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>,
  the oldest fragments are returned, up to this maximum number.</p> <p>When there
  are a higher number of fragments available in a live HLS media playlist, video players
  often buffer content before starting playback. Increasing the buffer size increases
  the playback latency, but it decreases the likelihood that rebuffering will occur
  during playback. We recommend that a live HLS media playlist have a minimum of 3
  fragments and a maximum of 10 fragments.</p> <p>The default is 5 fragments if <code>PlaybackMode</code>
  is <code>LIVE</code>, and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>.
  </p> <p>The maximum value of 1,000 fragments corresponds to more than 16 minutes
  of video on streams with 1-second fragments, and more than 2 1/2 hours of video
  on streams with 10-second fragments.</p>\";}s:12:\"PlaybackMode\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/PlaybackMode\";s:11:\"description\";s:2162:\"<p>Whether
  to retrieve live or archived, on-demand data.</p> <p>Features of the two types of
  session include the following:</p> <ul> <li> <p> <b> <code>LIVE</code> </b>: For
  sessions of this type, the HLS media playlist is continually updated with the latest
  fragments as they become available. We recommend that the media player retrieve
  a new playlist on a one-second interval. When this type of session is played in
  a media player, the user interface typically displays a \"live\" notification, with
  no scrubber control for choosing the position in the playback window to display.</p>
  <note> <p>In <code>LIVE</code> mode, the newest available fragments are included
  in an HLS media playlist, even if there is a gap between fragments (that is, if
  a fragment is missing). A gap like this might cause a media player to halt or cause
  a jump in playback. In this mode, fragments are not added to the HLS media playlist
  if they are older than the newest fragment in the playlist. If the missing fragment
  becomes available after a subsequent fragment is added to the playlist, the older
  fragment is not added, and the gap is not filled.</p> </note> </li> <li> <p> <b>
  <code>ON_DEMAND</code> </b>: For sessions of this type, the HLS media playlist contains
  all the fragments for the session, up to the number that is specified in <code>MaxMediaPlaylistFragmentResults</code>.
  The playlist must be retrieved only once for each session. When this type of session
  is played in a media player, the user interface typically displays a scrubber control
  for choosing the position in the playback window to display.</p> </li> </ul> <p>In
  both playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>,
  and if there are multiple fragments with the same start time stamp, the fragment
  that has the larger fragment number (that is, the newer fragment) is included in
  the HLS media playlist. The other fragments are not included. Fragments that have
  different time stamps but have overlapping durations are still included in the HLS
  media playlist. This can lead to unexpected behavior in the media player.</p> <p>The
  default is <code>LIVE</code>.</p>\";}s:9:\"StreamARN\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:25:\"#/definitions/ResourceARN\";s:11:\"description\";s:192:\"<p>The
  Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master playlist
  URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>\";}s:10:\"StreamName\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/StreamName\";s:11:\"description\";s:170:\"<p>The
  name of the stream for which to retrieve the HLS master playlist URL.</p> <p>You
  must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>\";}}s:4:\"type\";s:6:\"object\";}s:31:\"GetHLSStreamingSessionURLOutput\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:22:\"HLSStreamingSessionURL\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:36:\"#/definitions/HLSStreamingSessionURL\";s:11:\"description\";s:103:\"The
  URL (containing the session token) that a media player can use to retrieve the HLS
  master playlist.\";}}s:4:\"type\";s:6:\"object\";}s:28:\"GetMediaForFragmentListInput\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"Fragments\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:32:\"#/definitions/FragmentNumberList\";s:11:\"description\";s:116:\"A
  list of the numbers of fragments for which to retrieve media. You retrieve these
  values with <a>ListFragments</a>.\";}s:10:\"StreamName\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/StreamName\";s:11:\"description\";s:61:\"The
  name of the stream from which to retrieve fragment media.\";}}s:8:\"required\";a:2:{i:0;s:10:\"StreamName\";i:1;s:9:\"Fragments\";}s:4:\"type\";s:6:\"object\";}s:29:\"GetMediaForFragmentListOutput\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Payload\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:21:\"#/definitions/Payload\";s:11:\"description\";s:1077:\"<p>The
  payload that Kinesis Video Streams returns is a sequence of chunks from the specified
  stream. For information about the chunks, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html\">PutMedia</a>.
  The chunks that Kinesis Video Streams returns in the <code>GetMediaForFragmentList</code>
  call also include the following additional Matroska (MKV) tags: </p> <ul> <li> <p>AWS_KINESISVIDEO_FRAGMENT_NUMBER
  - Fragment number returned in the chunk.</p> </li> <li> <p>AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP
  - Server-side time stamp of the fragment.</p> </li> <li> <p>AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP
  - Producer-side time stamp of the fragment.</p> </li> </ul> <p>The following tags
  will be included if an exception occurs:</p> <ul> <li> <p>AWS_KINESISVIDEO_FRAGMENT_NUMBER
  - The number of the fragment that threw the exception</p> </li> <li> <p>AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE
  - The integer code of the exception</p> </li> <li> <p>AWS_KINESISVIDEO_EXCEPTION_MESSAGE
  - A text description of the exception</p> </li> </ul>\";}}s:4:\"type\";s:6:\"object\";}s:19:\"HLSFragmentSelector\";O:8:\"stdClass\":3:{s:11:\"description\";s:93:\"Contains
  the range of time stamps for the requested media, and the source of the time stamps.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:20:\"FragmentSelectorType\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:37:\"#/definitions/HLSFragmentSelectorType\";s:11:\"description\";s:1651:\"<p>The
  source of the time stamps for the requested media.</p> <p>When <code>FragmentSelectorType</code>
  is set to <code>PRODUCER_TIMESTAMP</code> and <a>GetHLSStreamingSessionURLInput$PlaybackMode</a>
  is <code>ON_DEMAND</code>, the first fragment ingested with a producer time stamp
  within the specified <a>FragmentSelector$TimestampRange</a> is included in the media
  playlist. In addition, the fragments with producer time stamps within the <code>TimestampRange</code>
  ingested immediately following the first fragment (up to the <a>GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults</a>
  value) are included. </p> <p>Fragments that have duplicate producer time stamps
  are deduplicated. This means that if producers are producing a stream of fragments
  with producer time stamps that are approximately equal to the true clock time, the
  HLS media playlists will contain all of the fragments within the requested time
  stamp range. If some fragments are ingested within the same time range and very
  different points in time, only the oldest ingested collection of fragments are returned.</p>
  <p>When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code>
  and <a>GetHLSStreamingSessionURLInput$PlaybackMode</a> is <code>LIVE</code>, the
  producer time stamps are used in the MP4 fragments and for deduplication. But the
  most recently ingested fragments based on server time stamps are included in the
  HLS media playlist. This means that even if fragments ingested in the past have
  producer time stamps with values now, they are not included in the HLS media playlist.</p>
  <p>The default is <code>SERVER_TIMESTAMP</code>.</p>\";}s:14:\"TimestampRange\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:31:\"#/definitions/HLSTimestampRange\";s:11:\"description\";s:164:\"<p>The
  start and end of the time stamp range for the requested media.</p> <p>This value
  should not be present if <code>PlaybackType</code> is <code>LIVE</code>.</p>\";}}s:4:\"type\";s:6:\"object\";}s:23:\"HLSFragmentSelectorType\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:18:\"PRODUCER_TIMESTAMP\";i:1;s:16:\"SERVER_TIMESTAMP\";}s:4:\"type\";s:6:\"string\";}s:22:\"HLSStreamingSessionURL\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:17:\"HLSTimestampRange\";O:8:\"stdClass\":3:{s:11:\"description\";s:410:\"<p>The
  start and end of the time stamp range for the requested media.</p> <p>This value
  should not be present if <code>PlaybackType</code> is <code>LIVE</code>.</p> <note>
  <p>The values in the <code>HLSTimestampRange</code> are inclusive. Fragments that
  begin before the start time but continue past it, or fragments that begin before
  the end time but continue past it, are included in the session.</p> </note>\";s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"EndTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:697:\"<p>The
  end of the time stamp range for the requested media. This value must be within 3
  hours of the specified <code>StartTimestamp</code>, and it must be later than the
  <code>StartTimestamp</code> value.</p> <p>If <code>FragmentSelectorType</code> for
  the request is <code>SERVER_TIMESTAMP</code>, this value must be in the past.</p>
  <p>If the <code>HLSTimestampRange</code> value is specified, the <code>EndTimestamp</code>
  value is required.</p> <note> <p>This value is inclusive. The <code>EndTimestamp</code>
  is compared to the (starting) time stamp of the fragment. Fragments that start before
  the <code>EndTimestamp</code> value and continue past it are included in the session.</p>
  </note>\";}s:14:\"StartTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:477:\"<p>The
  start of the time stamp range for the requested media.</p> <p>If the <code>HLSTimestampRange</code>
  value is specified, the <code>StartTimestamp</code> value is required.</p> <note>
  <p>This value is inclusive. Fragments that start before the <code>StartTimestamp</code>
  and continue past it are included in the session. If <code>FragmentSelectorType</code>
  is <code>SERVER_TIMESTAMP</code>, the <code>StartTimestamp</code> must be later
  than the stream head.</p> </note>\";}}s:4:\"type\";s:6:\"object\";}s:24:\"InvalidArgumentException\";O:8:\"stdClass\":3:{s:11:\"description\";s:83:\"A
  specified parameter exceeds its restrictions, is not supported, or can't be used.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:32:\"InvalidCodecPrivateDataException\";O:8:\"stdClass\":3:{s:11:\"description\";s:75:\"The
  Codec Private Data in the video stream is not valid for this operation.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:18:\"ListFragmentsInput\";O:8:\"stdClass\":3:{s:10:\"properties\";O:8:\"stdClass\":4:{s:16:\"FragmentSelector\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:30:\"#/definitions/FragmentSelector\";s:11:\"description\";s:90:\"Describes
  the time stamp range and time stamp origin for the range of fragments to return.\";}s:10:\"MaxResults\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/PageLimit\";s:11:\"description\";s:254:\"The
  total number of fragments to return. If the total number of fragments available
  is more than the value specified in <code>max-results</code>, then a <a>ListFragmentsOutput$NextToken</a>
  is provided in the output that you can use to resume pagination.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:132:\"A
  token to specify where to start paginating. This is the <a>ListFragmentsOutput$NextToken</a>
  from a previously truncated response.\";}s:10:\"StreamName\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:24:\"#/definitions/StreamName\";s:11:\"description\";s:62:\"The
  name of the stream from which to retrieve a fragment list.\";}}s:8:\"required\";a:1:{i:0;s:10:\"StreamName\";}s:4:\"type\";s:6:\"object\";}s:19:\"ListFragmentsOutput\";O:8:\"stdClass\":2:{s:10:\"properties\";O:8:\"stdClass\":2:{s:9:\"Fragments\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:26:\"#/definitions/FragmentList\";s:11:\"description\";s:76:\"A
  list of fragment numbers that correspond to the time stamp range provided.\";}s:9:\"NextToken\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:20:\"#/definitions/String\";s:11:\"description\";s:186:\"If
  the returned list is truncated, the operation returns this token to use to retrieve
  the next page of results. This value is <code>null</code> when there are no more
  results to return.\";}}s:4:\"type\";s:6:\"object\";}s:4:\"Long\";O:8:\"stdClass\":1:{s:4:\"type\";s:7:\"integer\";}s:32:\"MissingCodecPrivateDataException\";O:8:\"stdClass\":3:{s:11:\"description\";s:52:\"No
  Codec Private Data was found in the video stream.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:24:\"NoDataRetentionException\";O:8:\"stdClass\":3:{s:11:\"description\";s:164:\"A
  <code>PlaybackMode</code> of <code>ON_DEMAND</code> was requested for a stream that
  does not retain data (that is, has a <code>DataRetentionInHours</code> of 0). \";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:22:\"NotAuthorizedException\";O:8:\"stdClass\":3:{s:11:\"description\";s:117:\"Status
  Code: 403, The caller is not authorized to perform an operation on the given stream,
  or the token has expired.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:9:\"PageLimit\";O:8:\"stdClass\":3:{s:7:\"maximum\";i:1000;s:7:\"minimum\";i:1;s:4:\"type\";s:7:\"integer\";}s:7:\"Payload\";O:8:\"stdClass\":1:{s:4:\"type\";s:6:\"string\";}s:12:\"PlaybackMode\";O:8:\"stdClass\":2:{s:4:\"enum\";a:2:{i:0;s:4:\"LIVE\";i:1;s:9:\"ON_DEMAND\";}s:4:\"type\";s:6:\"string\";}s:11:\"ResourceARN\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:1024;s:9:\"minLength\";i:1;s:7:\"pattern\";s:68:\"arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+\";s:4:\"type\";s:6:\"string\";}s:25:\"ResourceNotFoundException\";O:8:\"stdClass\":3:{s:11:\"description\";s:480:\"<p>
  <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
  stream that you specified.</p> <p> <code>GetHLSStreamingSessionURL</code> throws
  this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
  is requested for a stream that has no fragments within the requested time range,
  or if a session with a <code>PlaybackMode</code> of <code>LIVE</code> is requested
  for a stream that has no fragments within the last 30 seconds.</p>\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}s:10:\"StreamName\";O:8:\"stdClass\":4:{s:9:\"maxLength\";i:256;s:9:\"minLength\";i:1;s:7:\"pattern\";s:15:\"[a-zA-Z0-9_.-]+\";s:4:\"type\";s:6:\"string\";}s:6:\"String\";O:8:\"stdClass\":2:{s:9:\"minLength\";i:1;s:4:\"type\";s:6:\"string\";}s:9:\"Timestamp\";O:8:\"stdClass\":2:{s:6:\"format\";s:9:\"date-time\";s:4:\"type\";s:6:\"string\";}s:14:\"TimestampRange\";O:8:\"stdClass\":4:{s:11:\"description\";s:55:\"The
  range of time stamps for which to return fragments.\";s:10:\"properties\";O:8:\"stdClass\":2:{s:12:\"EndTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:80:\"The
  ending time stamp in the range of time stamps for which to return fragments.\";}s:14:\"StartTimestamp\";O:8:\"stdClass\":2:{s:4:\"$ref\";s:23:\"#/definitions/Timestamp\";s:11:\"description\";s:82:\"The
  starting time stamp in the range of time stamps for which to return fragments.\";}}s:8:\"required\";a:2:{i:0;s:14:\"StartTimestamp\";i:1;s:12:\"EndTimestamp\";}s:4:\"type\";s:6:\"object\";}s:35:\"UnsupportedStreamMediaTypeException\";O:8:\"stdClass\":3:{s:11:\"description\";s:106:\"An
  HLS streaming session was requested for a stream with a media type that is not <code>video/h264</code>.\";s:10:\"properties\";O:8:\"stdClass\":1:{s:7:\"Message\";O:8:\"stdClass\":1:{s:4:\"$ref\";s:26:\"#/definitions/ErrorMessage\";}}s:4:\"type\";s:6:\"object\";}}"
...
